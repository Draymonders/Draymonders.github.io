<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Draymonder</title>
  <subtitle>想去远方</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.draymonder.site/"/>
  <updated>2019-02-14T16:20:35.276Z</updated>
  <id>http://www.draymonder.site/</id>
  
  <author>
    <name>Draymonder</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>多线程学习 day2</title>
    <link href="http://www.draymonder.site/backend/java/thread/thread-learn-day2/"/>
    <id>http://www.draymonder.site/backend/java/thread/thread-learn-day2/</id>
    <published>2019-02-14T15:59:00.000Z</published>
    <updated>2019-02-14T16:20:35.276Z</updated>
    
    <content type="html"><![CDATA[<h2 id="同步代码块"><a href="#同步代码块" class="headerlink" title="同步代码块"></a>同步代码块</h2><p>SynchronizedTest类，用来表示取票功能<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> concurency.chapter6;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SynchronizedTest</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX = <span class="number">250</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> index = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</div><div class="line">            <span class="keyword">if</span>(ticket())</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// synchronized 此时锁的是 this 锁的是一个对象，别弄错了</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">boolean</span> <span class="title">ticket</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(index &gt;= MAX)</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Thread.sleep(<span class="number">10</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">" "</span> + (++index));</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Ticket 模拟游乐园放票<br><figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> concurency.chapter6;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Ticket</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> void main(<span class="keyword">String</span>[] args) &#123;</div><div class="line">        final SynchronizedTest synRunnable = <span class="keyword">new</span> <span class="type">SynchronizedTest</span>();</div><div class="line">        Thread t1 = <span class="keyword">new</span> <span class="type">Thread</span>(synRunnable, <span class="string">"窗口1"</span>);</div><div class="line">        Thread t2 = <span class="keyword">new</span> <span class="type">Thread</span>(synRunnable, <span class="string">"窗口2"</span>);</div><div class="line">        Thread t3 = <span class="keyword">new</span> <span class="type">Thread</span>(synRunnable, <span class="string">"窗口3"</span>);</div><div class="line">        t1.start(); t2.start(); t3.start();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="synchronized-同步方法时，其实是同步的this对象"><a href="#synchronized-同步方法时，其实是同步的this对象" class="headerlink" title="synchronized 同步方法时，其实是同步的this对象"></a><code>synchronized</code> 同步方法时，其实是同步的this对象</h3><p>下面可以证明<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> concurency.chapter6;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SynchronizedThis</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        LockThis l1 = <span class="keyword">new</span> LockThis();</div><div class="line">        <span class="keyword">new</span> Thread(<span class="string">"thread1"</span>)&#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                l1.m1();</div><div class="line">            &#125;</div><div class="line">        &#125;.start();</div><div class="line"></div><div class="line">        <span class="keyword">new</span> Thread(<span class="string">"thread2"</span>)&#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                l1.m2();</div><div class="line">            &#125;</div><div class="line">        &#125;.start();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">LockThis</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">m1</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">" method1"</span>);</div><div class="line">            Thread.sleep(<span class="number">3_000</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">m2</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">" method2"</span>);</div><div class="line">            Thread.sleep(<span class="number">3_000</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="synchronized-同步静态方法时，其实是同步的class"><a href="#synchronized-同步静态方法时，其实是同步的class" class="headerlink" title="synchronized 同步静态方法时，其实是同步的class"></a><code>synchronized</code> 同步静态方法时，其实是同步的class</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> concurency.chapter6;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SynchronizedThis</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">new</span> Thread(<span class="string">"thread1"</span>)&#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                LockThis.m1();</div><div class="line">            &#125;</div><div class="line">        &#125;.start();</div><div class="line"></div><div class="line">        <span class="keyword">new</span> Thread(<span class="string">"thread2"</span>)&#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                LockThis.m2();</div><div class="line">            &#125;</div><div class="line">        &#125;.start();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">LockThis</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">m1</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">" method1"</span>);</div><div class="line">            Thread.sleep(<span class="number">3_000</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">m2</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">" method2"</span>);</div><div class="line">            Thread.sleep(<span class="number">3_000</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="死锁小案例"><a href="#死锁小案例" class="headerlink" title="死锁小案例"></a>死锁小案例</h2><p>Service1 两个方法. m1和m2<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> concurency.chapter7;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Service1</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Object lock1 = <span class="keyword">new</span> Object();</div><div class="line"></div><div class="line">    <span class="keyword">public</span> Service2 service2;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Service1</span><span class="params">(Service2 service2)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.service2 = service2;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m1</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">synchronized</span>(lock1) &#123;</div><div class="line">            System.out.println(<span class="string">"---m1---"</span>);</div><div class="line">            service2.s1();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m2</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">synchronized</span>(lock1) &#123;</div><div class="line">            System.out.println(<span class="string">"---m2---"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Service2 两个方法, s1和s2<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> concurency.chapter7;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Service2</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">s1</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">synchronized</span> (lock2) &#123;</div><div class="line">            System.out.println(<span class="string">"---s1---"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">s2</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">synchronized</span> (lock2) &#123;</div><div class="line">            System.out.println(<span class="string">"---s2---"</span>);</div><div class="line">            service1.m2();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Object lock2 = <span class="keyword">new</span> Object();</div><div class="line"></div><div class="line">    <span class="keyword">public</span> Service1 service1;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setService1</span><span class="params">(Service1 service1)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.service1 = service1;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>死锁尝试</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> concurency.chapter7;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeadLockTest</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Service2 service2 = <span class="keyword">new</span> Service2();</div><div class="line">        Service1 service1 = <span class="keyword">new</span> Service1(service2);</div><div class="line">        service2.setService1(service1);</div><div class="line"></div><div class="line">        <span class="keyword">new</span> Thread() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="keyword">while</span>(<span class="keyword">true</span>)</div><div class="line">                    service2.s2();</div><div class="line">            &#125;</div><div class="line">        &#125;.start();</div><div class="line"></div><div class="line">        <span class="keyword">new</span> Thread() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="keyword">while</span>(<span class="keyword">true</span>)</div><div class="line">                    service1.m1();</div><div class="line">            &#125;</div><div class="line">        &#125;.start();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>jstack命令查看线程<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">Found one <span class="keyword">Java-level </span>deadlock:</div><div class="line">=============================</div><div class="line"><span class="string">"Thread-1"</span>:</div><div class="line">  <span class="keyword">waiting </span>to lock monitor <span class="number">0x0000000017ceddd8</span> (object <span class="number">0x00000000d5f7e150</span>, a <span class="keyword">java.lang.Object),</span></div><div class="line"><span class="keyword"> </span> which is held <span class="keyword">by </span><span class="string">"Thread-0"</span></div><div class="line"><span class="string">"Thread-0"</span>:</div><div class="line">  <span class="keyword">waiting </span>to lock monitor <span class="number">0x0000000017cec938</span> (object <span class="number">0x00000000d5f806c8</span>, a <span class="keyword">java.lang.Object),</span></div><div class="line"><span class="keyword"> </span> which is held <span class="keyword">by </span><span class="string">"Thread-1"</span></div><div class="line"></div><div class="line"><span class="keyword">Java </span>stack information for the threads listed above:</div><div class="line">===================================================</div><div class="line"><span class="string">"Thread-1"</span>:</div><div class="line">        <span class="built_in">at</span> concurency.chapter7.Service2.s1(Service2.<span class="keyword">java:6)</span></div><div class="line"><span class="keyword"> </span>       - <span class="keyword">waiting </span>to lock &lt;<span class="number">0x00000000d5f7e150</span>&gt; (a <span class="keyword">java.lang.Object)</span></div><div class="line"><span class="keyword"> </span>       <span class="built_in">at</span> concurency.chapter7.Service1.m1(Service1.<span class="keyword">java:16)</span></div><div class="line"><span class="keyword"> </span>       - locked &lt;<span class="number">0x00000000d5f806c8</span>&gt; (a <span class="keyword">java.lang.Object)</span></div><div class="line"><span class="keyword"> </span>       <span class="built_in">at</span> concurency.chapter7.DeadLockTest$<span class="number">2</span>.run(DeadLockTest.<span class="keyword">java:21)</span></div><div class="line"><span class="keyword">"Thread-0":</span></div><div class="line"><span class="keyword"> </span>       <span class="built_in">at</span> concurency.chapter7.Service1.m2(Service1.<span class="keyword">java:21)</span></div><div class="line"><span class="keyword"> </span>       - <span class="keyword">waiting </span>to lock &lt;<span class="number">0x00000000d5f806c8</span>&gt; (a <span class="keyword">java.lang.Object)</span></div><div class="line"><span class="keyword"> </span>       <span class="built_in">at</span> concurency.chapter7.Service2.s2(Service2.<span class="keyword">java:13)</span></div><div class="line"><span class="keyword"> </span>       - locked &lt;<span class="number">0x00000000d5f7e150</span>&gt; (a <span class="keyword">java.lang.Object)</span></div><div class="line"><span class="keyword"> </span>       <span class="built_in">at</span> concurency.chapter7.DeadLockTest$<span class="number">1</span>.run(DeadLockTest.<span class="keyword">java:13)</span></div><div class="line"><span class="keyword"></span></div><div class="line"><span class="keyword">Found </span><span class="number">1</span> deadlock.</div></pre></td></tr></table></figure></p>
<h2 id="生产者与消费者"><a href="#生产者与消费者" class="headerlink" title="生产者与消费者"></a>生产者与消费者</h2><h3 id="单个生产者-单个消费者"><a href="#单个生产者-单个消费者" class="headerlink" title="单个生产者 单个消费者"></a>单个生产者 单个消费者</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> concurency.chapter8;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerAndProducer</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> index = <span class="number">0</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Object LOCK = <span class="keyword">new</span> Object();</div><div class="line"></div><div class="line">    <span class="keyword">volatile</span> <span class="keyword">boolean</span> isProduce = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">produce</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">synchronized</span>(LOCK) &#123;</div><div class="line">            <span class="keyword">if</span>( isProduce ) &#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    LOCK.wait();</div><div class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="comment">// 没生产过</span></div><div class="line">                index++;</div><div class="line">                System.out.println(<span class="string">"product-&gt;"</span> + index);</div><div class="line">                isProduce = <span class="keyword">true</span>;</div><div class="line">                LOCK.notify();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">consume</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">synchronized</span> (LOCK) &#123;</div><div class="line">            <span class="keyword">if</span>(isProduce) &#123;</div><div class="line">                System.out.println(<span class="string">"consume-&gt;"</span> + index);</div><div class="line">                isProduce = <span class="keyword">false</span>;</div><div class="line">                LOCK.notify();</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    LOCK.wait();</div><div class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        ConsumerAndProducer cp = <span class="keyword">new</span> ConsumerAndProducer();</div><div class="line"></div><div class="line">        <span class="keyword">new</span> Thread(<span class="string">"producer"</span>) &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="keyword">while</span>(<span class="keyword">true</span>)</div><div class="line">                    cp.produce();</div><div class="line">            &#125;</div><div class="line">        &#125;.start();</div><div class="line"></div><div class="line">        <span class="keyword">new</span> Thread(<span class="string">"consumer"</span>) &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="keyword">while</span> (<span class="keyword">true</span>)</div><div class="line">                    cp.consume();</div><div class="line">            &#125;</div><div class="line">        &#125;.start();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="多个生产者-多个消费者"><a href="#多个生产者-多个消费者" class="headerlink" title="多个生产者 多个消费者"></a>多个生产者 多个消费者</h3><figure class="highlight livescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line">package concurency.chapter8;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.stream.Stream;</div><div class="line"></div><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">ConsumerAndProducerV2</span> &#123;</span></div><div class="line">    int index = <span class="number">0</span>;</div><div class="line">    private final Object LOCK = <span class="keyword">new</span> Object();</div><div class="line"></div><div class="line">    volatile boolean isProduce = <span class="literal">false</span>;</div><div class="line"></div><div class="line">    private <span class="literal">void</span> produce() &#123;</div><div class="line">        synchronized (LOCK) &#123;</div><div class="line">            <span class="keyword">while</span>(isProduce) &#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    LOCK.wait();</div><div class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            index++;</div><div class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">" "</span> + index);</div><div class="line">            isProduce = <span class="literal">true</span>;</div><div class="line">            LOCK.notifyAll();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private <span class="literal">void</span> consume() &#123;</div><div class="line">        synchronized (LOCK) &#123;</div><div class="line">            <span class="keyword">while</span>(!isProduce) &#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    LOCK.wait();</div><div class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">" "</span> + index);</div><div class="line">            isProduce = <span class="literal">false</span>;</div><div class="line">            LOCK.notifyAll();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static <span class="literal">void</span> main(String[] args) &#123;</div><div class="line">        ConsumerAndProducerV2 cp = <span class="keyword">new</span> ConsumerAndProducerV2();</div><div class="line">        Stream.<span class="keyword">of</span><span class="function"><span class="params">(<span class="string">"Producer1"</span>, <span class="string">"Producer2"</span>, <span class="string">"Producer3"</span>)</span>.<span class="title">forEach</span><span class="params">((name)-&gt;&#123;</span></span></div><div class="line"><span class="function"><span class="params">            <span class="keyword">new</span> Thread(name) &#123;</span></span></div><div class="line"><span class="function"><span class="params">                @Override</span></span></div><div class="line"><span class="function"><span class="params">                public <span class="literal">void</span> run() &#123;</span></span></div><div class="line"><span class="function"><span class="params">                    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span></span></div><div class="line"><span class="function"><span class="params">                        cp.produce();</span></span></div><div class="line"><span class="function"><span class="params">                        <span class="keyword">try</span> &#123;</span></span></div><div class="line"><span class="function"><span class="params">                            Thread.sleep(<span class="number">100</span>);</span></span></div><div class="line"><span class="function"><span class="params">                        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span></span></div><div class="line"><span class="function"><span class="params">                            e.printStackTrace();</span></span></div><div class="line"><span class="function"><span class="params">                        &#125;</span></span></div><div class="line"><span class="function"><span class="params">                    &#125;</span></span></div><div class="line"><span class="function"><span class="params">                &#125;</span></span></div><div class="line"><span class="function"><span class="params">            &#125;.start();</span></span></div><div class="line"><span class="function"><span class="params">        &#125;)</span>;</span></div><div class="line"><span class="function"></span></div><div class="line"><span class="function">        <span class="title">Stream</span>.<span class="title">of</span><span class="params">(<span class="string">"Consumer1"</span>, <span class="string">"Consumer2"</span>, <span class="string">"Consumer3"</span>, <span class="string">"Consumer4"</span>)</span>.<span class="title">forEach</span><span class="params">((name)-&gt;&#123;</span></span></div><div class="line"><span class="function"><span class="params">            <span class="keyword">new</span> Thread(name) &#123;</span></span></div><div class="line"><span class="function"><span class="params">                @Override</span></span></div><div class="line"><span class="function"><span class="params">                public <span class="literal">void</span> run() &#123;</span></span></div><div class="line"><span class="function"><span class="params">                    <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span></span></div><div class="line"><span class="function"><span class="params">                        cp.consume();</span></span></div><div class="line"><span class="function"><span class="params">                        <span class="keyword">try</span> &#123;</span></span></div><div class="line"><span class="function"><span class="params">                            Thread.sleep(<span class="number">100</span>);</span></span></div><div class="line"><span class="function"><span class="params">                        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span></span></div><div class="line"><span class="function"><span class="params">                            e.printStackTrace();</span></span></div><div class="line"><span class="function"><span class="params">                        &#125;</span></span></div><div class="line"><span class="function"><span class="params">                    &#125;</span></span></div><div class="line"><span class="function"><span class="params">                &#125;</span></span></div><div class="line"><span class="function"><span class="params">            &#125;.start();</span></span></div><div class="line"><span class="function"><span class="params">        &#125;)</span>;</span></div><div class="line"><span class="function">    &#125;</span></div><div class="line"><span class="function">&#125;</span></div></pre></td></tr></table></figure>
<h2 id="wait和sleep区别"><a href="#wait和sleep区别" class="headerlink" title="wait和sleep区别"></a>wait和sleep区别</h2><ol>
<li><code>sleep</code>是<code>Thread</code>的方法，而<code>wait</code>是<code>object</code>的方法</li>
<li><code>sleep</code> will not release the monitor(LOCK), but <code>wait</code> will release the monitor(LOCK) and add to the object monitor waiting queue.</li>
<li>use <code>sleep</code> not depend on the monitor, but <code>wait</code> need(synchronized).</li>
<li><code>sleep</code> not need to be wakeup, but <code>wait</code> must need to notify.</li>
</ol>
<h2 id="数据采集多线程案例"><a href="#数据采集多线程案例" class="headerlink" title="数据采集多线程案例"></a>数据采集多线程案例</h2><figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> concurency.chapter8;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.*;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * @author draymonder</span></div><div class="line"><span class="comment"> * @Date 2019/02/14</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> class DataCapture &#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">Object</span> LOCK = <span class="keyword">new</span> <span class="keyword">Object</span>();</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">int</span> MAX = <span class="number">5</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> LinkedList&lt;Controller&gt; list = <span class="keyword">new</span> LinkedList&lt;&gt;();</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) &#123;</div><div class="line">        ArrayList&lt;Thread&gt; threads = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        <span class="comment">// 开辟10个线程, 每个线程采集数据</span></div><div class="line">        Arrays.asList(<span class="string">"Mac1"</span>, <span class="string">"Mac2"</span>, <span class="string">"Mac3"</span>, <span class="string">"Mac4"</span>, <span class="string">"Mac5"</span>, <span class="string">"Mac6"</span>, <span class="string">"Mac7"</span>, <span class="string">"Mac8"</span>, <span class="string">"Mac9"</span>, <span class="string">"Mac10"</span>).stream()</div><div class="line">                .<span class="built_in">map</span>(DataCapture::createDataCaptureThread).forEach(dataCaptureThread-&gt;&#123;</div><div class="line">                dataCaptureThread.start();</div><div class="line">                <span class="comment">// 放入threads List中</span></div><div class="line">                threads.<span class="built_in">add</span>(dataCaptureThread);</div><div class="line">        &#125;);</div><div class="line">        <span class="comment">// main线程等这10个线程 执行完再结束</span></div><div class="line">        threads.forEach((thread)-&gt;&#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                thread.<span class="built_in">join</span>();</div><div class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        Optional.of(<span class="string">"the data capture have finished"</span>).ifPresent(System.out::<span class="built_in">println</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Thread createDataCaptureThread(<span class="keyword">String</span> name) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Thread(()-&gt;&#123;</div><div class="line">            Optional.of(Thread.currentThread().getName() + <span class="string">" is begin"</span>).ifPresent(System.out::<span class="built_in">println</span>);</div><div class="line">            <span class="comment">// 如果大于等于5个线程，后面的线程就等待</span></div><div class="line">            <span class="keyword">synchronized</span> (LOCK) &#123;</div><div class="line">                <span class="keyword">while</span>(list.<span class="built_in">size</span>() &gt;= MAX) &#123;</div><div class="line">                    <span class="keyword">try</span> &#123;</div><div class="line">                        LOCK.wait();</div><div class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                        e.printStackTrace();</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                list.<span class="built_in">add</span>(<span class="keyword">new</span> Controller());</div><div class="line">            &#125;</div><div class="line">            Optional.of(Thread.currentThread().getName() + <span class="string">" is running"</span>).ifPresent(System.out::<span class="built_in">println</span>);</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                Thread.sleep(<span class="number">10</span>_000);</div><div class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">            <span class="comment">// 执行完毕</span></div><div class="line">            <span class="keyword">synchronized</span> (LOCK) &#123;</div><div class="line">                Optional.of(Thread.currentThread().getName() + <span class="string">" end"</span>).ifPresent(System.out::<span class="built_in">println</span>);</div><div class="line">                <span class="comment">// 执行完  删除一个</span></div><div class="line">                list.removeFirst();</div><div class="line">                LOCK.notifyAll();</div><div class="line">            &#125;</div><div class="line">        &#125;,name);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">static</span> class Controller&#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>执行结果<br><figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">Mac1 <span class="keyword">is</span> <span class="keyword">begin</span></div><div class="line">Mac1 <span class="keyword">is</span> running</div><div class="line">Mac2 <span class="keyword">is</span> <span class="keyword">begin</span></div><div class="line">Mac2 <span class="keyword">is</span> running</div><div class="line">Mac3 <span class="keyword">is</span> <span class="keyword">begin</span></div><div class="line">Mac3 <span class="keyword">is</span> running</div><div class="line">Mac4 <span class="keyword">is</span> <span class="keyword">begin</span></div><div class="line">Mac4 <span class="keyword">is</span> running</div><div class="line">Mac5 <span class="keyword">is</span> <span class="keyword">begin</span></div><div class="line">Mac5 <span class="keyword">is</span> running</div><div class="line">Mac6 <span class="keyword">is</span> <span class="keyword">begin</span></div><div class="line">Mac7 <span class="keyword">is</span> <span class="keyword">begin</span></div><div class="line">Mac8 <span class="keyword">is</span> <span class="keyword">begin</span></div><div class="line">Mac9 <span class="keyword">is</span> <span class="keyword">begin</span></div><div class="line">Mac10 <span class="keyword">is</span> <span class="keyword">begin</span></div><div class="line">Mac1 <span class="keyword">end</span></div><div class="line">Mac10 <span class="keyword">is</span> running</div><div class="line">Mac2 <span class="keyword">end</span></div><div class="line">Mac6 <span class="keyword">is</span> running</div><div class="line">Mac3 <span class="keyword">end</span></div><div class="line">Mac9 <span class="keyword">is</span> running</div><div class="line">Mac4 <span class="keyword">end</span></div><div class="line">Mac7 <span class="keyword">is</span> running</div><div class="line">Mac5 <span class="keyword">end</span></div><div class="line">Mac8 <span class="keyword">is</span> running</div><div class="line">Mac10 <span class="keyword">end</span></div><div class="line">Mac9 <span class="keyword">end</span></div><div class="line">Mac7 <span class="keyword">end</span></div><div class="line">Mac6 <span class="keyword">end</span></div><div class="line">Mac8 <span class="keyword">end</span></div><div class="line">the data capture have finished</div></pre></td></tr></table></figure></p>
<h2 id="实现一个自己的显式锁Lock-有超时功能"><a href="#实现一个自己的显式锁Lock-有超时功能" class="headerlink" title="实现一个自己的显式锁Lock(有超时功能)"></a>实现一个自己的显式锁Lock(有超时功能)</h2><h3 id="Lock接口"><a href="#Lock接口" class="headerlink" title="Lock接口"></a>Lock接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> concurency.chapter9;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.Collection;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Lock</span> </span>&#123;</div><div class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeOutException</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;</div><div class="line">        TimeOutException(String message) &#123;</div><div class="line">            <span class="keyword">super</span>(message);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">lock</span><span class="params">(<span class="keyword">long</span> mills)</span> <span class="keyword">throws</span> InterruptedException,TimeOutException</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function">Collection&lt;Thread&gt; <span class="title">getBlockedThread</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getBlockedSize</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Lock实现类"><a href="#Lock实现类" class="headerlink" title="Lock实现类"></a>Lock实现类</h3><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> concurency.chapter9;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.Collection;</div><div class="line"><span class="keyword">import</span> java.util.Collections;</div><div class="line"><span class="keyword">import</span> java.util.Optional;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BooleanLock</span> <span class="keyword">implements</span> <span class="title">Lock</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BooleanLock</span><span class="params">(<span class="keyword">boolean</span> initValue)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.initValue = initValue;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// false means is free</span></div><div class="line">    <span class="comment">// true means having been used</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> initValue;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Thread currentThread;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Collection&lt;Thread&gt; blockedThreads = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="function"><span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">        <span class="keyword">while</span>(initValue) &#123;</div><div class="line">            blockedThreads.add(Thread.currentThread());</div><div class="line">            <span class="keyword">this</span>.wait();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        blockedThreads.remove(Thread.currentThread());</div><div class="line">        <span class="keyword">this</span>.initValue = <span class="keyword">true</span>;</div><div class="line">        <span class="keyword">this</span>.currentThread = Thread.currentThread();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="function"><span class="keyword">void</span> <span class="title">lock</span><span class="params">(<span class="keyword">long</span> mills)</span> <span class="keyword">throws</span> InterruptedException, TimeOutException </span>&#123;</div><div class="line">        <span class="comment">// less than 0, Ignore it..</span></div><div class="line">        <span class="keyword">if</span>(mills &lt;= <span class="number">0</span>)</div><div class="line">            lock();</div><div class="line">        <span class="keyword">long</span> hasRemaining = mills;</div><div class="line">        <span class="keyword">long</span> endTime = System.currentTimeMillis() + mills;</div><div class="line">        <span class="keyword">while</span>(initValue) &#123;</div><div class="line">            <span class="keyword">if</span>(hasRemaining &lt;= <span class="number">0</span>)</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> TimeOutException(<span class="string">"time out, and the Thread["</span> + Thread.currentThread().getName()+<span class="string">"] do not get the lock"</span>);</div><div class="line">            blockedThreads.add(Thread.currentThread());</div><div class="line">            <span class="keyword">this</span>.wait(mills);</div><div class="line">            hasRemaining = endTime - System.currentTimeMillis();</div><div class="line">        &#125;</div><div class="line">        blockedThreads.remove(Thread.currentThread());</div><div class="line">        <span class="keyword">this</span>.initValue = <span class="keyword">true</span>;</div><div class="line">        <span class="keyword">this</span>.currentThread = Thread.currentThread();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="function"><span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(currentThread != <span class="keyword">null</span> &amp;&amp; Thread.currentThread() == currentThread) &#123;</div><div class="line">            <span class="keyword">this</span>.initValue = <span class="keyword">false</span>;</div><div class="line">            Optional.of(Thread.currentThread().getName() + <span class="string">" release the lock..."</span>).ifPresent(System.out::println);</div><div class="line">            <span class="keyword">this</span>.notifyAll();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> Collection&lt;Thread&gt; getBlockedThread() &#123;</div><div class="line">        <span class="function"><span class="keyword">return</span> Collections.<span class="title">unmodifiableCollection</span><span class="params">(blockedThreads)</span></span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">int</span> <span class="title">getBlockedSize</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="function"><span class="keyword">return</span> blockedThreads.<span class="title">size</span><span class="params">()</span></span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight livescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">package concurency.chapter9;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.Optional;</div><div class="line"><span class="keyword">import</span> java.util.stream.Stream;</div><div class="line"></div><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">LockTest</span> &#123;</span></div><div class="line">    public static <span class="literal">void</span> main(String[] args) throws InterruptedException &#123;</div><div class="line"></div><div class="line">        final BooleanLock booleanLock = <span class="keyword">new</span> BooleanLock(<span class="literal">false</span>);</div><div class="line">        Stream.<span class="keyword">of</span>(<span class="string">"T1"</span>, <span class="string">"T2"</span>, <span class="string">"T3"</span>, <span class="string">"T4"</span>)</div><div class="line">                .forEach(name<span class="function"> -&gt;</span></div><div class="line">                        <span class="keyword">new</span> Thread<span class="function"><span class="params">(() -&gt; &#123;</span></span></div><div class="line"><span class="function"><span class="params">                            <span class="keyword">try</span> &#123;</span></span></div><div class="line"><span class="function"><span class="params">                                booleanLock.lock(<span class="number">1000</span>L);</span></span></div><div class="line"><span class="function"><span class="params">                                Optional.<span class="keyword">of</span>(Thread.currentThread().getName() + <span class="string">" have the lock Monitor"</span>)</span></span></div><div class="line"><span class="function"><span class="params">                                        .ifPresent(System.out::println);</span></span></div><div class="line"><span class="function"><span class="params">                                work();</span></span></div><div class="line"><span class="function"><span class="params">                            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span></span></div><div class="line"><span class="function"><span class="params">                                e.printStackTrace();</span></span></div><div class="line"><span class="function"><span class="params">                            &#125; <span class="keyword">catch</span> (Lock.TimeOutException e) &#123;</span></span></div><div class="line"><span class="function"><span class="params">                                System.out.println(e.getMessage());</span></span></div><div class="line"><span class="function"><span class="params"><span class="regexp">//                                Optional.of(Thread.currentThread().getName() + " time out")</span></span></span></div><div class="line"><span class="function"><span class="params"><span class="regexp">//</span>                                        .ifPresent(System.out::println);</span></span></div><div class="line"><span class="function"><span class="params">                            &#125; <span class="keyword">finally</span> &#123;</span></span></div><div class="line"><span class="function"><span class="params">                                booleanLock.unlock();</span></span></div><div class="line"><span class="function"><span class="params">                            &#125;</span></span></div><div class="line"><span class="function"><span class="params">                        &#125;, name)</span>.<span class="title">start</span><span class="params">()</span></span></div><div class="line"><span class="function">                );</span></div><div class="line"><span class="function">    &#125;</span></div><div class="line"><span class="function"></span></div><div class="line"><span class="function">    <span class="title">private</span> <span class="title">static</span> <span class="title">void</span> <span class="title">work</span><span class="params">()</span> <span class="title">throws</span> <span class="title">InterruptedException</span> &#123;</span></div><div class="line"><span class="function">        <span class="title">Optional</span>.<span class="title">of</span><span class="params">(Thread.currentThread().getName() + <span class="string">" is Working..."</span>)</span></span></div><div class="line"><span class="function">                .<span class="title">ifPresent</span><span class="params">(System.out::println)</span>;</span></div><div class="line"><span class="function">        <span class="title">Thread</span>.<span class="title">sleep</span><span class="params">(<span class="number">10_000</span>)</span>;</span></div><div class="line"><span class="function">    &#125;</span></div><div class="line"><span class="function">&#125;</span></div></pre></td></tr></table></figure>
<h3 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">T1 have the <span class="keyword">lock</span> Monitor</div><div class="line">T1 <span class="keyword">is</span> Working...</div><div class="line"><span class="keyword">time</span> <span class="keyword">out</span>, <span class="keyword">and</span> the <span class="keyword">Thread</span>[T2] <span class="keyword">do</span> <span class="keyword">not</span> <span class="keyword">get</span> the <span class="keyword">lock</span></div><div class="line"><span class="keyword">time</span> <span class="keyword">out</span>, <span class="keyword">and</span> the <span class="keyword">Thread</span>[T3] <span class="keyword">do</span> <span class="keyword">not</span> <span class="keyword">get</span> the <span class="keyword">lock</span></div><div class="line"><span class="keyword">time</span> <span class="keyword">out</span>, <span class="keyword">and</span> the <span class="keyword">Thread</span>[T4] <span class="keyword">do</span> <span class="keyword">not</span> <span class="keyword">get</span> the <span class="keyword">lock</span></div><div class="line">T1 <span class="keyword">release</span> the lock...</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      synchronized锁对象，类，方法; 死锁案例; 生产者与消费者案例; 数据采集多线程demo; 实现自己的显示锁(具备超时功能)
    
    </summary>
    
    
      <category term="多线程" scheme="http://www.draymonder.site/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>多线程学习 day1</title>
    <link href="http://www.draymonder.site/backend/java/thread/thread-learn-day1/"/>
    <id>http://www.draymonder.site/backend/java/thread/thread-learn-day1/</id>
    <published>2019-02-13T15:59:00.000Z</published>
    <updated>2019-02-14T03:14:50.459Z</updated>
    
    <content type="html"><![CDATA[<h2 id="最基础的东西"><a href="#最基础的东西" class="headerlink" title="最基础的东西"></a>最基础的东西</h2><ol>
<li>Java应用程序的main函数是一个线程，是被JVM启动的时候调用，线程的名字叫main</li>
<li>实现一个线程，必须创建Thread实例，override run方法，并且调用start方法</li>
<li>当你JVM启动后，实际上有多个线程，但是至少有一个非守护线程。</li>
<li>当你调用一个线程start方法的时候，此时至少有两个线程，一个是当前线程，一个是执行run方法的线程</li>
<li>一个好用的命令<code>jconsole</code></li>
<li>线程的生命周期分为new, runable, running, blocked, terminated</li>
</ol>
<p><strong>线程生命周期</strong><br><a href="https://imgchr.com/i/kBlABj" target="_blank" rel="external"><img src="https://s2.ax1x.com/2019/02/14/kBlABj.md.jpg" alt="kBlABj.md.jpg"></a></p>
<ol>
<li>创建线程对象Thread，默认有一个线程名，以<code>Thread-</code>，从0开始计数</li>
</ol>
<p>Thread-0</p>
<p>Thread-1</p>
<p>Thread-2<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> threadInitNumber;</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="function"><span class="keyword">int</span> <span class="title">nextThreadNum</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> threadInitNumber++;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ol>
<li>如果在构造Thread的时候没有传递Runnable的实例或者override run方法，则该线程将不会调用任何东西，如果传递了传递Runnable的实例或者override run方法，则会执行该方法/实例的逻辑单元(或逻辑代码)</li>
<li>如果构造线程对象时，未传入<code>Thread-Group</code>, Thread会默认取父进程的<code>Thread-Group</code>,此时子线程和父线程会在一个<code>Thread-Group</code>里。<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">package concurency.chapter3;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ThreadGroupTest</span> &#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>) </span>&#123;</div><div class="line">        Runnable t1 = ()-&gt;&#123;</div><div class="line">          <span class="keyword">try</span>&#123;</div><div class="line">              Thread.sleep(<span class="number">100</span>);</div><div class="line">          &#125;<span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">              e.printStackTrace();</div><div class="line">          &#125;</div><div class="line">        &#125;;</div><div class="line">        Thread t = <span class="keyword">new</span> Thread(t1);</div><div class="line">        t.start();</div><div class="line">        ThreadGroup <span class="keyword">group</span> = Thread.currentThread().getThreadGroup();</div><div class="line">        <span class="keyword">int</span> sz = <span class="keyword">group</span>.activeCount();</div><div class="line">        Thread []threads = <span class="keyword">new</span> Thread[sz];</div><div class="line">        <span class="keyword">group</span>.enumerate(threads);</div><div class="line">        <span class="keyword">for</span>(Thread tt : threads) &#123;</div><div class="line">            System.<span class="keyword">out</span>.println(tt);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>执行结果<br><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">Thread</span>[main,<span class="number">5</span>,main]</div><div class="line"><span class="keyword">Thread</span>[<span class="keyword">Monitor</span> Ctrl-<span class="keyword">Break</span>,<span class="number">5</span>,main]</div><div class="line"><span class="keyword">Thread</span>[<span class="keyword">Thread</span><span class="number">-0</span>,<span class="number">5</span>,main]</div></pre></td></tr></table></figure></p>
<p>因此可以分析，有main线程，monitor线程(管控线程，用来接收系统的信号 break/terminate 等),子线程(Thread-0)</p>
<ol>
<li>jvm内存共分为: 方法区，Java堆，虚拟机栈，本地方法栈，程序计数器</li>
<li><code>栈帧</code>分别有，局部变量表，操作数栈，动态链接，返回地址等</li>
<li>构造Thread的时候传入stacksize代表着线程占用的<code>stack</code>大小，如果没有指定，默认为0，0表示忽略该参数，该参数会被JNI函数调用。<code>Focus: 该参数在一些平台无效</code></li>
<li><a href="https://www.cnblogs.com/marcotan/p/4256885.html" target="_blank" rel="external">jvm参数设置</a></li>
<li>daemon 守护线程实例<figure class="highlight livescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">package concurency.chapter3;</div><div class="line"></div><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">DaemonTest</span> &#123;</span></div><div class="line"></div><div class="line">    public static <span class="literal">void</span> main(String[] args) &#123;</div><div class="line">        <span class="keyword">new</span> Thread<span class="function"><span class="params">(()-&gt;&#123;</span></span></div><div class="line"><span class="function"><span class="params">            Thread innerThread = <span class="keyword">new</span> Thread(()-&gt;&#123;</span></span></div><div class="line"><span class="function"><span class="params">                <span class="keyword">try</span> &#123;</span></span></div><div class="line"><span class="function"><span class="params">                    <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span></span></div><div class="line"><span class="function"><span class="params">                        System.out.println(<span class="string">"inner do something"</span>);</span></span></div><div class="line"><span class="function"><span class="params">                        Thread.sleep(<span class="number">1_000</span>);</span></span></div><div class="line"><span class="function"><span class="params">                    &#125;</span></span></div><div class="line"><span class="function"><span class="params">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span></span></div><div class="line"><span class="function"><span class="params">                    e.printStackTrace();</span></span></div><div class="line"><span class="function"><span class="params">                &#125;</span></span></div><div class="line"><span class="function"><span class="params">            &#125;);</span></span></div><div class="line"><span class="function"><span class="params">            innerThread.setDaemon(<span class="literal">true</span>);</span></span></div><div class="line"><span class="function"><span class="params">            innerThread.start();</span></span></div><div class="line"><span class="function"><span class="params"></span></span></div><div class="line"><span class="function"><span class="params"></span></span></div><div class="line"><span class="function"><span class="params">            <span class="keyword">try</span> &#123;</span></span></div><div class="line"><span class="function"><span class="params">                Thread.sleep(<span class="number">10_000</span>);</span></span></div><div class="line"><span class="function"><span class="params">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span></span></div><div class="line"><span class="function"><span class="params">                e.printStackTrace();</span></span></div><div class="line"><span class="function"><span class="params">            &#125;</span></span></div><div class="line"><span class="function"><span class="params">            System.out.println(<span class="string">"main thread have done.."</span>);</span></span></div><div class="line"><span class="function"><span class="params">        &#125;)</span>.<span class="title">start</span><span class="params">()</span>;</span></div><div class="line"><span class="function">    &#125;</span></div><div class="line"><span class="function">&#125;</span></div></pre></td></tr></table></figure>
</li>
</ol>
<p>需要注意的一点:<code>守护线程必须在start方法前设置，若在start方法后设置，则会抛出IllegalThreadStateException异常</code></p>
<ol>
<li><p>join方法,比如调用<code>thread.join()</code>,那么，当前线程只有等<code>thread</code>线程执行完才会继续运行。<br>注意：<code>join()必须放在start()之后</code></p>
</li>
<li><p><code>interrupt()</code>方法会终断 <code>sleep()</code>,<code>wait()</code>,<code>join()</code></p>
</li>
<li><strong>强制中断一个线程</strong><br>ThreadService类，用来封装runnable<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> concurency.chapter5;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> ThreadService &#123;</div><div class="line">    <span class="keyword">private</span> Thread executeThread;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> finished = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> execute(Runnable <span class="keyword">task</span>) &#123;</div><div class="line">        executeThread = <span class="keyword">new</span> Thread() &#123;</div><div class="line">            @Override</div><div class="line">            <span class="keyword">public</span> <span class="keyword">void</span> run() &#123;</div><div class="line">                Thread runner = <span class="keyword">new</span> Thread(<span class="keyword">task</span>);</div><div class="line">                <span class="comment">// 设置task线程为守护线程</span></div><div class="line">                runner.setDaemon(<span class="keyword">true</span>);</div><div class="line">                runner.start();</div><div class="line"></div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    <span class="comment">// executeThread等runner结束才继续运行</span></div><div class="line">                    runner.<span class="keyword">join</span>();</div><div class="line">                    finished = <span class="keyword">true</span>;</div><div class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line"><span class="comment">//                    e.printStackTrace();</span></div><div class="line">                    System.out.<span class="keyword">println</span>(<span class="string">"task任务被中断执行"</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">        executeThread.start();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> shutdown(<span class="keyword">long</span> <span class="keyword">times</span>) &#123;</div><div class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</div><div class="line">        <span class="keyword">while</span>(!finished) &#123;</div><div class="line">            <span class="keyword">if</span>((System.currentTimeMillis() - start) &gt;= <span class="keyword">times</span>) &#123;</div><div class="line">                System.out.<span class="keyword">println</span>(<span class="string">"任务已经超时，立即结束"</span>);</div><div class="line">                executeThread.interrupt();</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="comment">// 执行线程休眠1s</span></div><div class="line">                executeThread.sleep(<span class="number">1</span>);</div><div class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line"><span class="comment">//                e.printStackTrace();</span></div><div class="line">                System.out.<span class="keyword">println</span>(<span class="string">"执行线程被打断"</span>);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        finished = <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>ThreadCloseForce类，测试上述ThreadService是否成功<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">package concurency.chapter5;</div><div class="line"></div><div class="line"><span class="keyword">public</span> class ThreadCloseForce &#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) &#123;</div><div class="line">        ThreadService service = <span class="keyword">new</span> ThreadService();</div><div class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</div><div class="line"></div><div class="line">        <span class="comment">// ()-&gt;&#123;&#125; 代表实现了runnable接口的内部类</span></div><div class="line">        service.execute(()-&gt;&#123;</div><div class="line">            <span class="comment">// load a very resource</span></div><div class="line"><span class="comment">//            while(true) &#123;</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//            &#125;</span></div><div class="line">            <span class="comment">// 这个意思就是线程本身执行只需要 500ms</span></div><div class="line">            <span class="built_in">try</span> &#123;</div><div class="line">                Thread.sleep(<span class="number">500</span>);</div><div class="line">            &#125; <span class="built_in">catch</span> (InterruptedException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        service.<span class="built_in">shutdown</span>(<span class="number">1000</span>);</div><div class="line">        <span class="keyword">long</span> <span class="built_in">end</span> = System.currentTimeMillis();</div><div class="line">        System.out.<span class="built_in">println</span>(<span class="built_in">end</span> - start);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      线程如何创建，构造函数，join(), daemon(守护线程)，以及实现一个可以interrupt的多线程案例
    
    </summary>
    
    
      <category term="多线程" scheme="http://www.draymonder.site/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>排序算法总结</title>
    <link href="http://www.draymonder.site/algorithm/sort-about/"/>
    <id>http://www.draymonder.site/algorithm/sort-about/</id>
    <published>2019-02-11T09:00:00.000Z</published>
    <updated>2019-02-11T04:25:04.850Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-冒泡排序"><a href="#1-冒泡排序" class="headerlink" title="1. 冒泡排序"></a>1. 冒泡排序</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 朴素冒泡</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">bubble_sort_1</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">    <span class="comment">// 总共需要排序 n-1轮</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n<span class="number">-1</span>; i&gt;=<span class="number">1</span>; i--) &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;i; j++) &#123;</div><div class="line">            <span class="keyword">if</span>(s[j] &gt; s[j+<span class="number">1</span>])</div><div class="line">                swap(s[j], s[j+<span class="number">1</span>]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 带优化的冒泡</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">bubble_sort_2</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n<span class="number">-1</span>; i&gt;=<span class="number">1</span>; i--) &#123;</div><div class="line">        <span class="comment">// 标记是否有序</span></div><div class="line">        <span class="keyword">bool</span> f = <span class="literal">false</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;i; j++) &#123;</div><div class="line">            <span class="keyword">if</span>(s[j] &gt; s[j+<span class="number">1</span>])</div><div class="line">                swap(s[j], s[j+<span class="number">1</span>]), f=<span class="literal">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 说明没有发生交换</span></div><div class="line">        <span class="keyword">if</span>(!f) <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="2-快速排序"><a href="#2-快速排序" class="headerlink" title="2. 快速排序"></a>2. 快速排序</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> quick_sort(<span class="built_in">int</span> l, <span class="built_in">int</span> r) &#123;</div><div class="line">    <span class="keyword">if</span>(l &gt;= r)</div><div class="line">        <span class="keyword">return</span> ;</div><div class="line">    <span class="built_in">int</span> i=l, j=r;</div><div class="line">    <span class="built_in">int</span> <span class="built_in">num</span> = s[l];</div><div class="line">    <span class="keyword">while</span>(i &lt; j) &#123;</div><div class="line">        <span class="comment">// 从右面找比num小的</span></div><div class="line">        <span class="keyword">while</span>(i &lt; j &amp;&amp; s[j] &gt; <span class="built_in">num</span>) j--;</div><div class="line">        <span class="comment">// 从左面找比num大的</span></div><div class="line">        <span class="keyword">while</span>(i &lt; j &amp;&amp; s[i] &lt; <span class="built_in">num</span>) i++;</div><div class="line">        <span class="comment">// 交换</span></div><div class="line">        <span class="keyword">if</span>(i &lt; j)</div><div class="line">            swap(s[i], s[j]);</div><div class="line">    &#125;</div><div class="line">    quick_sort(l, j<span class="number">-1</span>);</div><div class="line">    quick_sort(j+<span class="number">1</span>, r);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="3-插入排序"><a href="#3-插入排序" class="headerlink" title="3. 插入排序"></a>3. 插入排序</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert_sort</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">    <span class="comment">// s[0]已经排序排好了</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n<span class="number">-1</span>; i++) &#123;</div><div class="line">        <span class="keyword">int</span> j = i<span class="number">-1</span>;</div><div class="line">        <span class="comment">// j+1 即为要插的位置</span></div><div class="line">        <span class="keyword">while</span>(j &gt;= <span class="number">0</span> &amp;&amp; s[j] &gt; s[i])</div><div class="line">            j--;</div><div class="line">        <span class="keyword">int</span> tmp = s[i];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k=i<span class="number">-1</span>; k&gt;=j+<span class="number">1</span>; k--)</div><div class="line">            s[k+<span class="number">1</span>] = s[k];</div><div class="line">        s[j+<span class="number">1</span>] = tmp;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 代码优化版本</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert_sort</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">    <span class="comment">// s[0]已经排序排好了</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n<span class="number">-1</span>; i++) &#123;</div><div class="line">        <span class="keyword">int</span> j = i<span class="number">-1</span>;</div><div class="line">        <span class="comment">// j+1 即为要插的位置</span></div><div class="line">        <span class="keyword">int</span> tmp = s[i];</div><div class="line">        <span class="keyword">while</span>(j &gt;= <span class="number">0</span> &amp;&amp; s[j] &gt; tmp) &#123;</div><div class="line">            s[j+<span class="number">1</span>] = s[j];</div><div class="line">            j--;</div><div class="line">        &#125;</div><div class="line">        s[j+<span class="number">1</span>] = tmp;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="4-希尔排序"><a href="#4-希尔排序" class="headerlink" title="4. 希尔排序"></a>4. 希尔排序</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">shell_sort</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> gap = (n&gt;&gt;<span class="number">1</span>); gap; gap&gt;&gt;=<span class="number">1</span>) &#123;</div><div class="line">        <span class="comment">// 共分gap个组</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;gap; i++) &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i+gap; j&lt;n; j+=gap) &#123;</div><div class="line">                <span class="keyword">int</span> k = j - gap;</div><div class="line">                <span class="keyword">int</span> tmp = s[j];</div><div class="line">                <span class="keyword">while</span>(k &gt;= i &amp;&amp; s[k] &gt; tmp) &#123;</div><div class="line">                    s[k+gap] = s[k];</div><div class="line">                    k-=gap;</div><div class="line">                &#125;</div><div class="line">                s[k+gap] = tmp;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="5-选择排序"><a href="#5-选择排序" class="headerlink" title="5. 选择排序"></a>5. 选择排序</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">select_sort</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">    <span class="comment">// 共n-1轮次</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++) &#123;</div><div class="line">        <span class="keyword">int</span> mn_pos = i;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>; j&lt;n; j++) &#123;</div><div class="line">            <span class="keyword">if</span>(s[j] &lt; s[mn_pos]) &#123;</div><div class="line">                mn_pos = j;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(i != mn_pos)</div><div class="line">            swap(s[mn_pos], s[i]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="6-堆排序"><a href="#6-堆排序" class="headerlink" title="6. 堆排序"></a>6. 堆排序</h2><p>这里比较trick的点就是,就是比如小根堆，根节点是最小的，因此呢，在排序的时候，s[0]和s[n]交换一下，排序结果就是从大到小的。<br>想要从小到大的排序结果，需要用大根堆。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 对堆从st调整， 数组元素为n</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">heap_down</span><span class="params">(<span class="keyword">int</span> st, <span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> c = st;</div><div class="line">    <span class="comment">// 有左儿子</span></div><div class="line">    <span class="keyword">while</span>(<span class="number">2</span>*c+<span class="number">1</span> &lt;= n) &#123;</div><div class="line">        <span class="keyword">int</span> l = <span class="number">2</span>*c+<span class="number">1</span>;</div><div class="line">        <span class="keyword">int</span> mn = c;</div><div class="line">        <span class="keyword">if</span>(s[mn] &gt; s[l])</div><div class="line">            mn = l;</div><div class="line">        <span class="keyword">if</span>(l+<span class="number">1</span> &lt;= n &amp;&amp; s[mn] &gt; s[l+<span class="number">1</span>])</div><div class="line">            mn = l+<span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span>(mn == c)</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        swap(s[c], s[mn]);</div><div class="line">        c = mn;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">heap_sort</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n/<span class="number">2</span>; i&gt;=<span class="number">0</span>; i--)</div><div class="line">        heap_down(i,n);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n; i&gt;<span class="number">0</span>; i--) &#123;</div><div class="line">        swap(s[i], s[<span class="number">0</span>]);</div><div class="line">        heap_down(<span class="number">0</span>, i<span class="number">-1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="7-归并排序"><a href="#7-归并排序" class="headerlink" title="7. 归并排序"></a>7. 归并排序</h2><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">void merge_sort(<span class="built_in">int</span> l,<span class="built_in">int</span> r) &#123;</div><div class="line">    <span class="keyword">if</span>(l &gt;= r)</div><div class="line">        return ;</div><div class="line">    <span class="built_in">int</span> <span class="built_in">mid</span> = (l+r)/<span class="number">2</span>;</div><div class="line">    merge_sort(l, <span class="built_in">mid</span>);</div><div class="line">    merge_sort(<span class="built_in">mid</span>+<span class="number">1</span>, r);</div><div class="line">    <span class="built_in">int</span> l1=l, l2=<span class="built_in">mid</span>+<span class="number">1</span>;</div><div class="line">    <span class="built_in">int</span> k = l;</div><div class="line">    <span class="keyword">while</span>(l1 &lt;= <span class="built_in">mid</span> &amp;&amp; l2 &lt;= r) &#123;</div><div class="line">        <span class="keyword">if</span>(s[l1] &gt; s[l2])</div><div class="line">            t[k++] = s[l2++];</div><div class="line">        <span class="keyword">else</span></div><div class="line">            t[k++] = s[l1++];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">while</span>(l1 &lt;= <span class="built_in">mid</span>)</div><div class="line">        t[k++] = s[l1++];</div><div class="line">    <span class="keyword">while</span>(l2 &lt;= r)</div><div class="line">        t[k++] = s[l2++];</div><div class="line">    <span class="keyword">for</span>(<span class="built_in">int</span> i=l; i&lt;=r; i++)</div><div class="line">        s[i] = t[i];</div><div class="line">    return ;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="8-分桶排序"><a href="#8-分桶排序" class="headerlink" title="8. 分桶排序"></a>8. 分桶排序</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">bubble_sort</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++) &#123;</div><div class="line">        t[s[i]]++;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> k = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;N; i++) &#123;</div><div class="line">        <span class="keyword">while</span>(t[i]) &#123;</div><div class="line">            s[k++] = i;</div><div class="line">            t[i]--;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="9-基数排序"><a href="#9-基数排序" class="headerlink" title="9. 基数排序"></a>9. 基数排序</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_max</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> mx = INT_MIN;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++) &#123;</div><div class="line">        mx = max(mx, s[i]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> mx;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 对数组按照"某个位数"进行排序(桶排序)</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">count_sort</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> <span class="built_in">exp</span>)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> output[n+<span class="number">5</span>];</div><div class="line">    <span class="keyword">int</span> bucket[<span class="number">10</span>]=&#123;<span class="number">0</span>&#125;;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)</div><div class="line">        bucket[ (s[i]/<span class="built_in">exp</span>)%<span class="number">10</span>] ++;</div><div class="line">    <span class="comment">// bucket[i] 现在存.. 当前位数为i的最后一个位置</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;<span class="number">10</span>; i++)</div><div class="line">        bucket[i] += bucket[i<span class="number">-1</span>];</div><div class="line">    <span class="comment">// 从后面开始排是因为，每个在后面的数， 总有比他小的，所以在后面的先排</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n<span class="number">-1</span>; i&gt;=<span class="number">0</span>; i--) &#123;</div><div class="line">        output[bucket[(s[i]/<span class="built_in">exp</span>)%<span class="number">10</span>]<span class="number">-1</span>] = s[i];</div><div class="line">        bucket[(s[i]/<span class="built_in">exp</span>)%<span class="number">10</span>]--;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)</div><div class="line">        s[i] = output[i];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">radix_sort</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> mx = get_max(n);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> <span class="built_in">exp</span>=<span class="number">1</span>; mx /<span class="built_in">exp</span> &gt; <span class="number">0</span>; <span class="built_in">exp</span> *= <span class="number">10</span>) &#123;</div><div class="line">        count_sort(n,<span class="built_in">exp</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="http://www.cnblogs.com/skywang12345/p/3603935.html" target="_blank" rel="external">数据结构解析</a></p>
]]></content>
    
    <summary type="html">
    
      9个排序算法的总结
    
    </summary>
    
    
      <category term="Algorithm" scheme="http://www.draymonder.site/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络复习重点</title>
    <link href="http://www.draymonder.site/network/net-important/"/>
    <id>http://www.draymonder.site/network/net-important/</id>
    <published>2019-02-08T15:00:00.000Z</published>
    <updated>2019-02-08T14:36:36.468Z</updated>
    
    <content type="html"><![CDATA[<!-- MarkdownTOC -->
<ul>
<li><a href="#一 OSI与TCP/IP各层的结构与功能,都有哪些协议">一 OSI与TCP/IP各层的结构与功能,都有哪些协议</a><ul>
<li><a href="#五层协议的体系结构">五层协议的体系结构</a></li>
<li><a href="#1-应用层">1 应用层</a><ul>
<li><a href="#域名系统">域名系统</a></li>
<li><a href="#http协议">HTTP协议</a></li>
</ul>
</li>
<li><a href="#2-运输层">2 运输层</a><ul>
<li><a href="#运输层主要使用以下两种协议">运输层主要使用以下两种协议</a></li>
<li><a href="#udp-的主要特点">UDP 的主要特点</a></li>
<li><a href="#tcp-的主要特点">TCP 的主要特点</a></li>
</ul>
</li>
<li><a href="#3-网络层">3 网络层</a></li>
<li><a href="#4-数据链路层">4 数据链路层</a></li>
<li><a href="#5-物理层">5 物理层</a></li>
<li><a href="#总结一下">总结一下</a></li>
</ul>
</li>
<li><a href="#二-tcp-三次握手和四次挥手面试常客">二 TCP 三次握手和四次挥手(面试常客)</a><ul>
<li><a href="#为什么要三次握手">为什么要三次握手</a></li>
<li><a href="#为什么要传回-syn">为什么要传回 SYN</a></li>
<li><a href="#传了-syn为啥还要传-ack">传了 SYN,为啥还要传 ACK</a></li>
<li><a href="#为什么要四次挥手">为什么要四次挥手</a></li>
</ul>
</li>
<li><a href="#三-tcp、udp-协议的区别">三 TCP、UDP 协议的区别</a></li>
<li><a href="#四-tcp-协议如何保证可靠传输">四 TCP 协议如何保证可靠传输</a><ul>
<li><a href="#停止等待协议">停止等待协议</a></li>
<li><a href="#自动重传请求-arq-协议">自动重传请求 ARQ 协议</a></li>
<li><a href="#连续arq协议">连续ARQ协议</a></li>
<li><a href="#滑动窗口">滑动窗口</a></li>
<li><a href="#流量控制">流量控制</a></li>
<li><a href="#拥塞控制">拥塞控制</a></li>
</ul>
</li>
<li><a href="#五-在浏览器中输入url地址---显示主页的过程（面试常客）">五  在浏览器中输入url地址 -&gt;&gt; 显示主页的过程（面试常客）</a></li>
<li><a href="#六-状态码">六 状态码</a></li>
<li><a href="#七-各种协议与http协议之间的关系">七 各种协议与HTTP协议之间的关系</a></li>
<li><a href="#八-http长连接、短连接">八  HTTP长连接、短连接</a></li>
<li><a href="#写在最后">写在最后</a><ul>
<li><a href="#计算机网络常见问题回顾">计算机网络常见问题回顾</a></li>
<li><a href="#建议">建议</a></li>
</ul>
</li>
</ul>
<!-- /MarkdownTOC -->
<p>相对与上一个版本的计算机网路面试知识总结，这个版本增加了 “TCP协议如何保证可靠传输”包括超时重传、停止等待协议、滑动窗口、流量控制、拥塞控制等内容并且对一些已有内容做了补充。</p>
<h2 id="一-OSI与TCP-IP各层的结构与功能-都有哪些协议"><a href="#一-OSI与TCP-IP各层的结构与功能-都有哪些协议" class="headerlink" title="一 OSI与TCP/IP各层的结构与功能,都有哪些协议"></a>一 OSI与TCP/IP各层的结构与功能,都有哪些协议</h2><h3 id="五层协议的体系结构"><a href="#五层协议的体系结构" class="headerlink" title="五层协议的体系结构"></a>五层协议的体系结构</h3><p>学习计算机网络时我们一般采用折中的办法，也就是中和 OSI 和 TCP/IP 的优点，采用一种只有五层协议的体系结构，这样既简洁又能将概念阐述清楚。</p>
<p><img src="https://user-gold-cdn.xitu.io/2018/7/29/164e5307471e8eba?w=633&amp;h=344&amp;f=png&amp;s=164623" alt="五层协议的体系结构"></p>
<p>结合互联网的情况，自上而下地，非常简要的介绍一下各层的作用。</p>
<h3 id="1-应用层"><a href="#1-应用层" class="headerlink" title="1 应用层"></a>1 应用层</h3><p><strong>应用层(application-layer）的任务是通过应用进程间的交互来完成特定网络应用。</strong>应用层协议定义的是应用进程（进程：主机中正在运行的程序）间的通信和交互的规则。对于不同的网络应用需要不同的应用层协议。在互联网中应用层协议很多，如<strong>域名系统DNS</strong>，支持万维网应用的 <strong>HTTP协议</strong>，支持电子邮件的 <strong>SMTP协议</strong>等等。我们把应用层交互的数据单元称为报文。</p>
<h4 id="域名系统"><a href="#域名系统" class="headerlink" title="域名系统"></a>域名系统</h4><blockquote>
<p>域名系统(Domain Name System缩写 DNS，Domain Name被译为域名)是因特网的一项核心服务，它作为可以将域名和IP地址相互映射的一个分布式数据库，能够使人更方便的访问互联网，而不用去记住能够被机器直接读取的IP数串。（百度百科）例如：一个公司的 Web 网站可看作是它在网上的门户，而域名就相当于其门牌地址，通常域名都使用该公司的名称或简称。例如上面提到的微软公司的域名，类似的还有：IBM 公司的域名是 www.ibm.com、Oracle 公司的域名是 www.oracle.com、Cisco公司的域名是 www.cisco.com 等。</p>
</blockquote>
<h4 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h4><blockquote>
<p>超文本传输协议（HTTP，HyperText Transfer Protocol)是互联网上应用最为广泛的一种网络协议。所有的 WWW（万维网） 文件都必须遵守这个标准。设计 HTTP 最初的目的是为了提供一种发布和接收 HTML 页面的方法。（百度百科）</p>
</blockquote>
<h3 id="2-运输层"><a href="#2-运输层" class="headerlink" title="2 运输层"></a>2 运输层</h3><p><strong>运输层(transport layer)的主要任务就是负责向两台主机进程之间的通信提供通用的数据传输服务</strong>。应用进程利用该服务传送应用层报文。“通用的”是指并不针对某一个特定的网络应用，而是多种应用可以使用同一个运输层服务。由于一台主机可同时运行多个线程，因此运输层有复用和分用的功能。所谓复用就是指多个应用层进程可同时使用下面运输层的服务，分用和复用相反，是运输层把收到的信息分别交付上面应用层中的相应进程。</p>
<h4 id="运输层主要使用以下两种协议"><a href="#运输层主要使用以下两种协议" class="headerlink" title="运输层主要使用以下两种协议"></a>运输层主要使用以下两种协议</h4><ol>
<li><strong>传输控制协议 TCP</strong>（Transmisson Control Protocol）–提供<strong>面向连接</strong>的，<strong>可靠的</strong>数据传输服务。</li>
<li><strong>用户数据协议 UDP</strong>（User Datagram Protocol）–提供<strong>无连接</strong>的，尽最大努力的数据传输服务（<strong>不保证数据传输的可靠性</strong>）。</li>
</ol>
<h4 id="UDP-的主要特点"><a href="#UDP-的主要特点" class="headerlink" title="UDP 的主要特点"></a>UDP 的主要特点</h4><ol>
<li>UDP 是无连接的；</li>
<li>UDP 使用尽最大努力交付，即不保证可靠交付，因此主机不需要维持复杂的链接状态（这里面有许多参数）；</li>
<li>UDP 是面向报文的；</li>
<li>UDP 没有拥塞控制，因此网络出现拥塞不会使源主机的发送速率降低（对实时应用很有用，如 直播，实时视频会议等）；</li>
<li>UDP 支持一对一、一对多、多对一和多对多的交互通信；</li>
<li>UDP 的首部开销小，只有8个字节，比TCP的20个字节的首部要短。</li>
</ol>
<h4 id="TCP-的主要特点"><a href="#TCP-的主要特点" class="headerlink" title="TCP 的主要特点"></a>TCP 的主要特点</h4><ol>
<li>TCP 是面向连接的。（就好像打电话一样，通话前需要先拨号建立连接，通话结束后要挂机释放连接）；</li>
<li>每一条 TCP 连接只能有两个端点，每一条TCP连接只能是点对点的（一对一）；</li>
<li>TCP 提供可靠交付的服务。通过TCP连接传送的数据，无差错、不丢失、不重复、并且按序到达；</li>
<li>TCP 提供全双工通信。TCP 允许通信双方的应用进程在任何时候都能发送数据。TCP 连接的两端都设有发送缓存和接收缓存，用来临时存放双方通信的数据；</li>
<li>面向字节流。TCP 中的“流”（Stream）指的是流入进程或从进程流出的字节序列。“面向字节流”的含义是：虽然应用程序和 TCP 的交互是一次一个数据块（大小不等），但 TCP 把应用程序交下来的数据仅仅看成是一连串的无结构的字节流。</li>
</ol>
<h3 id="3-网络层"><a href="#3-网络层" class="headerlink" title="3 网络层"></a>3 网络层</h3><p><strong>在 计算机网络中进行通信的两个计算机之间可能会经过很多个数据链路，也可能还要经过很多通信子网。网络层的任务就是选择合适的网间路由和交换结点， 确保数据及时传送。</strong> 在发送数据时，网络层把运输层产生的报文段或用户数据报封装成分组和包进行传送。在 TCP/IP 体系结构中，由于网络层使用 <strong>IP 协议</strong>，因此分组也叫 <strong>IP 数据报</strong> ，简称 <strong>数据报</strong>。</p>
<p>这里要注意：<strong>不要把运输层的“用户数据报 UDP ”和网络层的“ IP 数据报”弄混</strong>。另外，无论是哪一层的数据单元，都可笼统地用“分组”来表示。</p>
<p>这里强调指出，网络层中的“网络”二字已经不是我们通常谈到的具体网络，而是指计算机网络体系结构模型中第三层的名称.</p>
<p>互联网是由大量的异构（heterogeneous）网络通过路由器（router）相互连接起来的。互联网使用的网络层协议是无连接的网际协议（Intert Prococol）和许多路由选择协议，因此互联网的网络层也叫做<strong>网际层</strong>或<strong>IP层</strong>。</p>
<h3 id="4-数据链路层"><a href="#4-数据链路层" class="headerlink" title="4 数据链路层"></a>4 数据链路层</h3><p><strong>数据链路层(data link layer)通常简称为链路层。两台主机之间的数据传输，总是在一段一段的链路上传送的，这就需要使用专门的链路层的协议。</strong> 在两个相邻节点之间传送数据时，<strong>数据链路层将网络层交下来的 IP 数据报组装程帧</strong>，在两个相邻节点间的链路上传送帧。每一帧包括数据和必要的控制信息（如同步信息，地址信息，差错控制等）。</p>
<p>在接收数据时，控制信息使接收端能够知道一个帧从哪个比特开始和到哪个比特结束。这样，数据链路层在收到一个帧后，就可从中提出数据部分，上交给网络层。<br>控制信息还使接收端能够检测到所收到的帧中有误差错。如果发现差错，数据链路层就简单地丢弃这个出了差错的帧，以避免继续在网络中传送下去白白浪费网络资源。如果需要改正数据在链路层传输时出现差错（这就是说，数据链路层不仅要检错，而且还要纠错），那么就要采用可靠性传输协议来纠正出现的差错。这种方法会使链路层的协议复杂些。</p>
<h3 id="5-物理层"><a href="#5-物理层" class="headerlink" title="5 物理层"></a>5 物理层</h3><p>在物理层上所传送的数据单位是比特。<br> <strong>物理层(physical layer)的作用是实现相邻计算机节点之间比特流的透明传送，尽可能屏蔽掉具体传输介质和物理设备的差异。</strong> 使其上面的数据链路层不必考虑网络的具体传输介质是什么。“透明传送比特流”表示经实际电路传送后的比特流没有发生变化，对传送的比特流来说，这个电路好像是看不见的。</p>
<p>在互联网使用的各种协中最重要和最著名的就是 TCP/IP 两个协议。现在人们经常提到的TCP/IP并不一定单指TCP和IP这两个具体的协议，而往往表示互联网所使用的整个TCP/IP协议族。</p>
<h3 id="总结一下"><a href="#总结一下" class="headerlink" title="总结一下"></a>总结一下</h3><p>上面我们对计算机网络的五层体系结构有了初步的了解，下面附送一张七层体系结构图总结一下。图片来源：<a href="https://blog.csdn.net/yaopeng_2005/article/details/7064869" target="_blank" rel="external">https://blog.csdn.net/yaopeng_2005/article/details/7064869</a><br><img src="https://user-gold-cdn.xitu.io/2018/7/29/164e529309f0fa33?w=1120&amp;h=1587&amp;f=gif&amp;s=225325" alt="七层体系结构图"></p>
<h2 id="二-TCP-三次握手和四次挥手-面试常客"><a href="#二-TCP-三次握手和四次挥手-面试常客" class="headerlink" title="二 TCP 三次握手和四次挥手(面试常客)"></a>二 TCP 三次握手和四次挥手(面试常客)</h2><p>为了准确无误地把数据送达目标处，TCP协议采用了三次握手策略。</p>
<p><strong>漫画图解：</strong></p>
<p>图片来源：《图解HTTP》<br><img src="https://user-gold-cdn.xitu.io/2018/5/8/1633e127396541f1?w=864&amp;h=439&amp;f=png&amp;s=226095" alt="TCP三次握手"></p>
<p><strong>简单示意图：</strong><br><img src="https://user-gold-cdn.xitu.io/2018/5/8/1633e14233d95972?w=542&amp;h=427&amp;f=jpeg&amp;s=15088" alt="TCP三次握手"></p>
<ul>
<li>客户端–发送带有 SYN 标志的数据包–一次握手–服务端</li>
<li>服务端–发送带有 SYN/ACK 标志的数据包–二次握手–客户端</li>
<li>客户端–发送带有带有 ACK 标志的数据包–三次握手–服务端</li>
</ul>
<h3 id="为什么要三次握手"><a href="#为什么要三次握手" class="headerlink" title="为什么要三次握手"></a>为什么要三次握手</h3><p><strong>三次握手的目的是建立可靠的通信信道，说到通讯，简单来说就是数据的发送与接收，而三次握手最主要的目的就是双方确认自己与对方的发送与接收是正常的。</strong></p>
<p>第一次握手：Client 什么都不能确认；Server 确认了对方发送正常</p>
<p>第二次握手：Client 确认了：自己发送、接收正常，对方发送、接收正常；Server 确认了：自己接收正常，对方发送正常</p>
<p>第三次握手：Client 确认了：自己发送、接收正常，对方发送、接收正常；Server 确认了：自己发送、接收正常，对方发送接收正常</p>
<p>所以三次握手就能确认双发收发功能都正常，缺一不可。</p>
<h3 id="为什么要传回-SYN"><a href="#为什么要传回-SYN" class="headerlink" title="为什么要传回 SYN"></a>为什么要传回 SYN</h3><p>接收端传回发送端所发送的 SYN 是为了告诉发送端，我接收到的信息确实就是你所发送的信号了。</p>
<blockquote>
<p>SYN 是 TCP/IP 建立连接时使用的握手信号。在客户机和服务器之间建立正常的 TCP 网络连接时，客户机首先发出一个 SYN 消息，服务器使用 SYN-ACK 应答表示接收到了这个消息，最后客户机再以 ACK(Acknowledgement[汉译：确认字符 ,在数据通信传输中，接收站发给发送站的一种传输控制字符。它表示确认发来的数据已经接受无误。 ]）消息响应。这样在客户机和服务器之间才能建立起可靠的TCP连接，数据才可以在客户机和服务器之间传递。</p>
</blockquote>
<h3 id="传了-SYN-为啥还要传-ACK"><a href="#传了-SYN-为啥还要传-ACK" class="headerlink" title="传了 SYN,为啥还要传 ACK"></a>传了 SYN,为啥还要传 ACK</h3><p>双方通信无误必须是两者互相发送信息都无误。传了 SYN，证明发送方到接收方的通道没有问题，但是接收方到发送方的通道还需要 ACK 信号来进行验证。</p>
<p><img src="https://user-gold-cdn.xitu.io/2018/5/8/1633e1676e2ac0a3?w=500&amp;h=340&amp;f=jpeg&amp;s=13406" alt="TCP四次挥手"></p>
<p>断开一个 TCP 连接则需要“四次挥手”：</p>
<ul>
<li>客户端-发送一个 FIN，用来关闭客户端到服务器的数据传送</li>
<li>服务器-收到这个 FIN，它发回一 个 ACK，确认序号为收到的序号加1 。和 SYN 一样，一个 FIN 将占用一个序号</li>
<li>服务器-关闭与客户端的连接，发送一个FIN给客户端</li>
<li>客户端-发回 ACK 报文确认，并将确认序号设置为收到序号加1</li>
</ul>
<h3 id="为什么要四次挥手"><a href="#为什么要四次挥手" class="headerlink" title="为什么要四次挥手"></a>为什么要四次挥手</h3><p>任何一方都可以在数据传送结束后发出连接释放的通知，待对方确认后进入半关闭状态。当另一方也没有数据再发送的时候，则发出连接释放通知，对方确认后就完全关闭了TCP连接。</p>
<p>举个例子：A 和 B 打电话，通话即将结束后，A 说“我没啥要说的了”，B回答“我知道了”，但是 B 可能还会有要说的话，A 不能要求 B 跟着自己的节奏结束通话，于是 B 可能又巴拉巴拉说了一通，最后 B 说“我说完了”，A 回答“知道了”，这样通话才算结束。</p>
<p>上面讲的比较概括，推荐一篇讲的比较细致的文章：<a href="https://blog.csdn.net/qzcsu/article/details/72861891" target="_blank" rel="external">https://blog.csdn.net/qzcsu/article/details/72861891</a></p>
<h2 id="三-TCP、UDP-协议的区别"><a href="#三-TCP、UDP-协议的区别" class="headerlink" title="三 TCP、UDP 协议的区别"></a>三 TCP、UDP 协议的区别</h2><p><img src="https://user-gold-cdn.xitu.io/2018/4/19/162db5e97e9a9e01?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="TCP、UDP协议的区别"></p>
<p>UDP 在传送数据之前不需要先建立连接，远地主机在收到 UDP 报文后，不需要给出任何确认。虽然 UDP 不提供可靠交付，但在某些情况下 UDP 确是一种最有效的工作方式（一般用于即时通信），比如： QQ 语音、 QQ 视频 、直播等等</p>
<p>TCP 提供面向连接的服务。在传送数据之前必须先建立连接，数据传送结束后要释放连接。 TCP 不提供广播或多播服务。由于 TCP 要提供可靠的，面向连接的运输服务（TCP的可靠体现在TCP在传递数据之前，会有三次握手来建立连接，而且在数据传递时，有确认、窗口、重传、拥塞控制机制，在数据传完后，还会断开连接用来节约系统资源），这一难以避免增加了许多开销，如确认，流量控制，计时器以及连接管理等。这不仅使协议数据单元的首部增大很多，还要占用许多处理机资源。TCP 一般用于文件传输、发送和接收邮件、远程登录等场景。</p>
<h2 id="四-TCP-协议如何保证可靠传输"><a href="#四-TCP-协议如何保证可靠传输" class="headerlink" title="四 TCP 协议如何保证可靠传输"></a>四 TCP 协议如何保证可靠传输</h2><ol>
<li>应用数据被分割成 TCP 认为最适合发送的数据块。 </li>
<li>TCP 给发送的每一个包进行编号，接收方对数据包进行排序，把有序数据传送给应用层。 </li>
<li><strong>校验和：</strong> TCP 将保持它首部和数据的检验和。这是一个端到端的检验和，目的是检测数据在传输过程中的任何变化。如果收到段的检验和有差错，TCP 将丢弃这个报文段和不确认收到此报文段。 </li>
<li>TCP 的接收端会丢弃重复的数据。 </li>
<li><strong>流量控制：</strong> TCP 连接的每一方都有固定大小的缓冲空间，TCP的接收端只允许发送端发送接收端缓冲区能接纳的数据。当接收方来不及处理发送方的数据，能提示发送方降低发送的速率，防止包丢失。TCP 使用的流量控制协议是可变大小的滑动窗口协议。 （TCP 利用滑动窗口实现流量控制）</li>
<li><strong>拥塞控制：</strong> 当网络拥塞时，减少数据的发送。</li>
<li><strong>停止等待协议</strong> 也是为了实现可靠传输的，它的基本原理就是每发完一个分组就停止发送，等待对方确认。在收到确认后再发下一个分组。 <strong>超时重传：</strong> 当 TCP 发出一个段后，它启动一个定时器，等待目的端确认收到这个报文段。如果不能及时收到一个确认，将重发这个报文段。 </li>
</ol>
<h3 id="停止等待协议"><a href="#停止等待协议" class="headerlink" title="停止等待协议"></a>停止等待协议</h3><ul>
<li>停止等待协议是为了实现可靠传输的，它的基本原理就是每发完一个分组就停止发送，等待对方确认。在收到确认后再发下一个分组；</li>
<li>在停止等待协议中，若接收方收到重复分组，就丢弃该分组，但同时还要发送确认；</li>
</ul>
<p><strong>1) 无差错情况:</strong></p>
<p><img src="https://user-gold-cdn.xitu.io/2018/8/16/16541fa8c3816a90?w=514&amp;h=473&amp;f=png&amp;s=9924" alt=""></p>
<p>发送方发送分组,接收方在规定时间内收到,并且回复确认.发送方再次发送。</p>
<p><strong>2) 出现差错情况（超时重传）:</strong><br><img src="https://user-gold-cdn.xitu.io/2018/8/16/16541faefdf249ab?w=953&amp;h=480&amp;f=png&amp;s=19163" alt=""><br>停止等待协议中超时重传是指只要超过一段时间仍然没有收到确认，就重传前面发送过的分组（认为刚才发送过的分组丢失了）。因此每发送完一个分组需要设置一个超时计时器，其重转时间应比数据在分组传输的平均往返时间更长一些。这种自动重传方式常称为 <strong>自动重传请求 ARQ</strong> 。另外在停止等待协议中若收到重复分组，就丢弃该分组，但同时还要发送确认。<strong>连续 ARQ 协议</strong> 可提高信道利用率。发送维持一个发送窗口，凡位于发送窗口内的分组可连续发送出去，而不需要等待对方确认。接收方一般采用累积确认，对按序到达的最后一个分组发送确认，表明到这个分组位置的所有分组都已经正确收到了。</p>
<p><strong>3) 确认丢失和确认迟到</strong></p>
<ul>
<li><p><strong>确认丢失</strong>：确认消息在传输过程丢失<br><img src="https://user-gold-cdn.xitu.io/2018/8/16/16541fb6941a7165?w=918&amp;h=461&amp;f=png&amp;s=19841" alt=""><br> 当A发送M1消息，B收到后，B向A发送了一个M1确认消息，但却在传输过程中丢失。而A并不知道，在超时计时过后，A重传M1消息，B再次收到该消息后采取以下两点措施：</p>
<ol>
<li>丢弃这个重复的M1消息，不向上层交付。</li>
<li>向A发送确认消息。（不会认为已经发送过了，就不再发送。A能重传，就证明B的确认消息丢失）。</li>
</ol>
</li>
<li><strong>确认迟到</strong> ：确认消息在传输过程中迟到<br><img src="https://user-gold-cdn.xitu.io/2018/8/16/16541fdd85929e6b?w=899&amp;h=450&amp;f=png&amp;s=23165" alt=""><br>A发送M1消息，B收到并发送确认。在超时时间内没有收到确认消息，A重传M1消息，B仍然收到并继续发送确认消息（B收到了2份M1）。此时A收到了B第二次发送的确认消息。接着发送其他数据。过了一会，A收到了B第一次发送的对M1的确认消息（A也收到了2份确认消息）。处理如下：<ol>
<li>A收到重复的确认后，直接丢弃。</li>
<li>B收到重复的M1后，也直接丢弃重复的M1。</li>
</ol>
</li>
</ul>
<h3 id="自动重传请求-ARQ-协议"><a href="#自动重传请求-ARQ-协议" class="headerlink" title="自动重传请求 ARQ 协议"></a>自动重传请求 ARQ 协议</h3><p>停止等待协议中超时重传是指只要超过一段时间仍然没有收到确认，就重传前面发送过的分组（认为刚才发送过的分组丢失了）。因此每发送完一个分组需要设置一个超时计时器，其重转时间应比数据在分组传输的平均往返时间更长一些。这种自动重传方式常称为自动重传请求ARQ。</p>
<p><strong>优点：</strong> 简单</p>
<p><strong>缺点：</strong> 信道利用率低</p>
<h3 id="连续ARQ协议"><a href="#连续ARQ协议" class="headerlink" title="连续ARQ协议"></a>连续ARQ协议</h3><p>连续 ARQ 协议可提高信道利用率。发送方维持一个发送窗口，凡位于发送窗口内的分组可以连续发送出去，而不需要等待对方确认。接收方一般采用累计确认，对按序到达的最后一个分组发送确认，表明到这个分组为止的所有分组都已经正确收到了。</p>
<p><strong>优点：</strong> 信道利用率高，容易实现，即使确认丢失，也不必重传。</p>
<p><strong>缺点：</strong> 不能向发送方反映出接收方已经正确收到的所有分组的信息。 比如：发送方发送了 5条 消息，中间第三条丢失（3号），这时接收方只能对前两个发送确认。发送方无法知道后三个分组的下落，而只好把后三个全部重传一次。这也叫 Go-Back-N（回退 N），表示需要退回来重传已经发送过的 N 个消息。</p>
<h3 id="滑动窗口"><a href="#滑动窗口" class="headerlink" title="滑动窗口"></a>滑动窗口</h3><ul>
<li>TCP 利用滑动窗口实现流量控制的机制。</li>
<li>滑动窗口（Sliding window）是一种流量控制技术。早期的网络通信中，通信双方不会考虑网络的拥挤情况直接发送数据。由于大家不知道网络拥塞状况，同时发送数据，导致中间节点阻塞掉包，谁也发不了数据，所以就有了滑动窗口机制来解决此问题。</li>
<li>TCP 中采用滑动窗口来进行传输控制，滑动窗口的大小意味着接收方还有多大的缓冲区可以用于接收数据。发送方可以通过滑动窗口的大小来确定应该发送多少字节的数据。当滑动窗口为 0 时，发送方一般不能再发送数据报，但有两种情况除外，一种情况是可以发送紧急数据，例如，允许用户终止在远端机上的运行进程。另一种情况是发送方可以发送一个 1 字节的数据报来通知接收方重新声明它希望接收的下一字节及发送方的滑动窗口大小。</li>
</ul>
<h3 id="流量控制"><a href="#流量控制" class="headerlink" title="流量控制"></a>流量控制</h3><ul>
<li>TCP 利用滑动窗口实现流量控制。</li>
<li>流量控制是为了控制发送方发送速率，保证接收方来得及接收。</li>
<li>接收方发送的确认报文中的窗口字段可以用来控制发送方窗口大小，从而影响发送方的发送速率。将窗口字段设置为 0，则发送方不能发送数据。</li>
</ul>
<h3 id="拥塞控制"><a href="#拥塞控制" class="headerlink" title="拥塞控制"></a>拥塞控制</h3><p>在某段时间，若对网络中某一资源的需求超过了该资源所能提供的可用部分，网络的性能就要变坏。这种情况就叫拥塞。拥塞控制就是为了防止过多的数据注入到网络中，这样就可以使网络中的路由器或链路不致过载。拥塞控制所要做的都有一个前提，就是网络能够承受现有的网络负荷。拥塞控制是一个全局性的过程，涉及到所有的主机，所有的路由器，以及与降低网络传输性能有关的所有因素。相反，流量控制往往是点对点通信量的控制，是个端到端的问题。流量控制所要做到的就是抑制发送端发送数据的速率，以便使接收端来得及接收。</p>
<p>为了进行拥塞控制，TCP 发送方要维持一个 <strong>拥塞窗口(cwnd)</strong> 的状态变量。拥塞控制窗口的大小取决于网络的拥塞程度，并且动态变化。发送方让自己的发送窗口取为拥塞窗口和接收方的接受窗口中较小的一个。</p>
<p>TCP的拥塞控制采用了四种算法，即 <strong>慢开始</strong> 、 <strong>拥塞避免</strong> 、<strong>快重传</strong> 和 <strong>快恢复</strong>。在网络层也可以使路由器采用适当的分组丢弃策略（如主动队列管理 AQM），以减少网络拥塞的发生。</p>
<ul>
<li><strong>慢开始：</strong> 慢开始算法的思路是当主机开始发送数据时，如果立即把大量数据字节注入到网络，那么可能会引起网络阻塞，因为现在还不知道网络的符合情况。经验表明，较好的方法是先探测一下，即由小到大逐渐增大发送窗口，也就是由小到大逐渐增大拥塞窗口数值。cwnd初始值为1，每经过一个传播轮次，cwnd加倍。<br> <img src="https://user-gold-cdn.xitu.io/2018/8/10/1652348ada2c8fd0?w=1050&amp;h=560&amp;f=jpeg&amp;s=112611" alt=""></li>
<li><strong>拥塞避免：</strong> 拥塞避免算法的思路是让拥塞窗口cwnd缓慢增大，即每经过一个往返时间RTT就把发送放的cwnd加1.</li>
<li><strong>快重传与快恢复：</strong><br>在 TCP/IP 中，快速重传和恢复（fast retransmit and recovery，FRR）是一种拥塞控制算法，它能快速恢复丢失的数据包。没有 FRR，如果数据包丢失了，TCP 将会使用定时器来要求传输暂停。在暂停的这段时间内，没有新的或复制的数据包被发送。有了 FRR，如果接收机接收到一个不按顺序的数据段，它会立即给发送机发送一个重复确认。如果发送机接收到三个重复确认，它会假定确认件指出的数据段丢失了，并立即重传这些丢失的数据段。有了 FRR，就不会因为重传时要求的暂停被耽误。 　当有单独的数据包丢失时，快速重传和恢复（FRR）能最有效地工作。当有多个数据信息包在某一段很短的时间内丢失时，它则不能很有效地工作。<br><img src="https://user-gold-cdn.xitu.io/2018/8/10/165234f0303d174b?w=1174&amp;h=648&amp;f=png&amp;s=109568" alt="快重传与快恢复"></li>
</ul>
<h2 id="五-在浏览器中输入url地址-gt-gt-显示主页的过程（面试常客）"><a href="#五-在浏览器中输入url地址-gt-gt-显示主页的过程（面试常客）" class="headerlink" title="五  在浏览器中输入url地址 -&gt;&gt; 显示主页的过程（面试常客）"></a>五  在浏览器中输入url地址 -&gt;&gt; 显示主页的过程（面试常客）</h2><p>百度好像最喜欢问这个问题。</p>
<blockquote>
<p>打开一个网页，整个过程会使用哪些协议</p>
</blockquote>
<p>图解（图片来源：《图解HTTP》）：</p>
<p><img src="https://user-gold-cdn.xitu.io/2018/4/19/162db5e985aabdbe?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="状态码"></p>
<p>总体来说分为以下几个过程:</p>
<ol>
<li>DNS解析</li>
<li>TCP连接</li>
<li>发送HTTP请求</li>
<li>服务器处理请求并返回HTTP报文</li>
<li>浏览器解析渲染页面</li>
<li>连接结束</li>
</ol>
<p>具体可以参考下面这篇文章：</p>
<ul>
<li><a href="https://segmentfault.com/a/1190000006879700" target="_blank" rel="external">https://segmentfault.com/a/1190000006879700</a></li>
</ul>
<h2 id="六-状态码"><a href="#六-状态码" class="headerlink" title="六 状态码"></a>六 状态码</h2><p><img src="https://user-gold-cdn.xitu.io/2018/5/8/1633e19dba27ed00?w=673&amp;h=218&amp;f=png&amp;s=72968" alt="状态码"></p>
<h2 id="七-各种协议与HTTP协议之间的关系"><a href="#七-各种协议与HTTP协议之间的关系" class="headerlink" title="七 各种协议与HTTP协议之间的关系"></a>七 各种协议与HTTP协议之间的关系</h2><p>一般面试官会通过这样的问题来考察你对计算机网络知识体系的理解。</p>
<p>图片来源：《图解HTTP》</p>
<p><img src="https://user-gold-cdn.xitu.io/2018/5/8/1633ead316d07713?w=841&amp;h=1193&amp;f=png&amp;s=609513" alt="各种协议与HTTP协议之间的关系"></p>
<h2 id="八-HTTP长连接、短连接"><a href="#八-HTTP长连接、短连接" class="headerlink" title="八  HTTP长连接、短连接"></a>八  HTTP长连接、短连接</h2><p>在HTTP/1.0中默认使用短连接。也就是说，客户端和服务器每进行一次HTTP操作，就建立一次连接，任务结束就中断连接。当客户端浏览器访问的某个HTML或其他类型的Web页中包含有其他的Web资源（如JavaScript文件、图像文件、CSS文件等），每遇到这样一个Web资源，浏览器就会重新建立一个HTTP会话。</p>
<p>而从HTTP/1.1起，默认使用长连接，用以保持连接特性。使用长连接的HTTP协议，会在响应头加入这行代码：</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">Connection</span>:<span class="meta">keep</span>-alive</div></pre></td></tr></table></figure>
<p>在使用长连接的情况下，当一个网页打开完成后，客户端和服务器之间用于传输HTTP数据的TCP连接不会关闭，客户端再次访问这个服务器时，会继续使用这一条已经建立的连接。Keep-Alive不会永久保持连接，它有一个保持时间，可以在不同的服务器软件（如Apache）中设定这个时间。实现长连接需要客户端和服务端都支持长连接。</p>
<p><strong>HTTP协议的长连接和短连接，实质上是TCP协议的长连接和短连接。</strong> </p>
<p>—— <a href="https://www.cnblogs.com/gotodsp/p/6366163.html" target="_blank" rel="external">《HTTP长连接、短连接究竟是什么？》</a></p>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><h3 id="计算机网络常见问题回顾"><a href="#计算机网络常见问题回顾" class="headerlink" title="计算机网络常见问题回顾"></a>计算机网络常见问题回顾</h3><ul>
<li>①TCP三次握手和四次挥手、</li>
<li>②在浏览器中输入url地址-&gt;&gt;显示主页的过程</li>
<li>③HTTP和HTTPS的区别</li>
<li>④TCP、UDP协议的区别</li>
<li>⑤常见的状态码。 </li>
</ul>
<h3 id="建议"><a href="#建议" class="headerlink" title="建议"></a>建议</h3><p>非常推荐大家看一下 《图解HTTP》 这本书，这本书页数不多，但是内容很是充实，不管是用来系统的掌握网络方面的一些知识还是说纯粹为了应付面试都有很大帮助。下面的一些文章只是参考。大二学习这门课程的时候，我们使用的教材是 《计算机网络第七版》（谢希仁编著），不推荐大家看这本教材，书非常厚而且知识偏理论，不确定大家能不能心平气和的读完。</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="https://blog.csdn.net/qq_16209077/article/details/52718250" target="_blank" rel="external">https://blog.csdn.net/qq_16209077/article/details/52718250</a></li>
<li><a href="https://blog.csdn.net/zixiaomuwu/article/details/60965466" target="_blank" rel="external">https://blog.csdn.net/zixiaomuwu/article/details/60965466</a></li>
<li><a href="https://blog.csdn.net/turn__back/article/details/73743641" target="_blank" rel="external">https://blog.csdn.net/turn__back/article/details/73743641</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      计算机网络复习重点
    
    </summary>
    
    
      <category term="计算机网络" scheme="http://www.draymonder.site/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>JVM垃圾回收机制</title>
    <link href="http://www.draymonder.site/backend/java/jvm/gc/"/>
    <id>http://www.draymonder.site/backend/java/jvm/gc/</id>
    <published>2018-12-27T14:00:00.000Z</published>
    <updated>2018-12-27T07:42:59.943Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Java GC(Garbage Collection,垃圾回收)机制是Java与c++/c的主要区别之一.</p>
<h1 id="GC方法"><a href="#GC方法" class="headerlink" title="GC方法"></a>GC方法</h1><h2 id="引用计数法-Reference-Counting"><a href="#引用计数法-Reference-Counting" class="headerlink" title="引用计数法 Reference Counting"></a>引用计数法 Reference Counting</h2><p>给对象添加一个 引用计数器，每当有一个地方引用，计数器就加1，引用失效，计数器就减1。<br>为0时候就是不可能再使用的。<br>(实验论证 虚拟机不是通过此方法判断对象是否存活的)</p>
<h2 id="可达性分析算法-Reachability-Analysis"><a href="#可达性分析算法-Reachability-Analysis" class="headerlink" title="可达性分析算法 Reachability Analysis"></a>可达性分析算法 Reachability Analysis</h2><p>算法基本思想就是通过一系列的称为<code>GC Roots</code>的对象作为起始点，从这些节点开始向下搜索，搜索所走过的路径成为引用链(Reference Chain)</p>
<h2 id="谈论引用"><a href="#谈论引用" class="headerlink" title="谈论引用"></a>谈论引用</h2><p>在<code>JDK1.2</code>后，Java对引用的概念进行了扩充。<br>将引用分为强引用、软引用、弱引用、虚引用</p>
<ol>
<li>强引用就是指在程序代码之中普遍存在的，类似<code>Object obj = new Object()</code>这类的引用，只要强引用在，GC永远不会回收掉被引用的对象。</li>
<li>软引用是用来描述一些还有用但并非必需的对象。对于软引用关联着的对象，在对象将要发生内存溢出异常之前，将会把这些对象列进回收范围之中进行第二次回收。<code>JDK1.2</code>以后提供了<code>SoftReference</code>类来实现软引用。</li>
<li>弱引用也是用来描述非必需对象的，但是它的强度比软引用更弱一些，被弱引用关联的对象只能生存到下一次垃圾收集发生之前。当垃圾收集器工作室，无论当前内存是否足够都会回收掉只被弱引用关联的对象。在<code>jdk1.2</code>以后，提供了<code>WeakReference</code>类来实现弱引用。</li>
<li>虚引用也称为幽灵引用或者幻影引用，它是最弱的一种引用关系。一个对象是否有虚引用的存在，完全不会对其生存时间构成印象，也无法通过虚引用来取得一个对象实例。为一个对象设置虚引用关联的唯一目的就是能在这个对象被收集器回收时收到一个系统通知。在<code>jdk1.2</code>以后，提供了<code>PhantomReference</code>类来实现虚引用。<br>## </li>
</ol>
]]></content>
    
    <summary type="html">
    
      JVM垃圾回收机制
    
    </summary>
    
    
      <category term="Jvm" scheme="http://www.draymonder.site/tags/Jvm/"/>
    
  </entry>
  
  <entry>
    <title>JDK源码学习笔记 Object</title>
    <link href="http://www.draymonder.site/backend/java/javase/Object/"/>
    <id>http://www.draymonder.site/backend/java/javase/Object/</id>
    <published>2018-12-27T13:00:00.000Z</published>
    <updated>2018-12-27T06:20:31.889Z</updated>
    
    <content type="html"><![CDATA[<h2 id="hashCode"><a href="#hashCode" class="headerlink" title="hashCode"></a>hashCode</h2><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="function"><span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span></span>;</div></pre></td></tr></table></figure>
<h2 id="equals"><a href="#equals" class="headerlink" title="equals"></a>equals</h2><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> (<span class="keyword">this</span> == obj);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="clone"><a href="#clone" class="headerlink" title="clone"></a>clone</h2><p>浅拷贝<br>数组类型默认可以直接克隆，而其他对象实现clone需要先实现<code>Cloneable</code>接口,否则抛出CloneNotSupportedException异常<br>本地clone方法，用于对象的复制<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">protected</span> <span class="keyword">native</span> <span class="function">Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException</span>;</div></pre></td></tr></table></figure></p>
<h2 id="notify"><a href="#notify" class="headerlink" title="notify"></a>notify</h2><p>不能被重写，用于唤醒一个在因等待该对象（调用wait方法）被处于等待<br>(waiting或time_wait) 的线程，该方法只能同步方法或同步块中调用<br><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">/* </div><div class="line"> * <span class="type">This</span> <span class="keyword">method</span> should only be called by a thread that <span class="keyword">is</span> the owner</div><div class="line"> * <span class="keyword">of</span> this <span class="keyword">object</span>'s monitor. A thread becomes the owner <span class="keyword">of</span> the</div><div class="line"> * <span class="keyword">object</span>'s monitor <span class="keyword">in</span> one <span class="keyword">of</span> three ways:</div><div class="line"> * &lt;ul&gt;</div><div class="line"> * &lt;li&gt;<span class="type">By</span> executing a synchronized instance <span class="keyword">method</span> <span class="keyword">of</span> that <span class="keyword">object</span>.</div><div class="line"> * &lt;li&gt;<span class="type">By</span> executing the body <span class="keyword">of</span> a &#123;@code synchronized&#125; statement</div><div class="line"> *     that synchronizes on the <span class="keyword">object</span>.</div><div class="line"> * &lt;li&gt;<span class="type">For</span> objects <span class="keyword">of</span> <span class="keyword">type</span> &#123;@code <span class="type">Class</span>,&#125; by executing a</div><div class="line"> *     synchronized <span class="keyword">static</span> <span class="keyword">method</span> <span class="keyword">of</span> that class.</div><div class="line"> * &lt;/ul&gt;</div><div class="line"> * &lt;p&gt;</div><div class="line"> * <span class="type">Only</span> one thread at a time can own an <span class="keyword">object</span>'s monitor.</div><div class="line"> *</div><div class="line"> * @throws  <span class="type">IllegalMonitorStateException</span>  <span class="keyword">if</span> the current thread <span class="keyword">is</span> <span class="keyword">not</span></div><div class="line"> *               the owner <span class="keyword">of</span> this <span class="keyword">object</span>'s monitor.</div><div class="line"> * @see        java.lang.<span class="type">Object</span><span class="comment">#notifyAll()</span></div><div class="line"> * @see        java.lang.<span class="type">Object</span><span class="comment">#wait()</span></div><div class="line"> */</div><div class="line">public final native <span class="built_in">void</span> notify();</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      JDK源码学习笔记 Object
    
    </summary>
    
    
      <category term="JavaSE" scheme="http://www.draymonder.site/tags/JavaSE/"/>
    
  </entry>
  
  <entry>
    <title>JDK源码学习笔记 String</title>
    <link href="http://www.draymonder.site/backend/java/javase/String/"/>
    <id>http://www.draymonder.site/backend/java/javase/String/</id>
    <published>2018-12-26T13:00:00.000Z</published>
    <updated>2018-12-26T13:43:51.959Z</updated>
    
    <content type="html"><![CDATA[<h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2><p>大概是一些根据字符集或者直接拷贝原有的char数组或直接的String实例赋值</p>
<h2 id="equals"><a href="#equals" class="headerlink" title="equals"></a>equals</h2><figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="built_in">boolean</span> equals(<span class="keyword">Object</span> anObject) &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> == anObject) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (anObject <span class="keyword">instanceof</span> <span class="keyword">String</span>) &#123;</div><div class="line">        <span class="keyword">String</span> anotherString = (<span class="keyword">String</span>)anObject;</div><div class="line">        <span class="built_in">int</span> n = value.length;</div><div class="line">        <span class="keyword">if</span> (n == anotherString.value.length) &#123;</div><div class="line">            <span class="built_in">char</span> v1[] = value;</div><div class="line">            <span class="built_in">char</span> v2[] = anotherString.value;</div><div class="line">            <span class="built_in">int</span> i = <span class="number">0</span>;</div><div class="line">            <span class="keyword">while</span> (n-- != <span class="number">0</span>) &#123;</div><div class="line">                <span class="keyword">if</span> (v1[i] != v2[i])</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">                i++;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="compareTo"><a href="#compareTo" class="headerlink" title="compareTo"></a>compareTo</h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span>(<span class="params">String anotherString</span>) </span>&#123;</div><div class="line">    <span class="keyword">int</span> len1 = <span class="keyword">value</span>.length;</div><div class="line">    <span class="keyword">int</span> len2 = anotherString.<span class="keyword">value</span>.length;</div><div class="line">    <span class="keyword">int</span> lim = Math.min(len1, len2);</div><div class="line">    <span class="keyword">char</span> v1[] = <span class="keyword">value</span>;</div><div class="line">    <span class="keyword">char</span> v2[] = anotherString.<span class="keyword">value</span>;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> k = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (k &lt; lim) &#123;</div><div class="line">        <span class="keyword">char</span> c1 = v1[k];</div><div class="line">        <span class="keyword">char</span> c2 = v2[k];</div><div class="line">        <span class="keyword">if</span> (c1 != c2) &#123;</div><div class="line">            <span class="keyword">return</span> c1 - c2;</div><div class="line">        &#125;</div><div class="line">        k++;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> len1 - len2;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="hashCode"><a href="#hashCode" class="headerlink" title="hashCode"></a>hashCode</h2><p>计算方法<br><code>s[0]*31^(n-1) + s[1]*31^(n-2) + ... + s[n-1]</code></p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">int</span> h = hash;</div><div class="line">    <span class="keyword">if</span> (h == <span class="number">0</span> &amp;&amp; <span class="keyword">value</span>.length &gt; <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">char</span> val[] = <span class="keyword">value</span>;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">value</span>.length; i++) &#123;</div><div class="line">            h = <span class="number">31</span> * h + val[i];</div><div class="line">        &#125;</div><div class="line">        hash = h;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> h;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="concat"><a href="#concat" class="headerlink" title="concat"></a>concat</h2><p>拼接函数<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">String</span> <span class="built_in">concat</span>(<span class="keyword">String</span> <span class="built_in">str</span>) &#123;</div><div class="line">    <span class="built_in">int</span> otherLen = <span class="built_in">str</span>.length();</div><div class="line">    <span class="keyword">if</span> (otherLen == <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">int</span> len = value.length;</div><div class="line">    <span class="built_in">char</span> buf[] = Arrays.copyOf(value, len + otherLen);</div><div class="line">    <span class="built_in">str</span>.getChars(buf, len);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">String</span>(buf, <span class="keyword">true</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="replace"><a href="#replace" class="headerlink" title="replace"></a>replace</h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">replace</span>(<span class="params"><span class="keyword">char</span> oldChar, <span class="keyword">char</span> newChar</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (oldChar != newChar) &#123;</div><div class="line">        <span class="keyword">int</span> len = <span class="keyword">value</span>.length;</div><div class="line"></div><div class="line">        <span class="keyword">char</span>[] val = <span class="keyword">value</span>; <span class="comment">/* avoid getfield opcode */</span></div><div class="line"></div><div class="line">        <span class="keyword">while</span> (++i &lt; len) &#123;</div><div class="line">            <span class="keyword">if</span> (val[i] == oldChar) &#123;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (i &lt; len) &#123;</div><div class="line">            <span class="keyword">char</span> buf[] = <span class="keyword">new</span> <span class="keyword">char</span>[len];</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</div><div class="line">                buf[j] = val[j];</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">while</span> (i &lt; len) &#123;</div><div class="line">                <span class="keyword">char</span> c = val[i];</div><div class="line">                buf[i] = (c == oldChar) ? newChar : c;</div><div class="line">                i++;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> String(buf, <span class="literal">true</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="split"><a href="#split" class="headerlink" title="split"></a>split</h2><figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">String</span>[] <span class="built_in">split</span>(<span class="keyword">String</span> regex, <span class="built_in">int</span> limit) &#123;</div><div class="line">    <span class="comment">/* fastpath if the regex is a</span></div><div class="line"><span class="comment">     (1)one-char String and this character is not one of the</span></div><div class="line"><span class="comment">        RegEx's meta characters ".$|()[&#123;^?*+\\", or</span></div><div class="line"><span class="comment">     (2)two-char String and the first char is the backslash and</span></div><div class="line"><span class="comment">        the second is not the ascii digit or ascii letter.</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="built_in">char</span> ch = <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span> (((regex.value.length == <span class="number">1</span> &amp;&amp;</div><div class="line">         <span class="string">".$|()[&#123;^?*+\\"</span>.indexOf(ch = regex.charAt(<span class="number">0</span>)) == <span class="number">-1</span>) ||</div><div class="line">         (regex.length() == <span class="number">2</span> &amp;&amp;</div><div class="line">          regex.charAt(<span class="number">0</span>) == <span class="string">'\\'</span> &amp;&amp;</div><div class="line">          (((ch = regex.charAt(<span class="number">1</span>))-<span class="string">'0'</span>)|(<span class="string">'9'</span>-ch)) &lt; <span class="number">0</span> &amp;&amp;</div><div class="line">          ((ch-<span class="string">'a'</span>)|(<span class="string">'z'</span>-ch)) &lt; <span class="number">0</span> &amp;&amp;</div><div class="line">          ((ch-<span class="string">'A'</span>)|(<span class="string">'Z'</span>-ch)) &lt; <span class="number">0</span>)) &amp;&amp;</div><div class="line">        (ch &lt; Character.MIN_HIGH_SURROGATE ||</div><div class="line">         ch &gt; Character.MAX_LOW_SURROGATE))</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">int</span> off = <span class="number">0</span>;</div><div class="line">        <span class="built_in">int</span> next = <span class="number">0</span>;</div><div class="line">        <span class="built_in">boolean</span> limited = limit &gt; <span class="number">0</span>;</div><div class="line">        ArrayList&lt;<span class="keyword">String</span>&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        <span class="keyword">while</span> ((next = indexOf(ch, off)) != <span class="number">-1</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (!limited || list.<span class="built_in">size</span>() &lt; limit - <span class="number">1</span>) &#123;</div><div class="line">                list.<span class="built_in">add</span>(substring(off, next));</div><div class="line">                off = next + <span class="number">1</span>;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;    <span class="comment">// last one</span></div><div class="line">                <span class="comment">//assert (list.size() == limit - 1);</span></div><div class="line">                list.<span class="built_in">add</span>(substring(off, value.length));</div><div class="line">                off = value.length;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// If no match was found, return this</span></div><div class="line">        <span class="keyword">if</span> (off == <span class="number">0</span>)</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">String</span>[]&#123;<span class="keyword">this</span>&#125;;</div><div class="line"></div><div class="line">        <span class="comment">// Add remaining segment</span></div><div class="line">        <span class="keyword">if</span> (!limited || list.<span class="built_in">size</span>() &lt; limit)</div><div class="line">            list.<span class="built_in">add</span>(substring(off, value.length));</div><div class="line"></div><div class="line">        <span class="comment">// Construct result</span></div><div class="line">        <span class="built_in">int</span> resultSize = list.<span class="built_in">size</span>();</div><div class="line">        <span class="keyword">if</span> (limit == <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">while</span> (resultSize &gt; <span class="number">0</span> &amp;&amp; list.<span class="built_in">get</span>(resultSize - <span class="number">1</span>).length() == <span class="number">0</span>) &#123;</div><div class="line">                resultSize--;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">String</span>[] result = <span class="keyword">new</span> <span class="keyword">String</span>[resultSize];</div><div class="line">        <span class="keyword">return</span> list.subList(<span class="number">0</span>, resultSize).toArray(result);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> Pattern.compile(regex).<span class="built_in">split</span>(<span class="keyword">this</span>, limit);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="intern"><a href="#intern" class="headerlink" title="intern"></a>intern</h2><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Returns a canonical representation <span class="keyword">for</span> <span class="keyword">the</span> <span class="built_in">string</span> object.</div><div class="line"> * &lt;p&gt;</div><div class="line"> * A pool <span class="keyword">of</span> strings, initially empty, <span class="keyword">is</span> maintained privately <span class="keyword">by</span> <span class="keyword">the</span></div><div class="line"> * <span class="built_in">class</span> &#123;@code String&#125;.</div><div class="line"> * &lt;p&gt;</div><div class="line"> * When <span class="keyword">the</span> intern method <span class="keyword">is</span> invoked, <span class="keyword">if</span> <span class="keyword">the</span> pool already <span class="keyword">contains</span> a</div><div class="line"> * <span class="built_in">string</span> <span class="keyword">equal</span> <span class="keyword">to</span> this &#123;@code String&#125; object <span class="keyword">as</span> determined <span class="keyword">by</span></div><div class="line"> * <span class="keyword">the</span> &#123;@link <span class="comment">#equals(Object)&#125; method, then the string from the pool is</span></div><div class="line"> * returned. Otherwise, this &#123;@code String&#125; object <span class="keyword">is</span> added <span class="keyword">to</span> <span class="keyword">the</span></div><div class="line"> * pool <span class="keyword">and</span> <span class="keyword">a reference</span> <span class="keyword">to</span> this &#123;@code String&#125; object <span class="keyword">is</span> returned.</div><div class="line"> * &lt;p&gt;</div><div class="line"> * It follows <span class="keyword">that</span> <span class="keyword">for</span> any two strings &#123;@code s&#125; <span class="keyword">and</span> &#123;@code t&#125;,</div><div class="line"> * &#123;@code s.intern() == t.intern()&#125; <span class="keyword">is</span> &#123;@code <span class="literal">true</span>&#125;</div><div class="line"> * <span class="keyword">if</span> <span class="keyword">and</span> only <span class="keyword">if</span> &#123;@code s.<span class="keyword">equals</span>(t)&#125; <span class="keyword">is</span> &#123;@code <span class="literal">true</span>&#125;.</div><div class="line"> * &lt;p&gt;</div><div class="line"> * All literal strings <span class="keyword">and</span> <span class="built_in">string</span>-valued <span class="built_in">constant</span> expressions are</div><div class="line"> * interned. String literals are defined <span class="keyword">in</span> section <span class="number">3.10</span><span class="number">.5</span> <span class="keyword">of</span> <span class="keyword">the</span></div><div class="line"> * &lt;cite&gt;The Java&amp;trade; Language Specification&lt;/cite&gt;.</div><div class="line"> *</div><div class="line"> * @<span class="literal">return</span>  a <span class="built_in">string</span> <span class="keyword">that</span> has <span class="keyword">the</span> same <span class="built_in">contents</span> <span class="keyword">as</span> this <span class="built_in">string</span>, <span class="keyword">but</span> <span class="keyword">is</span></div><div class="line"> *          guaranteed <span class="keyword">to</span> be <span class="keyword">from</span> a pool <span class="keyword">of</span> unique strings.</div><div class="line"> */</div><div class="line">public native String intern();</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      JDK源码学习笔记 String
    
    </summary>
    
    
      <category term="JavaSE" scheme="http://www.draymonder.site/tags/JavaSE/"/>
    
  </entry>
  
  <entry>
    <title>SSM项目问题中遇到 GET请求中有中文的情况</title>
    <link href="http://www.draymonder.site/backend/project/ssm/getIncludeChinese/"/>
    <id>http://www.draymonder.site/backend/project/ssm/getIncludeChinese/</id>
    <published>2018-12-21T16:00:00.000Z</published>
    <updated>2019-02-08T14:26:07.682Z</updated>
    
    <content type="html"><![CDATA[<h1 id="GET传参有中文的情况"><a href="#GET传参有中文的情况" class="headerlink" title="GET传参有中文的情况"></a>GET传参有中文的情况</h1><h2 id="问题复现"><a href="#问题复现" class="headerlink" title="问题复现"></a>问题复现</h2><p>今天做前端，发现无论传什么中文，都不会返回结果<br>然后Debug时候发现<br>如果下面的代码<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">shopName</span> = $(<span class="string">'#search'</span>).val()</div></pre></td></tr></table></figure></p>
<p>是可以获取中文的  但是 拼接GET请求时候<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">listUrl</span> + <span class="string">'?'</span> + <span class="string">'pageIndex='</span> + pageIndex + <span class="string">'&amp;pageSize='</span></div><div class="line">+ pageSize + <span class="string">'&amp;parentId='</span> + parentId + <span class="string">'&amp;areaId='</span> + areaId</div><div class="line">+ <span class="string">'&amp;shopCategoryId='</span> + shopCategoryId + <span class="string">'&amp;shopName='</span> + shopName;</div></pre></td></tr></table></figure></p>
<p>这时候如果shopName是中文，那么传出去的是 <code>shopName=</code>这样子的</p>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>前台页面<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attr">shopName</span> = $(<span class="string">'#search'</span>).val()</div><div class="line"><span class="attr">shopName</span> = encodeURI(encodeURI(shopName));</div></pre></td></tr></table></figure></p>
<p>后台接收处理<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">String trueShopName</span> = URLDecoder.decode(shopName, <span class="string">"UTF-8"</span>);</div></pre></td></tr></table></figure></p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.cnblogs.com/cdf-opensource-007/p/6337448.html" target="_blank" rel="external">详解get请求和post请求参数中文乱码的解决办法</a></p>
]]></content>
    
    <summary type="html">
    
      GET传参有中文的情况
    
    </summary>
    
    
      <category term="project" scheme="http://www.draymonder.site/tags/project/"/>
    
      <category term="SSM" scheme="http://www.draymonder.site/tags/SSM/"/>
    
  </entry>
  
  <entry>
    <title>记录项目开发中 一次有趣的debug经历</title>
    <link href="http://www.draymonder.site/backend/project/ssm/arraylist/"/>
    <id>http://www.draymonder.site/backend/project/ssm/arraylist/</id>
    <published>2018-12-09T16:00:00.000Z</published>
    <updated>2019-02-08T14:26:00.589Z</updated>
    
    <content type="html"><![CDATA[<h1 id="记录项目开发中-一次有趣的debug经历"><a href="#记录项目开发中-一次有趣的debug经历" class="headerlink" title="记录项目开发中 一次有趣的debug经历"></a>记录项目开发中 一次有趣的debug经历</h1><p>本来是在做单元测试的，但是发现如下代码 有问题..<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">ProductCategory p = new ProductCategory()<span class="comment">;</span></div><div class="line">for (<span class="name">int</span> i = <span class="number">1</span><span class="comment">; i &lt;= 5; i++) &#123;</span></div><div class="line">    p.setCreateTime(<span class="name">new</span> Date())<span class="comment">;</span></div><div class="line">    p.setPriority(<span class="name">i</span>)<span class="comment">;</span></div><div class="line">        p.setShopId((<span class="name">long</span>)(<span class="name">i</span>))<span class="comment">;</span></div><div class="line">    p.setProductCategoryName(<span class="string">"测试店铺种类"</span>+(<span class="name">i+3</span>))<span class="comment">;</span></div><div class="line">    list.add(<span class="name">p</span>)<span class="comment">;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>打印list里面对象的ProductCategoryName<br>发现如下<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">测试店铺种类<span class="number">8</span></div><div class="line">测试店铺种类<span class="number">8</span></div><div class="line">测试店铺种类<span class="number">8</span></div><div class="line">测试店铺种类<span class="number">8</span></div><div class="line">测试店铺种类<span class="number">8</span></div></pre></td></tr></table></figure></p>
<p>我甚至还以为是ArrayList的add函数会去重 (人工智障)，看了一下源码<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="built_in">boolean</span> <span class="built_in">add</span>(E e) &#123;</div><div class="line">        ensureCapacityInternal(<span class="built_in">size</span> + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></div><div class="line">        elementData[<span class="built_in">size</span>++] = e;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>发现没什么不妥。<br>多测试了几下 发现 list 每次增加对象的时候 list是单纯把相应index赋值为对象。<br>因此我上面对象 看似存了5次，但其实，最后打印的时候 打印的是同一个对象， 即最后一次的修改信息<br>所以有 5个<code>测试店铺种类8</code></p>
<h1 id="正确写法"><a href="#正确写法" class="headerlink" title="正确写法"></a>正确写法</h1><p>每次new一个新的对象 加入到list中<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">for (<span class="name">int</span> i = <span class="number">1</span><span class="comment">; i &lt;= 5; i++) &#123;</span></div><div class="line">    p = new ProductCategory(<span class="name">null</span>,(<span class="name">long</span>)i,<span class="string">"test"</span>+i+10,i,new Date())<span class="comment">;</span></div><div class="line">    //p.setCreateTime(<span class="name">new</span> Date())<span class="comment">;</span></div><div class="line">    //p.setPriority(<span class="name">i</span>)<span class="comment">;</span></div><div class="line">    //p.setShopId((<span class="name">long</span>)(<span class="name">i</span>))<span class="comment">;</span></div><div class="line">    //p.setProductCategoryName(<span class="string">"测试店铺种类"</span>+(<span class="name">i+3</span>))<span class="comment">;</span></div><div class="line">    list.add(<span class="name">p</span>)<span class="comment">;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="感悟"><a href="#感悟" class="headerlink" title="感悟"></a>感悟</h1><p>本身那么创建一个对象,目的是为了减少内存开销<br>但是这样做的结果就是list中存储的对象都是用一个<br>特此标注一下 谨防以后再犯错</p>
]]></content>
    
    <summary type="html">
    
      ArrayList添加对象的有趣经历
    
    </summary>
    
    
      <category term="project" scheme="http://www.draymonder.site/tags/project/"/>
    
      <category term="SSM" scheme="http://www.draymonder.site/tags/SSM/"/>
    
  </entry>
  
  <entry>
    <title>SSM从零开发校园商铺平台的MySQL表格设计</title>
    <link href="http://www.draymonder.site/backend/project/ssm/tableAndEntity/"/>
    <id>http://www.draymonder.site/backend/project/ssm/tableAndEntity/</id>
    <published>2018-12-02T16:00:00.000Z</published>
    <updated>2019-02-08T14:26:19.140Z</updated>
    
    <content type="html"><![CDATA[<p>话不多说，下面表格是项目开发中用到的实体集以及表格Name<br><a href="https://github.com/Draymonders/ssm/tree/master/src/main/java/com/cumt/entity" target="_blank" rel="external">实体创建</a> &nbsp;&nbsp;&nbsp;&nbsp;<a href="https://github.com/Draymonders/ssm/blob/master/table_create.txt" target="_blank" rel="external">表格创建</a></p>
<h1 id="Area-区域"><a href="#Area-区域" class="headerlink" title="Area 区域"></a>Area 区域</h1><table>
<thead>
<tr>
<th>Area</th>
</tr>
</thead>
<tbody>
<tr>
<td>实体</td>
<td>areaId</td>
<td>areaName</td>
<td>priority</td>
<td>createTime</td>
<td>lastEditTime</td>
</tr>
<tr>
<td>表格</td>
<td>area_id</td>
<td>area_name</td>
<td>priority</td>
<td>create_time</td>
<td>last_edit_time</td>
</tr>
</tbody>
</table>
<h1 id="HeadLine-头条-用做首页滚动"><a href="#HeadLine-头条-用做首页滚动" class="headerlink" title="HeadLine 头条 (用做首页滚动"></a>HeadLine 头条 (用做首页滚动</h1><table>
<thead>
<tr>
<th>HeadLine</th>
</tr>
</thead>
<tbody>
<tr>
<td>实体</td>
<td>lineId</td>
<td>lineName</td>
<td>lineLink</td>
<td>lineImg</td>
<td>priority</td>
</tr>
<tr>
<td>表格</td>
<td>line_id</td>
<td>line_name</td>
<td>line_link</td>
<td>line_img</td>
<td>priority</td>
</tr>
<tr>
<td>实体</td>
<td>enableStatus</td>
<td>createTime</td>
<td>lastEditTime</td>
</tr>
<tr>
<td>表格</td>
<td>enable_status</td>
<td>create_time</td>
<td>last_edit_time</td>
</tr>
</tbody>
</table>
<h1 id="PersonInfo-个人信息"><a href="#PersonInfo-个人信息" class="headerlink" title="PersonInfo 个人信息"></a>PersonInfo 个人信息</h1><table>
<thead>
<tr>
<th>PersonInfo</th>
</tr>
</thead>
<tbody>
<tr>
<td>实体</td>
<td>userId</td>
<td>name</td>
<td>profileImg</td>
<td>email</td>
<td>gender</td>
</tr>
<tr>
<td>表格</td>
<td>user_id</td>
<td>name</td>
<td>profile_img</td>
<td>email</td>
<td>gender</td>
</tr>
<tr>
<td>实体</td>
<td>enableStatus</td>
<td>userType</td>
<td>createTime</td>
<td>lastEditTime</td>
</tr>
<tr>
<td>表格</td>
<td>enable_status</td>
<td>user_type</td>
<td>create_time</td>
<td>last_edit_time</td>
</tr>
</tbody>
</table>
<h2 id="LocalAuth-本地用户"><a href="#LocalAuth-本地用户" class="headerlink" title="LocalAuth 本地用户"></a>LocalAuth 本地用户</h2><table>
<thead>
<tr>
<th>LocalAuth</th>
</tr>
</thead>
<tbody>
<tr>
<td>实体</td>
<td>localAuthId</td>
<td>personInfo</td>
<td>username</td>
<td>password</td>
</tr>
<tr>
<td>表格</td>
<td>local_auth_id</td>
<td>user_id</td>
<td>username</td>
<td>password</td>
</tr>
<tr>
<td>实体</td>
<td>createTime</td>
<td>lastEditTime</td>
</tr>
<tr>
<td>表格</td>
<td>create_time</td>
<td>last_edit_time</td>
</tr>
</tbody>
</table>
<h2 id="WechatAuth-微信用户"><a href="#WechatAuth-微信用户" class="headerlink" title="WechatAuth 微信用户"></a>WechatAuth 微信用户</h2><table>
<thead>
<tr>
<th>WechatAuth</th>
</tr>
</thead>
<tbody>
<tr>
<td>实体</td>
<td>wechatAuthId</td>
<td>personInfo</td>
<td>openId</td>
<td>createTime</td>
</tr>
<tr>
<td>表格</td>
<td>wechat_auth_id</td>
<td>user_id</td>
<td>open_id</td>
<td>create_time</td>
</tr>
</tbody>
</table>
<h1 id="ShopCategory-店铺类别"><a href="#ShopCategory-店铺类别" class="headerlink" title="ShopCategory 店铺类别"></a>ShopCategory 店铺类别</h1><table>
<thead>
<tr>
<th>ShopCategory</th>
</tr>
</thead>
<tbody>
<tr>
<td>实体</td>
<td>shopCategoryId</td>
<td>shopCategoryName</td>
<td>shopCategoryDesc</td>
</tr>
<tr>
<td>表格</td>
<td>shop_category_id</td>
<td>shop_category_name</td>
<td>shop_category_desc</td>
</tr>
<tr>
<td>实体</td>
<td>shopCategoryImg</td>
<td>priority</td>
<td>parent</td>
</tr>
<tr>
<td>表格</td>
<td>shop_category_img</td>
<td>priority</td>
<td>parent_id</td>
</tr>
<tr>
<td>实体</td>
<td>createTime</td>
<td>lastEditTime</td>
</tr>
<tr>
<td>表格</td>
<td>create_time</td>
<td>last_edit_time</td>
</tr>
</tbody>
</table>
<h1 id="Shop-商铺"><a href="#Shop-商铺" class="headerlink" title="Shop 商铺"></a>Shop 商铺</h1><table>
<thead>
<tr>
<th>Shop</th>
</tr>
</thead>
<tbody>
<tr>
<td>实体</td>
<td>shopId</td>
<td>shopName</td>
<td>shopDesc</td>
<td>area</td>
<td>enableStatus</td>
</tr>
<tr>
<td>表格</td>
<td>shop_id</td>
<td>shop_name</td>
<td>shop_desc</td>
<td>area_id</td>
<td>enable_status</td>
</tr>
<tr>
<td>实体</td>
<td>shopAddr</td>
<td>phone</td>
<td>shopImg</td>
<td>priority</td>
<td>shopCategory_id</td>
</tr>
<tr>
<td>表格</td>
<td>shop_addr</td>
<td>phone</td>
<td>shop_img</td>
<td>priority</td>
<td>shop_category_id</td>
</tr>
<tr>
<td>实体</td>
<td>createTime</td>
<td>lastEditTime</td>
<td>advice</td>
<td>owner</td>
</tr>
<tr>
<td>表格</td>
<td>create_time</td>
<td>last_edit_time</td>
<td>advice</td>
<td>owner_id</td>
</tr>
</tbody>
</table>
<h1 id="ProductCategory-商品种类"><a href="#ProductCategory-商品种类" class="headerlink" title="ProductCategory 商品种类"></a>ProductCategory 商品种类</h1><table>
<thead>
<tr>
<th>商品种类</th>
</tr>
</thead>
<tbody>
<tr>
<td>实体</td>
<td>shopId</td>
<td>productCategoryId</td>
<td>productCategoryName</td>
</tr>
<tr>
<td>表格</td>
<td>shop_id</td>
<td>product_category_id</td>
<td>product_category_name</td>
</tr>
<tr>
<td>实体</td>
<td>priority</td>
<td>createTime</td>
</tr>
<tr>
<td>表格</td>
<td>priority</td>
<td>create_time</td>
</tr>
</tbody>
</table>
<h1 id="Product-商品"><a href="#Product-商品" class="headerlink" title="Product 商品"></a>Product 商品</h1><table>
<thead>
<tr>
<th>商品</th>
</tr>
</thead>
<tbody>
<tr>
<td>实体</td>
<td>productId</td>
<td>shop</td>
<td>productName</td>
<td>productDesc</td>
</tr>
<tr>
<td>表格</td>
<td>product_id</td>
<td>shop_id</td>
<td>product_name</td>
<td>product_desc</td>
</tr>
<tr>
<td>实体</td>
<td>imgAddr</td>
<td>normalPrice</td>
<td>promotionPrice</td>
<td>productCategory</td>
</tr>
<tr>
<td>表格</td>
<td>img_addr</td>
<td>normal_price</td>
<td>promotion_price</td>
<td>product_category_id</td>
</tr>
<tr>
<td>实体</td>
<td>priority</td>
<td>createTime</td>
<td>lastEditTime</td>
<td>enableStatus</td>
</tr>
<tr>
<td>表格</td>
<td>priority</td>
<td>create_time</td>
<td>last_edit_time</td>
<td>enable_status</td>
</tr>
<tr>
<td>实体</td>
<td>productImgList</td>
</tr>
<tr>
<td>表格</td>
<td>一对多</td>
</tr>
</tbody>
</table>
<h2 id="ProductImg-商品图片"><a href="#ProductImg-商品图片" class="headerlink" title="ProductImg 商品图片"></a>ProductImg 商品图片</h2><table>
<thead>
<tr>
<th>商品</th>
</tr>
</thead>
<tbody>
<tr>
<td>实体</td>
<td>productImgId</td>
<td>productId</td>
<td>imgAddr</td>
<td>imgDesc</td>
</tr>
<tr>
<td>表格</td>
<td>product_img_id</td>
<td>product_id</td>
<td>img_addr</td>
<td>img_desc</td>
</tr>
<tr>
<td>实体</td>
<td>priority</td>
<td>createTime</td>
</tr>
<tr>
<td>表格</td>
<td>priority</td>
<td>create_time</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      本次记录ssm项目开发中的实体定义以及MySQL表格设计
    
    </summary>
    
    
      <category term="project" scheme="http://www.draymonder.site/tags/project/"/>
    
      <category term="SSM" scheme="http://www.draymonder.site/tags/SSM/"/>
    
  </entry>
  
  <entry>
    <title>SSM到Spring Boot从零开发校园商铺平台</title>
    <link href="http://www.draymonder.site/backend/project/ssm/init/"/>
    <id>http://www.draymonder.site/backend/project/ssm/init/</id>
    <published>2018-11-30T16:00:00.000Z</published>
    <updated>2019-02-08T14:26:13.973Z</updated>
    
    <content type="html"><![CDATA[<h1 id="项目目的"><a href="#项目目的" class="headerlink" title="项目目的"></a>项目目的</h1><p>emmm, 已经大三了，手上还没有一个可以拿得出手的项目。或许，不能算合格的计算机专业的学生。<br>改掉过往懒惰的习惯，做个项目，熟悉项目的流程，学习框架，了解框架的使用。<br></p>
<p>如果可以的话，要多深入框架底层的东西。</p>
<p><a href="https://coding.imooc.com/class/144.html" target="_blank" rel="external">慕课网教程</a></p>
<h1 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h1><p>本项目运用SSM技术快速迭代出版校园商铺1.0，再结合SSM转型成Spring Boot的思路，切换到校园商铺2.0。同时包含MySQL主从同步实现读写分离，利用SUI Mobile快速实现响应式页面，Redis缓存，数据库加密配置，阿里云部署等实用技术点。</p>
<h1 id="项目规划"><a href="#项目规划" class="headerlink" title="项目规划"></a>项目规划</h1><ol>
<li>项目设计(表设计，功能模块设计等)</li>
<li>搭好程序开发的框架</li>
<li>进行代码开发</li>
</ol>
<h2 id="Maven管理项目依赖"><a href="#Maven管理项目依赖" class="headerlink" title="Maven管理项目依赖"></a>Maven管理项目依赖</h2><p>在此之前，我甚至都没用过Maven… <br><br>Maven从我现在的感觉，就是你只需要写某个jar包的版本，他会从代理服务器下载相关的jar包，并自己关联到项目本身，所以不用到处找包了。<br><br>但是还是 你要知道你所需要的jar包。（这貌似就需要很多的项目经历了</p>
<h3 id="pom-xml配置"><a href="#pom-xml配置" class="headerlink" title="pom.xml配置"></a>pom.xml配置</h3><p>Maven依赖的配置</p>
<figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div></pre></td><td class="code"><pre><div class="line"><span class="params">&lt;project xmlns="http://maven.apache.org/POM/<span class="number">4.0</span><span class="number">.0</span>" xmlns:xsi="http://www.w3.org/<span class="number">2001</span>/XMLSchema-instance"</span></div><div class="line"><span class="params">  xsi:schemaLocation="http://maven.apache.org/POM/<span class="number">4.0</span><span class="number">.0</span> http://maven.apache.org/maven-v4_0_0.xsd"&gt;</span></div><div class="line">  <span class="params">&lt;modelVersion&gt;</span><span class="number">4.0</span><span class="number">.0</span><span class="params">&lt;/modelVersion&gt;</span></div><div class="line">  <span class="params">&lt;groupId&gt;</span>com<span class="params">&lt;/groupId&gt;</span></div><div class="line">  <span class="params">&lt;artifactId&gt;</span>ssm<span class="params">&lt;/artifactId&gt;</span></div><div class="line">  <span class="params">&lt;packaging&gt;</span>war<span class="params">&lt;/packaging&gt;</span></div><div class="line">  <span class="params">&lt;version&gt;</span><span class="number">0.0</span><span class="number">.1</span>-SNAPSHOT<span class="params">&lt;/version&gt;</span></div><div class="line">  <span class="params">&lt;name&gt;</span>ssm Maven Webapp<span class="params">&lt;/name&gt;</span></div><div class="line">  <span class="params">&lt;url&gt;</span>http:<span class="comment">//maven.apache.org&lt;/url&gt;</span></div><div class="line">  <span class="params">&lt;properties&gt;</span></div><div class="line">        <span class="params">&lt;spring.version&gt;</span><span class="number">4.3</span><span class="number">.7</span>.RELEASE<span class="params">&lt;/spring.version&gt;</span></div><div class="line">    <span class="params">&lt;/properties&gt;</span></div><div class="line">  <span class="params">&lt;dependencies&gt;</span></div><div class="line">        <span class="comment">// junit 用作单元测试</span></div><div class="line">        <span class="params">&lt;dependency&gt;</span></div><div class="line">            <span class="params">&lt;groupId&gt;</span>junit<span class="params">&lt;/groupId&gt;</span></div><div class="line">            <span class="params">&lt;artifactId&gt;</span>junit<span class="params">&lt;/artifactId&gt;</span></div><div class="line">            <span class="params">&lt;version&gt;</span><span class="number">4.12</span><span class="params">&lt;/version&gt;</span></div><div class="line">            <span class="params">&lt;scope&gt;</span>test<span class="params">&lt;/scope&gt;</span></div><div class="line">        <span class="params">&lt;/dependency&gt;</span></div><div class="line">        </div><div class="line">        <span class="comment">// logback 用作日志记录</span></div><div class="line">        <span class="params">&lt;dependency&gt;</span></div><div class="line">            <span class="params">&lt;groupId&gt;</span>ch.qos.logback<span class="params">&lt;/groupId&gt;</span></div><div class="line">            <span class="params">&lt;artifactId&gt;</span>logback-classic<span class="params">&lt;/artifactId&gt;</span></div><div class="line">            <span class="params">&lt;version&gt;</span><span class="number">1.2</span><span class="number">.3</span><span class="params">&lt;/version&gt;</span></div><div class="line">        <span class="params">&lt;/dependency&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">// spring核心</span></div><div class="line">        <span class="params">&lt;dependency&gt;</span></div><div class="line">            <span class="params">&lt;groupId&gt;</span>org.springframework<span class="params">&lt;/groupId&gt;</span></div><div class="line">            <span class="params">&lt;artifactId&gt;</span>spring-core<span class="params">&lt;/artifactId&gt;</span></div><div class="line">            <span class="params">&lt;version&gt;</span>$&#123;spring.version&#125;<span class="params">&lt;/version&gt;</span></div><div class="line">        <span class="params">&lt;/dependency&gt;</span></div><div class="line">        <span class="params">&lt;dependency&gt;</span></div><div class="line">            <span class="params">&lt;groupId&gt;</span>org.springframework<span class="params">&lt;/groupId&gt;</span></div><div class="line">            <span class="params">&lt;artifactId&gt;</span>spring-beans<span class="params">&lt;/artifactId&gt;</span></div><div class="line">            <span class="params">&lt;version&gt;</span>$&#123;spring.version&#125;<span class="params">&lt;/version&gt;</span></div><div class="line">        <span class="params">&lt;/dependency&gt;</span></div><div class="line">        <span class="params">&lt;dependency&gt;</span></div><div class="line">            <span class="params">&lt;groupId&gt;</span>org.springframework<span class="params">&lt;/groupId&gt;</span></div><div class="line">            <span class="params">&lt;artifactId&gt;</span>spring-context<span class="params">&lt;/artifactId&gt;</span></div><div class="line">            <span class="params">&lt;version&gt;</span>$&#123;spring.version&#125;<span class="params">&lt;/version&gt;</span></div><div class="line">        <span class="params">&lt;/dependency&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">// Spring Dao层</span></div><div class="line">        <span class="params">&lt;dependency&gt;</span></div><div class="line">            <span class="params">&lt;groupId&gt;</span>org.springframework<span class="params">&lt;/groupId&gt;</span></div><div class="line">            <span class="params">&lt;artifactId&gt;</span>spring-jdbc<span class="params">&lt;/artifactId&gt;</span></div><div class="line">            <span class="params">&lt;version&gt;</span>$&#123;spring.version&#125;<span class="params">&lt;/version&gt;</span></div><div class="line">        <span class="params">&lt;/dependency&gt;</span></div><div class="line">        <span class="params">&lt;dependency&gt;</span></div><div class="line">            <span class="params">&lt;groupId&gt;</span>org.springframework<span class="params">&lt;/groupId&gt;</span></div><div class="line">            <span class="params">&lt;artifactId&gt;</span>spring-tx<span class="params">&lt;/artifactId&gt;</span></div><div class="line">            <span class="params">&lt;version&gt;</span>$&#123;spring.version&#125;<span class="params">&lt;/version&gt;</span></div><div class="line">        <span class="params">&lt;/dependency&gt;</span></div><div class="line">        </div><div class="line">        <span class="comment">// Spring web</span></div><div class="line">        <span class="params">&lt;dependency&gt;</span></div><div class="line">            <span class="params">&lt;groupId&gt;</span>org.springframework<span class="params">&lt;/groupId&gt;</span></div><div class="line">            <span class="params">&lt;artifactId&gt;</span>spring-web<span class="params">&lt;/artifactId&gt;</span></div><div class="line">            <span class="params">&lt;version&gt;</span>$&#123;spring.version&#125;<span class="params">&lt;/version&gt;</span></div><div class="line">        <span class="params">&lt;/dependency&gt;</span></div><div class="line">        <span class="params">&lt;dependency&gt;</span></div><div class="line">            <span class="params">&lt;groupId&gt;</span>org.springframework<span class="params">&lt;/groupId&gt;</span></div><div class="line">            <span class="params">&lt;artifactId&gt;</span>spring-webmvc<span class="params">&lt;/artifactId&gt;</span></div><div class="line">            <span class="params">&lt;version&gt;</span>$&#123;spring.version&#125;<span class="params">&lt;/version&gt;</span></div><div class="line">        <span class="params">&lt;/dependency&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">// Spring test</span></div><div class="line">        <span class="params">&lt;dependency&gt;</span></div><div class="line">            <span class="params">&lt;groupId&gt;</span>org.springframework<span class="params">&lt;/groupId&gt;</span></div><div class="line">            <span class="params">&lt;artifactId&gt;</span>spring-test<span class="params">&lt;/artifactId&gt;</span></div><div class="line">            <span class="params">&lt;version&gt;</span>$&#123;spring.version&#125;<span class="params">&lt;/version&gt;</span></div><div class="line">            <span class="params">&lt;scope&gt;</span>test<span class="params">&lt;/scope&gt;</span></div><div class="line">        <span class="params">&lt;/dependency&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">// servlet</span></div><div class="line">        <span class="params">&lt;dependency&gt;</span></div><div class="line">            <span class="params">&lt;groupId&gt;</span>javax.servlet<span class="params">&lt;/groupId&gt;</span></div><div class="line">            <span class="params">&lt;artifactId&gt;</span>javax.servlet-api<span class="params">&lt;/artifactId&gt;</span></div><div class="line">            <span class="params">&lt;version&gt;</span><span class="number">3.1</span><span class="number">.0</span><span class="params">&lt;/version&gt;</span></div><div class="line">        <span class="params">&lt;/dependency&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">// Map工具类</span></div><div class="line">        <span class="params">&lt;dependency&gt;</span></div><div class="line">            <span class="params">&lt;groupId&gt;</span>commons-collections<span class="params">&lt;/groupId&gt;</span></div><div class="line">            <span class="params">&lt;artifactId&gt;</span>commons-collections<span class="params">&lt;/artifactId&gt;</span></div><div class="line">            <span class="params">&lt;version&gt;</span><span class="number">3.2</span><span class="params">&lt;/version&gt;</span></div><div class="line">        <span class="params">&lt;/dependency&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">// mybatis</span></div><div class="line">        <span class="params">&lt;dependency&gt;</span></div><div class="line">            <span class="params">&lt;groupId&gt;</span>org.mybatis<span class="params">&lt;/groupId&gt;</span></div><div class="line">            <span class="params">&lt;artifactId&gt;</span>mybatis<span class="params">&lt;/artifactId&gt;</span></div><div class="line">            <span class="params">&lt;version&gt;</span><span class="number">3.4</span><span class="number">.2</span><span class="params">&lt;/version&gt;</span></div><div class="line">        <span class="params">&lt;/dependency&gt;</span></div><div class="line">        <span class="params">&lt;dependency&gt;</span></div><div class="line">            <span class="params">&lt;groupId&gt;</span>org.mybatis<span class="params">&lt;/groupId&gt;</span></div><div class="line">            <span class="params">&lt;artifactId&gt;</span>mybatis-spring<span class="params">&lt;/artifactId&gt;</span></div><div class="line">            <span class="params">&lt;version&gt;</span><span class="number">1.3</span><span class="number">.1</span><span class="params">&lt;/version&gt;</span></div><div class="line">        <span class="params">&lt;/dependency&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">// mysql</span></div><div class="line">        <span class="params">&lt;dependency&gt;</span></div><div class="line">            <span class="params">&lt;groupId&gt;</span>mysql<span class="params">&lt;/groupId&gt;</span></div><div class="line">            <span class="params">&lt;artifactId&gt;</span>mysql-connector-java<span class="params">&lt;/artifactId&gt;</span></div><div class="line">            <span class="params">&lt;version&gt;</span><span class="number">5.1</span><span class="number">.37</span><span class="params">&lt;/version&gt;</span></div><div class="line">        <span class="params">&lt;/dependency&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">// 数据库连接池</span></div><div class="line">        <span class="params">&lt;dependency&gt;</span></div><div class="line">            <span class="params">&lt;groupId&gt;</span>c3p0<span class="params">&lt;/groupId&gt;</span></div><div class="line">            <span class="params">&lt;artifactId&gt;</span>c3p0<span class="params">&lt;/artifactId&gt;</span></div><div class="line">            <span class="params">&lt;version&gt;</span><span class="number">0.9</span><span class="number">.1</span><span class="number">.2</span><span class="params">&lt;/version&gt;</span></div><div class="line">        <span class="params">&lt;/dependency&gt;</span></div><div class="line">        <span class="comment">// 图片处理 </span></div><div class="line">        <span class="params">&lt;dependency&gt;</span></div><div class="line">            <span class="params">&lt;groupId&gt;</span>net.coobird<span class="params">&lt;/groupId&gt;</span></div><div class="line">            <span class="params">&lt;artifactId&gt;</span>thumbnailator<span class="params">&lt;/artifactId&gt;</span></div><div class="line">            <span class="params">&lt;version&gt;</span><span class="number">0.4</span><span class="number">.8</span><span class="params">&lt;/version&gt;</span></div><div class="line">        <span class="params">&lt;/dependency&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">// 文件处理</span></div><div class="line">        <span class="params">&lt;dependency&gt;</span></div><div class="line">            <span class="params">&lt;groupId&gt;</span>org.apache.directory.studio<span class="params">&lt;/groupId&gt;</span></div><div class="line">            <span class="params">&lt;artifactId&gt;</span>org.apache.commons.io<span class="params">&lt;/artifactId&gt;</span></div><div class="line">            <span class="params">&lt;version&gt;</span><span class="number">2.4</span><span class="params">&lt;/version&gt;</span></div><div class="line">        <span class="params">&lt;/dependency&gt;</span></div><div class="line">        </div><div class="line">        <span class="comment">// jackson 用来json与对象之间的转换</span></div><div class="line">        <span class="params">&lt;dependency&gt;</span></div><div class="line">            <span class="params">&lt;groupId&gt;</span>com.fasterxml.jackson.core<span class="params">&lt;/groupId&gt;</span></div><div class="line">            <span class="params">&lt;artifactId&gt;</span>jackson-databind<span class="params">&lt;/artifactId&gt;</span></div><div class="line">            <span class="params">&lt;version&gt;</span><span class="number">2.9</span><span class="number">.7</span><span class="params">&lt;/version&gt;</span></div><div class="line">        <span class="params">&lt;/dependency&gt;</span></div><div class="line">        </div><div class="line">        <span class="comment">// kaptcha验证码功能</span></div><div class="line">        <span class="params">&lt;dependency&gt;</span></div><div class="line">            <span class="params">&lt;groupId&gt;</span>com.github.penggle<span class="params">&lt;/groupId&gt;</span></div><div class="line">            <span class="params">&lt;artifactId&gt;</span>kaptcha<span class="params">&lt;/artifactId&gt;</span></div><div class="line">            <span class="params">&lt;version&gt;</span><span class="number">2.3</span><span class="number">.2</span><span class="params">&lt;/version&gt;</span></div><div class="line">        <span class="params">&lt;/dependency&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">// 文件上传</span></div><div class="line">        <span class="params">&lt;dependency&gt;</span></div><div class="line">            <span class="params">&lt;groupId&gt;</span>commons-fileupload<span class="params">&lt;/groupId&gt;</span></div><div class="line">            <span class="params">&lt;artifactId&gt;</span>commons-fileupload<span class="params">&lt;/artifactId&gt;</span></div><div class="line">            <span class="params">&lt;version&gt;</span><span class="number">1.3</span><span class="number">.2</span><span class="params">&lt;/version&gt;</span></div><div class="line">        <span class="params">&lt;/dependency&gt;</span>   </div><div class="line">    <span class="params">&lt;/dependencies&gt;</span></div><div class="line">  <span class="params">&lt;build&gt;</span></div><div class="line">        <span class="params">&lt;finalName&gt;</span>ssm<span class="params">&lt;/finalName&gt;</span></div><div class="line">        <span class="comment">// maven-compiler-plugin插件可以指定项目源码的jdk版本，编译后的jdk版本，以及编码</span></div><div class="line">        <span class="params">&lt;plugins&gt;</span></div><div class="line">            <span class="params">&lt;plugin&gt;</span></div><div class="line">                <span class="params">&lt;groupId&gt;</span>org.apache.maven.plugins<span class="params">&lt;/groupId&gt;</span></div><div class="line">                <span class="params">&lt;artifactId&gt;</span>maven-compiler-plugin<span class="params">&lt;/artifactId&gt;</span></div><div class="line">                <span class="params">&lt;version&gt;</span><span class="number">3.8</span><span class="number">.0</span><span class="params">&lt;/version&gt;</span></div><div class="line">                <span class="params">&lt;configuration&gt;</span></div><div class="line">                    <span class="params">&lt;source&gt;</span><span class="number">1.8</span><span class="params">&lt;/source&gt;</span></div><div class="line">                    <span class="params">&lt;target&gt;</span><span class="number">1.8</span><span class="params">&lt;/target&gt;</span></div><div class="line">                    <span class="params">&lt;encoding&gt;</span>UTF8<span class="params">&lt;/encoding&gt;</span></div><div class="line">                <span class="params">&lt;/configuration&gt;</span></div><div class="line">            <span class="params">&lt;/plugin&gt;</span></div><div class="line">        <span class="params">&lt;/plugins&gt;</span></div><div class="line">    <span class="params">&lt;/build&gt;</span></div><div class="line"><span class="params">&lt;/project&gt;</span></div><div class="line"></div><div class="line">写完了 别忘了右键项目-&gt; Maven -&gt; Update Project</div></pre></td></tr></table></figure>
<h2 id="web-xml"><a href="#web-xml" class="headerlink" title="web.xml"></a>web.xml</h2><p>web项目的核心配置文件，主要配置了SSM的前置控制器DispatcherServlet，主要负责流程的控制</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>spring-dispatcher<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 配置springMVC需要加载的配置文件 spring-dao.xml,spring-service.xml,spring-web.xml </span></div><div class="line"><span class="comment">        Mybatis - &gt; spring -&gt; springmvc --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring/spring-*.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>spring-dispatcher<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 默认匹配所有的请求 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="jdbc-properties"><a href="#jdbc-properties" class="headerlink" title="jdbc.properties"></a>jdbc.properties</h2><p>数据库本身数据封装</p>
<figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">jdbc.<span class="attribute">driver</span>=com.mysql.jdbc.Driver</div><div class="line">jdbc.<span class="attribute">url</span>=jdbc:mysql://localhost:3306/o2o?useUnicode=true&amp;characterEncoding=utf8</div><div class="line">jdbc.<span class="attribute">username</span>=root</div><div class="line">jdbc.<span class="attribute">password</span>=admin</div></pre></td></tr></table></figure>
<h2 id="spring-web-xml"><a href="#spring-web-xml" class="headerlink" title="spring-web.xml"></a>spring-web.xml</h2><p>主要配置SpringMVC：</p>
<ol>
<li>启用注解驱动</li>
<li>静态资源处理</li>
<li>配置视图解析器</li>
<li>配置文件解析器 </li>
<li>扫描web相关的bean；</li>
<li>后续权限拦截器的配置；</li>
</ol>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span><span class="meta">?&gt;</span></span> </div><div class="line"><span class="tag">&lt;<span class="name">beans</span> </span></div><div class="line"><span class="tag">    <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span> </span></div><div class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> </span></div><div class="line"><span class="tag">    <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span> </span></div><div class="line"><span class="tag">    <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span>   </span></div><div class="line"><span class="tag">    <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span>   </span></div><div class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans  </span></span></div><div class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd  </span></span></div><div class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/tx  </span></span></div><div class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/tx/spring-tx-3.0.xsd </span></span></div><div class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/context </span></span></div><div class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/context/spring-context-3.0.xsd </span></span></div><div class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/mvc </span></span></div><div class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd"</span>&gt;</span>    </div><div class="line">    <span class="comment">&lt;!-- 默认的注解映射的支持 --&gt;</span> </div><div class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span> </div><div class="line">    <span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">"/resources/**"</span> <span class="attr">location</span>=<span class="string">"/resources/"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span> /&gt;</span> </div><div class="line">    <span class="comment">&lt;!-- 请求加上 请求头 然后还有请求尾  构成一个请求链接 --&gt;</span>  </div><div class="line">    <span class="comment">&lt;!-- 视图解释类 --&gt;</span> </div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"viewResolver"</span> </span></div><div class="line"><span class="tag">         <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span> </div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/html/"</span>/&gt;</span> </div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".html"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span> </div><div class="line">    <span class="comment">&lt;!-- 请求中对文件处理 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"multipartResolver"</span> </span></div><div class="line"><span class="tag">         <span class="attr">class</span>=<span class="string">"org.springframework.web.multipart.commons.CommonsMultipartResolver"</span>&gt;</span> </div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultEncoding"</span> <span class="attr">value</span>=<span class="string">"utf-8"</span>/&gt;</span> </div><div class="line">        <span class="comment">&lt;!-- 1024*1024*20 = 20M --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxUploadSize"</span> <span class="attr">value</span>=<span class="string">"20971520"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxInMemorySize"</span> <span class="attr">value</span>=<span class="string">"20971520"</span>/&gt;</span> </div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span> </div><div class="line">    </div><div class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.cumt.web"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="spring-service-xml"><a href="#spring-service-xml" class="headerlink" title="spring-service.xml"></a>spring-service.xml</h2><p>业务相关配置：</p>
<ol>
<li>扫描service相关的bean</li>
<li>配置事务管理器</li>
<li>配置基于注解的声明式事务；</li>
</ol>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span><span class="meta">?&gt;</span></span>  </div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span>  </span></div><div class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span>   </span></div><div class="line"><span class="tag">    <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span>  </span></div><div class="line"><span class="tag">    <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span>  </span></div><div class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans  </span></span></div><div class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/beans/spring-beans.xsd  </span></span></div><div class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/context  </span></span></div><div class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/context/spring-context.xsd  </span></span></div><div class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/tx  </span></span></div><div class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/tx/spring-tx.xsd"</span>&gt;</span>  </div><div class="line">    <span class="comment">&lt;!-- 扫描service包下所有使用注解的类型 --&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.cumt.service"</span> /&gt;</span>  </div><div class="line">  </div><div class="line">    <span class="comment">&lt;!-- 配置事务管理器 --&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span>  </span></div><div class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span>  </div><div class="line">        <span class="comment">&lt;!-- 注入数据库连接池 --&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</span>  </div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span>  </div><div class="line">  </div><div class="line">    <span class="comment">&lt;!-- 配置基于注解的声明式事务 --&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span> /&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="spring-dao-xml"><a href="#spring-dao-xml" class="headerlink" title="spring-dao.xml"></a>spring-dao.xml</h2><p>配置整合mybatis过程：</p>
<ol>
<li>配置数据库相关参数</li>
<li>配置数据库连接池</li>
<li>配置SqlSessionFactory对象</li>
<li>配置扫描Dao接口包，并注入</li>
</ol>
<figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="comment">&lt;!-- 1.配置数据库相关参数properties的属性：$</span></span><span class="template-variable">&#123;url&#125;</span><span class="xml"><span class="comment"> --&gt;</span></span></div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:jdbc.properties"</span>/&gt;</span></span></div><div class="line"><span class="xml"><span class="comment">&lt;!-- 2.数据库连接池 --&gt;</span></span></div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span></span></div><div class="line"><span class="xml">    <span class="comment">&lt;!-- 配置连接池属性 --&gt;</span></span></div><div class="line"><span class="xml">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;jdbc.driver&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> /&gt;</span></span></div><div class="line"><span class="xml">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;jdbc.url&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> /&gt;</span></span></div><div class="line"><span class="xml">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;jdbc.username&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> /&gt;</span></span></div><div class="line"><span class="xml">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;jdbc.password&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> /&gt;</span></span></div><div class="line"><span class="xml"></span></div><div class="line"><span class="xml">    <span class="comment">&lt;!-- c3p0连接池的私有属性 --&gt;</span></span></div><div class="line"><span class="xml">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxPoolSize"</span> <span class="attr">value</span>=<span class="string">"30"</span> /&gt;</span></span></div><div class="line"><span class="xml">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minPoolSize"</span> <span class="attr">value</span>=<span class="string">"10"</span> /&gt;</span></span></div><div class="line"><span class="xml">    <span class="comment">&lt;!-- 关闭连接后不自动commit --&gt;</span></span></div><div class="line"><span class="xml">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"autoCommitOnClose"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></span></div><div class="line"><span class="xml">    <span class="comment">&lt;!-- 获取连接超时时间 --&gt;</span></span></div><div class="line"><span class="xml">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"checkoutTimeout"</span> <span class="attr">value</span>=<span class="string">"10000"</span> /&gt;</span></span></div><div class="line"><span class="xml">    <span class="comment">&lt;!-- 当获取连接失败重试次数 --&gt;</span></span></div><div class="line"><span class="xml">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"acquireRetryAttempts"</span> <span class="attr">value</span>=<span class="string">"2"</span> /&gt;</span></span></div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></div><div class="line"><span class="xml"></span></div><div class="line"><span class="xml"><span class="comment">&lt;!-- 3.配置SqlSessionFactory对象 --&gt;</span></span></div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span></div><div class="line"><span class="xml">    <span class="comment">&lt;!-- 注入数据库连接池 --&gt;</span></span></div><div class="line"><span class="xml">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</span></span></div><div class="line"><span class="xml">    <span class="comment">&lt;!-- 配置MyBaties全局配置文件:mybatis-config.xml --&gt;</span></span></div><div class="line"><span class="xml">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:mybatis-config.xml"</span> /&gt;</span></span></div><div class="line"><span class="xml">    <span class="comment">&lt;!-- 扫描entity包 使用别名  ******这里记得修改********--&gt;</span></span></div><div class="line"><span class="xml">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"typeAliasesPackage"</span> <span class="attr">value</span>=<span class="string">"com.cumt.entity"</span> /&gt;</span></span></div><div class="line"><span class="xml">    <span class="comment">&lt;!-- 扫描sql配置文件:mapper需要的xml文件 --&gt;</span></span></div><div class="line"><span class="xml">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapperLocations"</span> <span class="attr">value</span>=<span class="string">"classpath:mapper/*.xml"</span> /&gt;</span></span></div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></div><div class="line"><span class="xml"></span></div><div class="line"><span class="xml"><span class="comment">&lt;!-- 4.配置扫描Dao接口包，动态实现Dao接口，注入到spring容器中 --&gt;</span></span></div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span></div><div class="line"><span class="xml">    <span class="comment">&lt;!-- 注入sqlSessionFactory --&gt;</span></span></div><div class="line"><span class="xml">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactoryBeanName"</span> <span class="attr">value</span>=<span class="string">"sqlSessionFactory"</span> /&gt;</span></span></div><div class="line"><span class="xml">    <span class="comment">&lt;!-- 给出需要扫描Dao接口包  *******这里也记得修改*********--&gt;</span></span></div><div class="line"><span class="xml">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"com.cumt.dao"</span> /&gt;</span></span></div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></div></pre></td></tr></table></figure>
<h2 id="mybatis-xml"><a href="#mybatis-xml" class="headerlink" title="mybatis.xml"></a>mybatis.xml</h2><p>配置整合mybatis过程：</p>
<ol>
<li>配置数据库相关参数</li>
<li>配置数据库连接池</li>
<li>配置SqlSessionFactory对象</li>
<li>配置扫描Dao接口包，并注入；</li>
</ol>
<figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span><span class="meta">?&gt;</span></span></span></div><div class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.0//EN"</span></span></div><div class="line"><span class="xml">"http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span></div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span></div><div class="line"><span class="xml">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span></div><div class="line"><span class="xml">     <span class="comment">&lt;!-- 使用jdbc获取自增主键值 --&gt;</span></span></div><div class="line"><span class="xml">     <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"useGeneratedKeys"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span> </span></div><div class="line"><span class="xml">     <span class="comment">&lt;!-- 列标签替换列别名 --&gt;</span></span></div><div class="line"><span class="xml">     <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"useColumnLabel"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span></div><div class="line"><span class="xml">     <span class="comment">&lt;!-- 驼峰命名转换  Table</span></span><span class="template-variable">&#123;create_time&#125;</span><span class="xml"><span class="comment"> -&gt; Entity</span></span><span class="template-variable">&#123;createTime&#125;</span><span class="xml"><span class="comment">--&gt;</span></span></div><div class="line"><span class="xml">     <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"mapUnderscoreToCamelCase"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span></div><div class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span></div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span></div></pre></td></tr></table></figure>
<h2 id="BaseTest测试配置"><a href="#BaseTest测试配置" class="headerlink" title="BaseTest测试配置"></a>BaseTest测试配置</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.cumt.dao;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 配置spring和junit整合，junit启动时加载springIOC</span></div><div class="line"><span class="comment"> */</span></div><div class="line"></div><div class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></div><div class="line"><span class="meta">@ContextConfiguration(&#123;<span class="meta-string">"classpath:spring/spring-dao.xml"</span>, <span class="meta-string">"classpath:spring/spring-service.xml"</span>&#125;)</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseTest</span> </span>&#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="资源下载"><a href="#资源下载" class="headerlink" title="资源下载"></a>资源下载</h1><blockquote>
<p>链接: <a href="https://pan.baidu.com/s/1htuUYqw" target="_blank" rel="external">https://pan.baidu.com/s/1htuUYqw</a> 密码: j1am<br>如果失效，请E-mail Me. 我看到会尽快给你新的地址</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      根据慕课网项目深入学习SSM和SpringBoot，练手中，将学习笔记做记录，后期会继续更新。
    
    </summary>
    
    
      <category term="project" scheme="http://www.draymonder.site/tags/project/"/>
    
      <category term="SSM" scheme="http://www.draymonder.site/tags/SSM/"/>
    
  </entry>
  
  <entry>
    <title>wireshark抓包分析报文</title>
    <link href="http://www.draymonder.site/network/wireshark/"/>
    <id>http://www.draymonder.site/network/wireshark/</id>
    <published>2018-06-28T15:00:00.000Z</published>
    <updated>2019-02-08T14:08:50.394Z</updated>
    
    <content type="html"><![CDATA[<h1 id="现行计算机网络体系结构"><a href="#现行计算机网络体系结构" class="headerlink" title="现行计算机网络体系结构"></a>现行计算机网络体系结构</h1><p>整个报文以太网协议(物理链路) -&gt; ip协议(网络) -&gt; tcp/udp(传输层) -&gt; 应用软件封装协议 (应用层) </p>
<h2 id="报文封装过程"><a href="#报文封装过程" class="headerlink" title="报文封装过程"></a>报文封装过程</h2><p><img src="https://s1.ax1x.com/2018/06/28/PigdXQ.jpg" alt="PigdXQ.jpg"></p>
<h2 id="物理链路层-以太网帧"><a href="#物理链路层-以太网帧" class="headerlink" title="物理链路层 以太网帧"></a>物理链路层 以太网帧</h2><p><img src="https://s1.ax1x.com/2018/06/28/PigD7n.jpg" alt="PigD7n.jpg"></p>
<h2 id="网络层-ip报头"><a href="#网络层-ip报头" class="headerlink" title="网络层 ip报头"></a>网络层 ip报头</h2><p><img src="https://s1.ax1x.com/2018/06/28/Pigskq.jpg" alt="Pigskq.jpg"></p>
<h2 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h2><h3 id="UDP报头"><a href="#UDP报头" class="headerlink" title="UDP报头"></a>UDP报头</h3><p><img src="https://s1.ax1x.com/2018/06/28/Piga6g.jpg" alt="Piga6g.jpg"></p>
<h3 id="TCP报头"><a href="#TCP报头" class="headerlink" title="TCP报头"></a>TCP报头</h3><p><img src="https://s1.ax1x.com/2018/06/28/Pig0mj.jpg" alt="Pig0mj.jpg"></p>
<h2 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h2><h3 id="Http"><a href="#Http" class="headerlink" title="Http"></a>Http</h3><h4 id="Request"><a href="#Request" class="headerlink" title="Request"></a>Request</h4><p><img src="https://s1.ax1x.com/2018/06/28/PiggpT.jpg" alt="PiggpT.jpg"></p>
<h4 id="Response"><a href="#Response" class="headerlink" title="Response"></a>Response</h4><p><img src="https://s1.ax1x.com/2018/06/28/Pig21U.png" alt="Pig21U.png"></p>
<h1 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h1><h2 id="http-Request"><a href="#http-Request" class="headerlink" title="http Request"></a>http Request</h2><p>请求消息<br><img src="https://s1.ax1x.com/2018/06/28/PigRcF.jpg" alt="PigRcF.jpg"><br>详细请求报文<br><br><img src="https://s1.ax1x.com/2018/06/28/Pigyt0.jpg" alt="Pigyt0.jpg"><br>因此分析如下</p>
<h3 id="以太网帧"><a href="#以太网帧" class="headerlink" title="以太网帧"></a>以太网帧</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">以太网 目的地<span class="selector-tag">Destination</span>: <span class="selector-tag">Shenzhen_12</span><span class="selector-pseudo">:af</span><span class="selector-pseudo">:04</span> (74<span class="selector-pseudo">:c3</span><span class="selector-pseudo">:30</span><span class="selector-pseudo">:12</span><span class="selector-pseudo">:af</span><span class="selector-pseudo">:04)</span></div><div class="line">以太网 源地址<span class="selector-tag">Source</span>: 46<span class="selector-pseudo">:34</span><span class="selector-pseudo">:57</span><span class="selector-pseudo">:62</span><span class="selector-pseudo">:57</span><span class="selector-pseudo">:96</span> (46<span class="selector-pseudo">:34</span><span class="selector-pseudo">:57</span><span class="selector-pseudo">:62</span><span class="selector-pseudo">:57</span><span class="selector-pseudo">:96)</span></div><div class="line">以太网 类型 <span class="selector-tag">Type</span>: <span class="selector-tag">IPv4</span> (0<span class="selector-tag">x0800</span>)</div></pre></td></tr></table></figure>
<h3 id="IP报文"><a href="#IP报文" class="headerlink" title="IP报文"></a>IP报文</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">ip报文Header Length: 20 bytes (5)</div><div class="line">ip 报文 总长度 Total Length: 495</div><div class="line">ip标识Identification: 0x5cbd (23741)</div><div class="line">ip 生存时间 Time <span class="keyword">to</span> live: 128</div><div class="line">ip 协议 Protocol: TCP (6)</div><div class="line">ip 源地址Source: 192.168.0.100</div><div class="line">ip 目的地址 Destination: 101.69.121.105</div></pre></td></tr></table></figure>
<h3 id="TCP报文"><a href="#TCP报文" class="headerlink" title="TCP报文"></a>TCP报文</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">tcp 源端口 Source <span class="string">Port:</span> <span class="number">21649</span></div><div class="line">tcp 目的端口Destination <span class="string">Port:</span> <span class="number">80</span></div><div class="line">tcp 确认号 Acknowledgment <span class="string">number:</span> <span class="number">1</span></div></pre></td></tr></table></figure>
<h3 id="http-请求"><a href="#http-请求" class="headerlink" title="http 请求"></a>http 请求</h3><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">http 请求方式Request <span class="function"><span class="keyword">Method</span>:</span> GET</div><div class="line">http 请求资源URL Request </div><div class="line">URI: /c_zoom,h_103/c_cut,x_0,y_0,w_155,h_103/os/news/c0a796c969d136b82e57427155</div><div class="line">f4a1d6.jpg </div><div class="line">http 版本 Request Version: HTTP/<span class="number">1.1</span></div><div class="line">http 请求主机 Host: <span class="number">29</span>e5534ea20a8.cdn.sohucs.com</div><div class="line">http 请求客户端信息 </div><div class="line">User-Agent: Mozilla/<span class="number">5.0</span> (Windows NT <span class="number">10.0</span>; Win64; x64) AppleWebKit/<span class="number">537.36</span> (KHTML, like Gecko) Chrome/<span class="number">67.0</span>.<span class="number">3396.99</span> Safari/<span class="number">537.36</span></div></pre></td></tr></table></figure>
<h2 id="http-Response"><a href="#http-Response" class="headerlink" title="http Response"></a>http Response</h2><p>响应消息<br><img src="https://s1.ax1x.com/2018/06/28/Pig6hV.jpg" alt="Pig6hV.jpg"><br>详细响应报文<br><br><img src="https://s1.ax1x.com/2018/06/28/PigWX4.png" alt="PigWX4.png"></p>
<h3 id="以太网帧-1"><a href="#以太网帧-1" class="headerlink" title="以太网帧"></a>以太网帧</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">以太网 目的地<span class="selector-tag">Destination</span>: 46<span class="selector-pseudo">:34</span><span class="selector-pseudo">:57</span><span class="selector-pseudo">:62</span><span class="selector-pseudo">:57</span><span class="selector-pseudo">:96</span> (46<span class="selector-pseudo">:34</span><span class="selector-pseudo">:57</span><span class="selector-pseudo">:62</span><span class="selector-pseudo">:57</span><span class="selector-pseudo">:96)</span></div><div class="line">以太网 源地址<span class="selector-tag">Source</span>: <span class="selector-tag">Shenzhen_12</span><span class="selector-pseudo">:af</span><span class="selector-pseudo">:04</span> (74<span class="selector-pseudo">:c3</span><span class="selector-pseudo">:30</span><span class="selector-pseudo">:12</span><span class="selector-pseudo">:af</span><span class="selector-pseudo">:04)</span></div><div class="line">以太网 类型 <span class="selector-tag">Type</span>: <span class="selector-tag">IPv4</span> (0<span class="selector-tag">x0800</span>)</div></pre></td></tr></table></figure>
<h3 id="IP报文-1"><a href="#IP报文-1" class="headerlink" title="IP报文"></a>IP报文</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">ip报文Header Length: 20 bytes (5)</div><div class="line">ip 报文 总长度 Total Length: 457</div><div class="line">ip标识Identification: 0xfe19 (65049)</div><div class="line">ip 生存时间 Time <span class="keyword">to</span> live: 56</div><div class="line">ip 协议 Protocol: TCP (6)</div><div class="line">ip 源地址Source: 101.69.121.105</div><div class="line">ip 目的地址 Destination: 192.168.0.100</div></pre></td></tr></table></figure>
<h3 id="TCP报文-1"><a href="#TCP报文-1" class="headerlink" title="TCP报文"></a>TCP报文</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">tcp 源端口 Source <span class="string">Port:</span> <span class="number">80</span></div><div class="line">tcp 目的端口Destination <span class="string">Port:</span> <span class="number">21649</span></div><div class="line">tcp 确认号 Sequence <span class="string">number:</span> <span class="number">27361</span></div></pre></td></tr></table></figure>
<h3 id="http-响应"><a href="#http-响应" class="headerlink" title="http 响应"></a>http 响应</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">http 版本 Request <span class="string">Version:</span> HTTP/<span class="number">1.1</span></div><div class="line">http 响应码 Status <span class="string">Code:</span> <span class="number">200</span>  </div><div class="line">http 响应码描述 [Status Code <span class="string">Description:</span> OK] (表示请求已成功，请求所希望的响应头或数据体将随此响应返回) </div><div class="line">http 文件类型 Content-<span class="string">Type:</span> image/jpeg (jpeg格式的图片字节流文件)</div><div class="line">http 文件长度 Content-<span class="string">Length:</span> <span class="number">27284</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      wireshark抓包分析http报文
    
    </summary>
    
    
      <category term="计算机网络" scheme="http://www.draymonder.site/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>Jsp中导入类出错</title>
    <link href="http://www.draymonder.site/backend/java/javaweb/java-importClassError/"/>
    <id>http://www.draymonder.site/backend/java/javaweb/java-importClassError/</id>
    <published>2018-06-25T13:00:00.000Z</published>
    <updated>2019-02-08T14:27:03.118Z</updated>
    
    <content type="html"><![CDATA[<h1 id="出错方式"><a href="#出错方式" class="headerlink" title="出错方式"></a>出错方式</h1><p>显示cannot be resolved to a type<br><img src="https://s1.ax1x.com/2018/06/25/PCwcYd.png" alt="PCwcYd.png"> </p>
<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>接着把tomcat,jdk重装了一下，还是不行；然后发现没有编译成相应的<code>.class</code>文件，发现这个问题后，继续搜索，发现<code>Eclipse</code>没能自动编译，接着困扰了5个小时的问题就找到了解决方法<br><img src="https://s1.ax1x.com/2018/06/25/PCwf6P.jpg" alt="PCwf6P.jpg"><br>是的，就是没有开 build automatically</p>
]]></content>
    
    <summary type="html">
    
      Jsp中导入类出错
    
    </summary>
    
    
      <category term="JavaWeb" scheme="http://www.draymonder.site/tags/JavaWeb/"/>
    
  </entry>
  
  <entry>
    <title>Java Web中实现Servlet的方式</title>
    <link href="http://www.draymonder.site/backend/java/javaweb/javaweb-servlet/"/>
    <id>http://www.draymonder.site/backend/java/javaweb/javaweb-servlet/</id>
    <published>2018-06-25T09:00:00.000Z</published>
    <updated>2019-02-08T14:27:08.253Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Servlet是什么"><a href="#Servlet是什么" class="headerlink" title="Servlet是什么?"></a>Servlet是什么?</h1><p>Servlet是Java Web三大组件之一，它属于动态资源。Servlet的作用是处理请求，服务器会把接收到的请求交给Servlet来处理，在Servlet中通常需要:</p>
<ul>
<li>接受数据请求</li>
<li>处理请求</li>
<li>完成响应</li>
</ul>
<h1 id="实现Servlet的方式"><a href="#实现Servlet的方式" class="headerlink" title="实现Servlet的方式"></a>实现Servlet的方式</h1><ul>
<li>实现javax.servlet.Servlet接口</li>
<li>继承javax.servlet.GenericServlet类</li>
<li>继承javax.servlet.http.HttpServlet类</li>
</ul>
<h1 id="什么是域对象"><a href="#什么是域对象" class="headerlink" title="什么是域对象?"></a>什么是域对象?</h1><p>域对象所具有的特点是:</p>
<ul>
<li>能够存数据 setAttribute()</li>
<li>能够取数据 getAttribute()</li>
</ul>
<h2 id="JavaWeb-四大域对象"><a href="#JavaWeb-四大域对象" class="headerlink" title="JavaWeb 四大域对象"></a>JavaWeb 四大域对象</h2><ul>
<li>PageContext</li>
<li>ServletRequest</li>
<li>HttpSession</li>
<li>ServletContext<h2 id="Servlet类-三大域对象"><a href="#Servlet类-三大域对象" class="headerlink" title="Servlet类 三大域对象"></a>Servlet类 三大域对象</h2></li>
<li>request</li>
<li>session</li>
<li>application</li>
</ul>
<h1 id="参考博文"><a href="#参考博文" class="headerlink" title="参考博文"></a>参考博文</h1><p><a href="http://codingxiaxw.cn/2016/09/24/6-java-web%E5%AE%9E%E7%8E%B0Servlet%E7%9A%84%E6%96%B9%E5%BC%8F/" target="_blank" rel="external">Java Web中实现Servlet的方式</a></p>
<p><a href="https://blog.csdn.net/BeauXie/article/details/52280165" target="_blank" rel="external">JavaWeb的四大域对象总结</a></p>
]]></content>
    
    <summary type="html">
    
      Java Web中实现Servlet的方式
    
    </summary>
    
    
      <category term="JavaWeb" scheme="http://www.draymonder.site/tags/JavaWeb/"/>
    
  </entry>
  
  <entry>
    <title>JavaSE 重拾基础</title>
    <link href="http://www.draymonder.site/backend/java/javase/javase-practice/"/>
    <id>http://www.draymonder.site/backend/java/javase/javase-practice/</id>
    <published>2018-06-23T15:00:00.000Z</published>
    <updated>2018-07-25T02:05:46.281Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础巩固"><a href="#基础巩固" class="headerlink" title="基础巩固"></a>基础巩固</h1><ul>
<li>变量</li>
<li>操作符</li>
<li>条件判断及循环</li>
<li>数组</li>
</ul>
<h1 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h1><p><a href="https://www.cnblogs.com/happyzm/p/6482886.html" target="_blank" rel="external">JUnit</a></p>
<h1 id="String-方法"><a href="#String-方法" class="headerlink" title="String 方法"></a>String 方法</h1><h2 id="split"><a href="#split" class="headerlink" title="split"></a>split</h2><figure class="highlight excel"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">public String[] split(String regex,</div><div class="line">                      <span class="built_in">int</span> limit)</div><div class="line">根据匹配给定的正则表达式来拆分此字符串</div><div class="line">limit 参数控制模式应用的次数，因此影响所得数组的长度。</div><div class="line">如果该限制 <span class="built_in">n</span> 大于 <span class="number">0</span>，则模式将被最多应用 <span class="built_in">n</span> - <span class="number">1</span> 次，数组的长度将不会大于 <span class="built_in">n</span>，</div><div class="line">    而且数组的最后一项将包含所有超出最后匹配的定界符的输入。</div><div class="line">如果 <span class="built_in">n</span> 为非正，那么模式将被应用尽可能多的次数，而且数组可以是任何长度。</div><div class="line">如果 <span class="built_in">n</span> 为 <span class="number">0</span>，那么模式将被应用尽可能多的次数，数组可以是任何长度，并且结尾空字符串将被丢弃。</div></pre></td></tr></table></figure>
<h1 id="Java中使用Arrays-Sort-方法"><a href="#Java中使用Arrays-Sort-方法" class="headerlink" title="Java中使用Arrays.Sort()方法"></a>Java中使用Arrays.Sort()方法</h1><p>下面的代码中包含了内部类的创建方法<br>还有内部类数组的初始化<br>另外还有对内部类数组的排序<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.Arrays;</div><div class="line"></div><div class="line"><span class="comment">//创建内部类 并且实例化</span></div><div class="line"><span class="keyword">import</span> java.util.Arrays;</div><div class="line"><span class="keyword">import</span> java.util.Comparator;</div><div class="line"></div><div class="line"><span class="comment">//创建内部类 并且实例化</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> Out &#123;</div><div class="line">	<span class="keyword">class</span> In <span class="keyword">implements</span> Comparable &#123;</div><div class="line">		<span class="keyword">int</span> <span class="keyword">size</span>;</div><div class="line"></div><div class="line">		In() &#123;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">public</span> In(<span class="keyword">int</span> <span class="keyword">size</span>) &#123;</div><div class="line">			<span class="keyword">this</span>.<span class="keyword">size</span> = <span class="keyword">size</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		@Override</div><div class="line">		<span class="keyword">public</span> <span class="keyword">int</span> <span class="keyword">compareTo</span>(Object o) &#123;</div><div class="line">			<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">			In other = (In) o;</div><div class="line">			<span class="keyword">if</span> (<span class="keyword">this</span>.<span class="keyword">size</span> &lt; other.<span class="keyword">size</span>)</div><div class="line">				<span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.<span class="keyword">size</span> == other.<span class="keyword">size</span>)</div><div class="line">				<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">			<span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> In[] getInArray(<span class="keyword">int</span> <span class="keyword">size</span>) &#123;</div><div class="line">		In[] ins = <span class="keyword">new</span> In[<span class="number">5</span>];</div><div class="line">		Out out = <span class="keyword">new</span> Out();</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ins.length; i++) &#123;</div><div class="line">			ins[i] = out.<span class="keyword">new</span> In(<span class="number">0</span>);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> ins;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) &#123;</div><div class="line">		In[] ins = getInArray(<span class="number">5</span>);</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ins.length; i++) &#123;</div><div class="line">			ins[i].<span class="keyword">size</span> = <span class="number">5</span> - i;</div><div class="line">		&#125;</div><div class="line">		<span class="comment">//第一种方法</span></div><div class="line">		Arrays.<span class="keyword">sort</span>(ins);</div><div class="line">		<span class="comment">//第二种方法</span></div><div class="line">		Arrays.<span class="keyword">sort</span>(ins, <span class="keyword">new</span> Comparator&lt;In&gt;() &#123;</div><div class="line">			@Override</div><div class="line">			<span class="keyword">public</span> <span class="keyword">int</span> compare(In o1, In o2) &#123;</div><div class="line">				<span class="keyword">if</span> (o1.<span class="keyword">size</span> &lt; o2.<span class="keyword">size</span>)</div><div class="line">					<span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">				<span class="keyword">if</span> (o1.<span class="keyword">size</span> == o2.<span class="keyword">size</span>)</div><div class="line">					<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">				<span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;);</div><div class="line">		<span class="keyword">for</span> (In in : ins) &#123;</div><div class="line">			System.out.<span class="keyword">println</span>(in.<span class="keyword">size</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="Java中-compareTo方法的返回值问题"><a href="#Java中-compareTo方法的返回值问题" class="headerlink" title="Java中 compareTo方法的返回值问题"></a>Java中 compareTo方法的返回值问题</h1><ul>
<li>java compareTo方法 返回值</li>
</ul>
<p>总共有三个返回值 0 -1 1</p>
<p>这三个数字代表的含义。它们不是代表数字而是代表前面和后面要比较的值哪个大哪个小？如果是0表示要比较的这两个数字相等。如果是1表示前面数字大，如果-1表示前面数字小。要理解这个就没问题了。</p>
<ul>
<li>C++ cmp函数 返回值</li>
</ul>
<p>然后和C++相比的是<code>cmp</code>函数只有 true 和 false 两个值</p>
<p>true 代表前面的小于后面的<br>false 代表前面的大于后面的 </p>
]]></content>
    
    <summary type="html">
    
      自己动手写一些JavaSE的代码，熟练API，巩固基础，待更新~
    
    </summary>
    
    
      <category term="JavaSE" scheme="http://www.draymonder.site/tags/JavaSE/"/>
    
  </entry>
  
  <entry>
    <title>剑指offer 用两个栈实现队列</title>
    <link href="http://www.draymonder.site/algorithm/twoStackToQueue/"/>
    <id>http://www.draymonder.site/algorithm/twoStackToQueue/</id>
    <published>2018-06-23T07:00:00.000Z</published>
    <updated>2018-06-23T06:33:04.416Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.nowcoder.com/practice/54275ddae22f475981afa2244dd448c6?tpId=13&amp;tqId=11158&amp;tPage=1&amp;rp=1&amp;ru=/ta/coding-interviews&amp;qru=/ta/coding-interviews/question-ranking" target="_blank" rel="external">题目链接</a></p>
<p>每次push的时候 就从stack2取回数据到stack1 然后push(val)<br>每次pop的时候  就从stack1取回数据到stack2 然后pop<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution</div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="keyword">void</span> <span class="keyword">push</span>(<span class="keyword">int</span> node) &#123;</div><div class="line">       <span class="keyword">while</span>(stack2.<span class="keyword">size</span>()) &#123;</div><div class="line">           <span class="keyword">int</span> ans = stack2.top();</div><div class="line">            stack1.<span class="keyword">push</span>(ans);</div><div class="line">            stack2.<span class="keyword">pop</span>();</div><div class="line">       &#125;</div><div class="line">       stack1.<span class="keyword">push</span>(node); </div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> <span class="keyword">pop</span>() &#123;</div><div class="line">        <span class="keyword">while</span> (stack1.<span class="keyword">size</span>()) &#123;</div><div class="line">            <span class="keyword">int</span> ans = stack1.top();</div><div class="line">            stack2.<span class="keyword">push</span>(ans);</div><div class="line">            stack1.<span class="keyword">pop</span>();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(stack2.<span class="keyword">size</span>() ==<span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">NULL</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> ans = stack2.top();</div><div class="line">        stack2.<span class="keyword">pop</span>();</div><div class="line">        <span class="keyword">return</span> ans;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="keyword">private</span>:</div><div class="line">    stack&lt;<span class="keyword">int</span>&gt; stack1;</div><div class="line">    stack&lt;<span class="keyword">int</span>&gt; stack2;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      剑指offer 用两个栈实现队列
    
    </summary>
    
    
      <category term="Algorithm" scheme="http://www.draymonder.site/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>剑指offer 重建二叉树</title>
    <link href="http://www.draymonder.site/algorithm/reBuildBinaryTree/"/>
    <id>http://www.draymonder.site/algorithm/reBuildBinaryTree/</id>
    <published>2018-06-23T07:00:00.000Z</published>
    <updated>2018-06-23T06:06:32.953Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.nowcoder.com/practice/8a19cbe657394eeaac2f6ea9b0f6fcf6?tpId=13&amp;tqId=11157&amp;tPage=1&amp;rp=1&amp;ru=/ta/coding-interviews&amp;qru=/ta/coding-interviews/question-ranking" target="_blank" rel="external">题目链接</a></p>
<p>利用递归 不断重构出左儿子和右儿子<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Definition for binary tree</span></div><div class="line"><span class="comment"> * struct TreeNode &#123;</span></div><div class="line"><span class="comment"> *     int val;</span></div><div class="line"><span class="comment"> *     TreeNode *left;</span></div><div class="line"><span class="comment"> *     TreeNode *right;</span></div><div class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></div><div class="line"><span class="comment"> * &#125;;</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="comment">//@param 先序遍历，start，end，中序遍历，start，end</span></div><div class="line">    <span class="function">TreeNode* <span class="title">buildBinaryTree</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; pre, <span class="keyword">int</span> st1, <span class="keyword">int</span> ed1,</span></span></div><div class="line"><span class="function"><span class="params">                                   <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vin, <span class="keyword">int</span> st2, <span class="keyword">int</span> ed2)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(st1 &gt; ed1 || st2 &gt; ed2) <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">        TreeNode *root = <span class="keyword">new</span> TreeNode(pre[st1]);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=st2; i&lt;=ed2; i++) &#123;</div><div class="line">            <span class="keyword">if</span>(vin[i] == pre[st1]) &#123;</div><div class="line">                root-&gt;left = buildBinaryTree(pre, st1+<span class="number">1</span>, st1+i-st2, vin, st2, i<span class="number">-1</span>);</div><div class="line">                root-&gt;right = buildBinaryTree(pre, st1+i-st2+<span class="number">1</span>, ed1, vin, i+<span class="number">1</span>,ed2);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> root;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function">TreeNode* <span class="title">reConstructBinaryTree</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; pre,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vin)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(pre.size() == <span class="number">0</span> &amp;&amp; vin.size() ==<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">        <span class="keyword">if</span>(pre.size() != vin.size()) <span class="keyword">return</span> <span class="literal">NULL</span>;    </div><div class="line">        <span class="keyword">return</span> buildBinaryTree(pre, <span class="number">0</span>, pre.size()<span class="number">-1</span>, vin, <span class="number">0</span>, vin.size()<span class="number">-1</span>);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      给出先序和中序遍历，还原原来的二叉树
    
    </summary>
    
    
      <category term="Algorithm" scheme="http://www.draymonder.site/tags/Algorithm/"/>
    
      <category term="BinaryTree" scheme="http://www.draymonder.site/tags/BinaryTree/"/>
    
  </entry>
  
  <entry>
    <title>Jdbc入门学习</title>
    <link href="http://www.draymonder.site/backend/java/javaweb/jdbc-init/"/>
    <id>http://www.draymonder.site/backend/java/javaweb/jdbc-init/</id>
    <published>2018-06-14T15:00:00.000Z</published>
    <updated>2019-02-08T14:27:14.069Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MySQL的Driver下载及导入"><a href="#MySQL的Driver下载及导入" class="headerlink" title="MySQL的Driver下载及导入"></a>MySQL的Driver下载及导入</h1><h2 id="Driver下载"><a href="#Driver下载" class="headerlink" title="Driver下载"></a>Driver下载</h2><p>点击<a href="https://dev.mysql.com/downloads/connector/j/" target="_blank" rel="external">下载链接</a>，进行下载<br><br><img src="https://s1.ax1x.com/2018/06/24/P9WZEq.jpg" alt="P9WZEq.jpg"></p>
<h2 id="创建Floder"><a href="#创建Floder" class="headerlink" title="创建Floder"></a>创建Floder</h2><p>创建Floder并命名<br><br><img src="https://s1.ax1x.com/2018/06/24/P9WeU0.jpg" alt="P9WeU0.jpg"><br><img src="https://s1.ax1x.com/2018/06/24/P9WADs.jpg" alt="P9WADs.jpg"></p>
<h2 id="build-Path"><a href="#build-Path" class="headerlink" title="build Path"></a>build Path</h2><p>将jar拖入lib中,并右键build path<br><br><img src="https://s1.ax1x.com/2018/06/24/P9WEbn.jpg" alt="P9WEbn.jpg"></p>
<h1 id="定义学生类"><a href="#定义学生类" class="headerlink" title="定义学生类"></a>定义学生类</h1><p>为了方便操作，定义了学生类<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">package jdbc;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> Student &#123;</div><div class="line">	<span class="keyword">private</span> <span class="built_in">String</span> Id;</div><div class="line">	<span class="keyword">private</span> <span class="built_in">String</span> Name;</div><div class="line">	<span class="keyword">private</span> <span class="built_in">String</span> Sex;</div><div class="line">	<span class="keyword">private</span> <span class="built_in">String</span> Age;</div><div class="line">	Student(<span class="built_in">String</span> Name, <span class="built_in">String</span> Sex, <span class="built_in">String</span> Age) &#123;</div><div class="line">		<span class="keyword">this</span>.Age = Age;</div><div class="line">		<span class="keyword">this</span>.Sex = Sex;</div><div class="line">		<span class="keyword">this</span>.Name = Name;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">public</span> <span class="built_in">String</span> getId() &#123;</div><div class="line">		<span class="keyword">return</span> Id;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">public</span> <span class="built_in">void</span> setId(<span class="built_in">String</span> id) &#123;</div><div class="line">		Id = id;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">public</span> <span class="built_in">String</span> getName() &#123;</div><div class="line">		<span class="keyword">return</span> Name;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">public</span> <span class="built_in">void</span> setName(<span class="built_in">String</span> name) &#123;</div><div class="line">		Name = name;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">public</span> <span class="built_in">String</span> getSex() &#123;</div><div class="line">		<span class="keyword">return</span> Sex;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">public</span> <span class="built_in">void</span> setSex(<span class="built_in">String</span> sex) &#123;</div><div class="line">		Sex = sex;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">public</span> <span class="built_in">String</span> getAge() &#123;</div><div class="line">		<span class="keyword">return</span> Age;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">public</span> <span class="built_in">void</span> setAge(<span class="built_in">String</span> age) &#123;</div><div class="line">		Age = age;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="keyword">public</span> <span class="built_in">String</span> toString() &#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"Name:"</span> + Name + <span class="string">" Sex:"</span> + Sex + <span class="string">" Age:"</span> + Age +<span class="string">"\n"</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="Jdbc工具类"><a href="#Jdbc工具类" class="headerlink" title="Jdbc工具类"></a>Jdbc工具类</h1><figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">String</span> user = <span class="string">"root"</span>;</div><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">String</span> pwd = <span class="string">"root"</span>;</div><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">String</span> url = <span class="string">"jdbc:mysql://localhost:3306/draymonder?useUnicode=true&amp;&amp;characterEncoding=utf-8&amp;serverTimezone=UTC"</span>;</div><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">String</span> className = <span class="string">"com.mysql.cj.jdbc.Driver"</span>;</div><div class="line">Connection conn = <span class="keyword">null</span>;</div><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> accessMySQL()&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        Class.forName(className);</div><div class="line">        System.out.<span class="built_in">println</span>(<span class="string">"---加载驱动类成功---"</span>);</div><div class="line">        conn = DriverManager.getConnection(url,user,pwd);</div><div class="line">        System.out.<span class="built_in">println</span>(<span class="string">"---链接数据库成功---"</span>);</div><div class="line">        Statement stmt = conn.createStatement();</div><div class="line">        <span class="keyword">String</span> sql = <span class="string">"select name,sex,age from stu"</span>;</div><div class="line">        ResultSet res = stmt.executeQuery(sql);</div><div class="line">        <span class="keyword">while</span> (res.next()) &#123;</div><div class="line">            <span class="keyword">String</span> name = res.getString(<span class="string">"name"</span>);</div><div class="line">            <span class="keyword">String</span> sex = res.getString(<span class="string">"sex"</span>);</div><div class="line">            <span class="keyword">String</span> age = res.getString(<span class="string">"age"</span>);</div><div class="line">            Student stu = <span class="keyword">new</span> Student(name, sex, age);</div><div class="line">            System.out.<span class="built_in">println</span>(stu);</div><div class="line">        &#125;</div><div class="line">        res.close();</div><div class="line">        stmt.close();</div><div class="line">        conn.close();</div><div class="line">    &#125;<span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Jdbc入门学习记录
    
    </summary>
    
    
      <category term="JavaWeb" scheme="http://www.draymonder.site/tags/JavaWeb/"/>
    
  </entry>
  
  <entry>
    <title>20岁的感想</title>
    <link href="http://www.draymonder.site/diary/the-20years/"/>
    <id>http://www.draymonder.site/diary/the-20years/</id>
    <published>2018-06-13T16:00:00.000Z</published>
    <updated>2018-06-21T14:15:18.621Z</updated>
    
    <content type="html"><![CDATA[<h1 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h1><p>  20岁说来就来了，时间真的是个无情的东西呢，悄无声息，又无处可拦。<br><br>  终于没能实现自己的目标，没能变成自己想要的样子。<br><br>  终日沉浸在鸡汤中，始终没有大的改变。<br></p>
<p>  或许，我一开始的动机，已经成为此刻阻碍我前进的拦路虎。<br><br>  或许，我可以尝试着慢下来自己前进的脚步。<br><br>  此处，风景独好，为何偏要欣赏他处美景。<br></p>
<p>  让自己慢下来，让自己学有所获，让自己踏实，而不是流于形式。<br><br>  请从此刻开始去追寻自己内心中真正的挚热，而绝非要人云亦云，在追寻梦想的道路上，人云亦云将会是你最大的敌人<br><br>  O ever youthful, O ever weeping<br><br>  <img src="https://s1.ax1x.com/2018/06/13/CXMuQS.jpg" alt="永远年轻，永远热泪盈眶"><br>  <img src="https://s1.ax1x.com/2018/06/13/CXMKsg.jpg" alt="聊天记录"><br>  端午回家以后一些新的感想<br><br>  我是家里的宝贝，我是独一无二的我，因为没有达到自己的目标就放弃自己的人，那是真正的懦弱<br><br>  人生漫漫路，不在意彼时的得失，朝着自己的方向，静心修养。<br><br>  愿你不负来路，不畏前程<br></p>
]]></content>
    
    <summary type="html">
    
      20岁~ 迷茫与理想相交织
    
    </summary>
    
    
      <category term="Diary" scheme="http://www.draymonder.site/tags/Diary/"/>
    
  </entry>
  
  <entry>
    <title>二叉树打印</title>
    <link href="http://www.draymonder.site/algorithm/BinaryTreeBFS/"/>
    <id>http://www.draymonder.site/algorithm/BinaryTreeBFS/</id>
    <published>2018-06-05T14:00:00.000Z</published>
    <updated>2018-06-05T12:46:00.656Z</updated>
    
    <content type="html"><![CDATA[<h1 id="二叉树打印"><a href="#二叉树打印" class="headerlink" title="二叉树打印"></a>二叉树打印</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目:"></a>题目:</h2><p>有一棵二叉树，请设计一个算法，按照层次打印这棵二叉树。</p>
<p>给定二叉树的根结点root，请返回打印结果，结果按照每一层一个数组进行储存，所有数组的顺序按照层数从上往下，且每一层的数组内元素按照从左往右排列。保证结点数小于等于500。</p>
<hr>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><pre><code>用nlast记录当前访问的节点
用last记录每层的最后一个点(初始化为root)
然后用队列BFS,每访问一个节点就用新的节点更新nlast
每当遇到 last以后 就更新 last=nlast
</code></pre><hr>
<h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">  * 二叉树层序打印</span></div><div class="line"><span class="comment">  * source : https://www.nowcoder.com/courses/1/1/2</span></div><div class="line"><span class="comment">  */</span></div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">struct TreeNode &#123;</span></div><div class="line"><span class="comment">    int val;</span></div><div class="line"><span class="comment">    struct TreeNode *left;</span></div><div class="line"><span class="comment">    struct TreeNode *right;</span></div><div class="line"><span class="comment">    TreeNode(int x) :</span></div><div class="line"><span class="comment">            val(x), left(NULL), right(NULL) &#123;</span></div><div class="line"><span class="comment">    &#125;</span></div><div class="line"><span class="comment">&#125;;*/</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreePrinter</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; printTree(TreeNode* root) &#123;</div><div class="line">        <span class="comment">// write code here</span></div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; res;</div><div class="line">        <span class="keyword">if</span>(root == <span class="literal">NULL</span>) <span class="keyword">return</span> res;</div><div class="line">        <span class="built_in">queue</span>&lt;TreeNode*&gt; q;</div><div class="line">        q.push(root);</div><div class="line">        TreeNode* nlast = root, *last = root;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; row;</div><div class="line">        <span class="keyword">while</span> (q.size()) &#123;</div><div class="line">            TreeNode * ans = q.front();</div><div class="line">            q.pop();</div><div class="line">            <span class="keyword">if</span>(ans-&gt;left != <span class="literal">NULL</span>) &#123;</div><div class="line">                q.push(ans-&gt;left);</div><div class="line">                nlast = ans-&gt;left;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(ans-&gt;right != <span class="literal">NULL</span>) &#123;</div><div class="line">                q.push(ans-&gt;right);</div><div class="line">                nlast = ans-&gt;right;</div><div class="line">            &#125;</div><div class="line">            row.push_back(ans-&gt;val);</div><div class="line">            <span class="keyword">if</span>(ans == last) &#123;</div><div class="line">                res.push_back(row);</div><div class="line">                row.clear();</div><div class="line">                last = nlast;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<hr>
]]></content>
    
    <summary type="html">
    
      二叉树打印
    
    </summary>
    
    
      <category term="Algorithm" scheme="http://www.draymonder.site/tags/Algorithm/"/>
    
      <category term="BinaryTree" scheme="http://www.draymonder.site/tags/BinaryTree/"/>
    
  </entry>
  
</feed>
