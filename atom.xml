<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Draymonder&#39;s Blog</title>
  <subtitle>梦在远方</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://draymonder.me/"/>
  <updated>2018-04-24T13:38:56.272Z</updated>
  <id>http://draymonder.me/</id>
  
  <author>
    <name>Draymonder</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>刷题小计</title>
    <link href="http://draymonder.me/2018/09/01/51nod-fourth-Level/"/>
    <id>http://draymonder.me/2018/09/01/51nod-fourth-Level/</id>
    <published>2018-09-01T09:00:00.000Z</published>
    <updated>2018-04-24T13:38:56.272Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>  感觉自己确实还不够踏实，一直在做水题，没有什么突破。 所以以后尽量每天一道四级题。<br>  重在记录自己做题时候的思路。</p>
<h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="基础算法"><a href="#基础算法" class="headerlink" title="基础算法"></a>基础算法</h2><h2 id="51nod"><a href="#51nod" class="headerlink" title="51nod"></a>51nod</h2><h3 id="1051-最大子矩阵和"><a href="#1051-最大子矩阵和" class="headerlink" title="1051 最大子矩阵和"></a>1051 最大子矩阵和</h3><p>题意：<br>给一个矩阵，求子矩阵的和最大的数<br>思路：<br>类似<code>最大字段和</code>，给定第i行和第j行 然后用sum数组记录每列的前缀和。<br>接着第i行到第j行的每列求和，从第1列到第m列作最大字段和处理</p>
<h3 id="1086-背包问题-V2"><a href="#1086-背包问题-V2" class="headerlink" title="1086 背包问题 V2"></a>1086 背包问题 V2</h3><p>题意：<br>给n个物品，背包最大为W 给出n个物品的体积，数量，价值<br>思路：<br>如果第i个物品 体积x数量 &gt; W 那说明这个物品足够，可以用完全背包处理，不需要考虑数量问题<br>否则 就按照 01背包处理(二进制优化一下更好的吧)</p>
<h3 id="1151-回文串划分"><a href="#1151-回文串划分" class="headerlink" title="1151 回文串划分"></a>1151 回文串划分</h3><p>题意：<br>给一个字符串，求字符串最少可以被划分为多少个回文串<br>思路：<br>dp[i]表示以i为结尾的最小字符串划分<br><code>dp[i] = min(dp[i],dp[j-1]+1) (j &lt; i 且字符串从j到i是个回文串)</code></p>
<h3 id="1021-石子归并"><a href="#1021-石子归并" class="headerlink" title="1021 石子归并"></a>1021 石子归并</h3><p>题意：<br>N堆石子每次只能选相邻的2堆石子合并成新的一堆，并将新的一堆石子数记为该次合并的代价。计算将N堆石子合并成一堆的最小代价<br>思路：<br>dp[i][i]表示一个石子堆，不需要代价。<br>然后枚举长度，枚举起点i，终点j由起点+长度计算，<br>接着枚举[i,j)中的每一个k 使得<br><code>dp[i][j] = min(dp[i][j], dp[i][k]+dp[k+1][j]+sum[j]-sum[i-1]);</code></p>
<h2 id="codeforces"><a href="#codeforces" class="headerlink" title="codeforces"></a>codeforces</h2><h3 id="Mike-and-Feet-305-div2-D"><a href="#Mike-and-Feet-305-div2-D" class="headerlink" title="Mike and Feet (#305 div2 D)"></a>Mike and Feet (#305 div2 D)</h3><p>题意：<br>给你n个数，一个长为x的连续序列的强度是其中最小的数，然后分别求出长度为1-n的最大的强度<br>思路：<br><code>单调栈</code>,维护一个单调递增栈（从栈底到栈顶单调递增），存每个点的他的值和贡献的长度</p>
<h2 id="挑战"><a href="#挑战" class="headerlink" title="挑战"></a>挑战</h2><h3 id="POJ-3061-尺取法"><a href="#POJ-3061-尺取法" class="headerlink" title="POJ 3061(尺取法)"></a>POJ 3061(尺取法)</h3><p>题意：<br>长度n的数列(元素均大于0) 以及 S 求总和不小于S的连续子序列的长度的最小值。<br>思路：<br>对于As开始总和最初大于S时的连续子序列<code>As+...+At</code><br>必定 <code>As+1+...+At-1 &lt; As+...+At-1 &lt; S</code>,<br>所以只要找到As开始,At结尾的连续子序列和&gt;S,As+1开始的连续子序列和&gt;S的结尾必定是At及At的以后，不能是之前</p>
<h3 id="反转-开关问题"><a href="#反转-开关问题" class="headerlink" title="反转(开关问题)"></a>反转(开关问题)</h3><p>题意：<br>N头牛排成一列，每头牛或者向前或者向后。 求为了让所有的牛都能面向前方需要的最少操作的次数M和对应的区间操作长度K<br>思路：<br>枚举每个K，然后对每个相应的区间进行反转，复杂度O(n3)，会T，然后针对区间反转，可以利用dp[N]表示 [i,i+k-1]这个区间是否被反转，反转为1  所以对于相应的i，只需要判断<code>dp[i-k+1]+...dp[i-1]+dir[i]</code>是否为0，如果为0，需要反转。<br>最后判断[n-k+1,n)的区间里面是否所有的数都不需要反转就可以了</p>
<h2 id="上海金马五校赛"><a href="#上海金马五校赛" class="headerlink" title="上海金马五校赛"></a>上海金马五校赛</h2><h3 id="Wasserstein-Distance"><a href="#Wasserstein-Distance" class="headerlink" title="Wasserstein Distance"></a>Wasserstein Distance</h3><p>题意：<br>有两堆泥土，每一堆有n个位置，第一堆泥土的第i个位置有ai克泥土，第二堆泥土的第i个位置有bi克泥土。小埃可以在第一堆泥土中任意移挪动泥土，具体地从第i个位置移动k克泥土到第j个位置，但是会消耗 <code>k*|i-j|</code> 的体力。小埃的最终目的是通过在第一堆中挪动泥土，使得第一堆泥土最终的形态和第二堆相同，也就是ai=bi (1&lt;=i&lt;=n), 但是要求所花费的体力最小<br>思路：<br>贪心的处理，使得每临近的位置互相交换泥土(这样是局部最优解，但不知道怎么也是全局最优解)然后遍历一遍数组用ans加和|Ai-Bi|，并更新Ai+1加和Ai-Bi(表示从Ai+1移动土堆到Ai了</p>
<h3 id="K序列"><a href="#K序列" class="headerlink" title="K序列"></a>K序列</h3><p>题意：<br>给一个数组 a，长度为 n，若某个子序列中的和为 K 的倍数，那么这个序列被称为“K 序列”。现在要你 对数组 a 求出最长的子序列的长度，满足这个序列是 K 序列。<br>思路：<br>这个题，貌似出的不大好，因为序列没说是不是连续的。<br>如果是<code>连续</code>的，用前缀和记录，对于每个sum[i]%k的结果p,总会有最大的位置，<br>和最小的位置，那么直接遍历从0-k，p最后的位置 - p开始的位置就可以了<br><figure class="highlight mipsasm"><table><tr><td class="code"><pre><div class="line">for(int i=<span class="number">1</span><span class="comment">;i&lt;=n;i++) &#123;</span></div><div class="line">    <span class="built_in">s1</span>[sum[i]] = i<span class="comment">;</span></div><div class="line">    if(<span class="built_in">s2</span>[sum[i]] == <span class="number">0</span> &amp;&amp; sum[i] != <span class="number">0</span>)</div><div class="line">        <span class="built_in">s2</span>[sum[i]] = i<span class="comment">;</span></div><div class="line">&#125;</div><div class="line">int mx = <span class="number">0</span><span class="comment">;</span></div><div class="line">for(int i=<span class="number">0</span><span class="comment">;i&lt;N*100;i++) &#123;</span></div><div class="line">    if(<span class="built_in">s2</span>[i] != -<span class="number">1</span>)</div><div class="line">        mx = max(mx,<span class="built_in">s1</span>[i]-<span class="built_in">s2</span>[i])<span class="comment">;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如果是<code>不连续</code>的，用dp,复杂度为n*k<br><figure class="highlight markdown"><table><tr><td class="code"><pre><div class="line">int last = 0;</div><div class="line">dp[<span class="string">last</span>][<span class="symbol">s[1</span>]] = 1;//dp[<span class="string">0</span>][<span class="symbol">i</span>] 表示加和对k取余为i的最长序列长度</div><div class="line">for(int i=2; i<span class="xml"><span class="tag">&lt;<span class="name">=n;</span> <span class="attr">i</span>++)</span></span></div><div class="line"><span class="xml">&#123;</span></div><div class="line"><span class="xml">    last = 1 - last;</span></div><div class="line"><span class="xml">    for(int j=0; j<span class="tag">&lt;<span class="name">k;</span> <span class="attr">j</span>++)</span></span></div><div class="line"><span class="xml">    &#123;</span></div><div class="line"><span class="xml">        if(dp[1-last][j] !=0)</span></div><div class="line"><span class="xml">            dp[last][ (j+s[i])%k] = max(dp[1-last][ (j+s[i])%k],dp[1-last][j]+1);</span></div><div class="line"><span class="xml">        else</span></div><div class="line"><span class="xml">            dp[last][(j+s[i])%k ] =dp[1-last][ (j+s[i])%k];</span></div><div class="line"><span class="xml">    &#125;</span></div><div class="line"><span class="xml">&#125;</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      刷题记录，持续更新
    
    </summary>
    
    
      <category term="Algorithm" scheme="http://draymonder.me/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>文档参考</title>
    <link href="http://draymonder.me/2018/07/01/documents/"/>
    <id>http://draymonder.me/2018/07/01/documents/</id>
    <published>2018-07-01T15:00:00.000Z</published>
    <updated>2018-05-22T15:03:57.462Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>&nbsp;&nbsp;&nbsp;&nbsp; 贴一下经常使用的文档及网站，省的一直要收藏夹</p>
<h2 id="学院课件下载"><a href="#学院课件下载" class="headerlink" title="学院课件下载"></a>学院课件下载</h2><p><a href="https://ppt.atcumt.com/" target="_blank" rel="external">学院的课程ppt以及复习资料汇总</a> </p>
<h2 id="markDown语法"><a href="#markDown语法" class="headerlink" title="markDown语法"></a>markDown语法</h2><p><a href="https://www.appinn.com/markdown/index.html" target="_blank" rel="external">Markdown 语法说明</a></p>
<h2 id="ppt模板"><a href="#ppt模板" class="headerlink" title="ppt模板"></a>ppt模板</h2><p><a href="http://www.ypppt.com/" target="_blank" rel="external">ppt模板下载</a></p>
<h2 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h2><p><a href="https://blog.csdn.net/enchanted_zhouh/article/details/76094308" target="_blank" rel="external">浅析C/S、B/S与P2P架构</a></p>
<h2 id="Linux学习"><a href="#Linux学习" class="headerlink" title="Linux学习"></a>Linux学习</h2><p><a href="https://www.bilibili.com/video/av12996446/?from=search&amp;seid=16236444443709215734" target="_blank" rel="external">韩顺平.linux视频教程</a></p>
]]></content>
    
    <summary type="html">
    
      有用的文档汇总
    
    </summary>
    
    
      <category term="Document" scheme="http://draymonder.me/tags/Document/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript一些trick</title>
    <link href="http://draymonder.me/2018/05/29/the-use-of-js2/"/>
    <id>http://draymonder.me/2018/05/29/the-use-of-js2/</id>
    <published>2018-05-29T14:00:00.000Z</published>
    <updated>2018-05-29T09:39:30.545Z</updated>
    
    <content type="html"><![CDATA[<h1 id="方法重载"><a href="#方法重载" class="headerlink" title="方法重载"></a>方法重载</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;js不存在方法重载，调用的都是最后一个方法名的方法体<br><figure class="highlight oxygene"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span><span class="params">(a, b)</span> <span class="comment">&#123;</span></span></div><div class="line"><span class="function"><span class="comment">    return a + b;</span></span></div><div class="line"><span class="function"><span class="comment">&#125;</span></span></div><div class="line"><span class="function"></span></div><div class="line"><span class="function"><span class="title">function</span> <span class="title">add</span><span class="params">(a, b, c)</span> <span class="comment">&#123;</span></span></div><div class="line"><span class="function"><span class="comment">    return a + b + c;</span></span></div><div class="line"><span class="function"><span class="comment">&#125;</span></span></div><div class="line"><span class="function"></span></div><div class="line"><span class="function"><span class="title">alert</span><span class="params">( <span class="keyword">add</span>(1,2)</span> );</span> <span class="comment">//返回NaN</span></div><div class="line">alert( <span class="keyword">add</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>) ); <span class="comment">//返回NaN</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span><span class="params">(a, b, c, d)</span> <span class="comment">&#123;</span></span></div><div class="line"><span class="function"><span class="comment">    return a + b + c + d;</span></span></div><div class="line"><span class="function"><span class="comment">&#125;</span></span></div><div class="line"><span class="function"></span></div><div class="line"><span class="function"><span class="title">alert</span><span class="params">( <span class="keyword">add</span>(1,2,3,4)</span> );</span> <span class="comment">//返回10</span></div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;但是我们可以模拟出重载<br>js中 用 <code>arguments</code>数组来记录传递的参数</p>
<h1 id="BOM对象模型-Browser-Object-Model"><a href="#BOM对象模型-Browser-Object-Model" class="headerlink" title="BOM对象模型(Browser Object Model)"></a>BOM对象模型(Browser Object Model)</h1><ul>
<li>navigator</li>
<li>screen</li>
<li>location</li>
<li>history</li>
<li>window<ul>
<li>setInterval() / clearInterval()</li>
<li>setTimeout() / clearTimeout()</li>
</ul>
</li>
</ul>
<p>set()方法传递参数有两个 ， 第一个是code，即方法的代码，第二个是时间，单位是毫秒<br>setInterval() 是周期性的执行代码<br>setTimeout() 是只在给定的时间时 执行代码(一次)<br><br><br>参考文档:&nbsp;&nbsp;<a href="https://itbilu.com/javascript/js/4k9JcnZRl.html" target="_blank" rel="external">JavaScript BOM对象</a></p>
]]></content>
    
    <summary type="html">
    
      Js使用中的一些trick
    
    </summary>
    
    
      <category term="Js" scheme="http://draymonder.me/tags/Js/"/>
    
  </entry>
  
  <entry>
    <title>nth_element的使用</title>
    <link href="http://draymonder.me/2018/05/28/nth-element/"/>
    <id>http://draymonder.me/2018/05/28/nth-element/</id>
    <published>2018-05-28T15:00:00.000Z</published>
    <updated>2018-05-28T10:50:48.510Z</updated>
    
    <content type="html"><![CDATA[<h1 id="方法使用"><a href="#方法使用" class="headerlink" title="方法使用"></a>方法使用</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;nth_element(first, nth, last, compare) 使得第n大元素处于第n位置（从0开始,其位置是下标为<br>n的元素），并且比这个元素小的元素都排在这个元素之前，比这个元素大的元素都排在这个元素之后，但不能保证他们是有序的</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">int</span> n = <span class="number">50</span>;</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v(n);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) &#123;</div><div class="line">        v[i] = i;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 随机置换</span></div><div class="line">    random_shuffle(v.begin(),v.end());</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>,v[i]);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">    nth_element(v.begin(),v.begin()+<span class="number">5</span>,v.end());</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>,v[i]);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p>看文章 大概都是 二分划分 然后插排 //平均复杂度 O(n)<br>当然 也可以建立一个大小为n的最大堆，然后每次比较其他的数 //平均复杂度 O( N * log(k) )<br><a href="https://www.felix021.com/blog/read.php?1653" target="_blank" rel="external">参考文章</a></p>
]]></content>
    
    <summary type="html">
    
      nth_element的使用
    
    </summary>
    
    
      <category term="Algorithm" scheme="http://draymonder.me/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>TCP/IP、Http、Socket的区别</title>
    <link href="http://draymonder.me/2018/05/21/the-network1/"/>
    <id>http://draymonder.me/2018/05/21/the-network1/</id>
    <published>2018-05-21T15:00:00.000Z</published>
    <updated>2018-05-22T15:00:50.470Z</updated>
    
    <content type="html"><![CDATA[<p><b>&nbsp;&nbsp;&nbsp;&nbsp;以下内容部分或全部Copy自他人博客，为了巩固自己的基础知识和丰富自己对协议的了解，侵权删</b></p>
<h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;网络由下往上分为<code>物理层、数据链路层、网络层、传输层、会话层、表示层和应用层</code>。通过初步的了解，我知道<code>IP协议</code>对应于<code>网络层</code>，<code>TCP协议</code>对应于<code>传输层</code>，而<code>HTTP协议</code>对应于<code>应用层</code>，三者从本质上来说没有可比性，<code>socket</code>则是对TCP/IP协议的封装和应用(个人理解就是TCP/IP的具体实现，提供调用的接口</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;<font color="red">TCP/IP只是一个协议栈，就像操作系统的运行机制一样，必须要具体实现，同时还要提供对外的操作接口。这个就像操作系统会提供标准的编程接口，比如win32编程接口一样，TCP/IP也要提供可供程序员做网络开发所用的接口，这就是Socket编程接口。<br> </font></p>
<h2 id="笔试-面试概念"><a href="#笔试-面试概念" class="headerlink" title="笔试/面试概念"></a>笔试/面试概念</h2><h3 id="什么是TCP连接的三次握手"><a href="#什么是TCP连接的三次握手" class="headerlink" title="什么是TCP连接的三次握手"></a>什么是TCP连接的三次握手</h3><p>第一次握手：客户端发送syn包(syn=j)到服务器，并进入SYN_SEND状态，等待服务器确认；<br>第二次握手：服务器收到syn包，必须确认客户的SYN（ack=j+1），同时自己也发送一个SYN包（syn=k），即SYN+ACK包，此时服务器进入SYN_RECV状态；<br>第三次握手：客户端收到服务器的SYN＋ACK包，向服务器发送确认包ACK(ack=k+1)，此包发送完毕，客户端和服务器进入ESTABLISHED状态，完成三次握手。<br>  握手过程中传送的包里不包含数据，三次握手完毕后，客户端与服务器才正式开始传送数据。理想状态下，TCP连接一旦建立，在通信双方中的任何一方主动关闭连接之前，TCP 连接都将被一直保持下去。断开连接时服务器和客户端均可以主动发起断开TCP连接的请求，断开过程需要经过“四次握手”（过程就不细写了，就是服务器和客户端交互，最终确定断开）</p>
<h3 id="利用Socket建立网络连接的步骤"><a href="#利用Socket建立网络连接的步骤" class="headerlink" title="利用Socket建立网络连接的步骤"></a>利用Socket建立网络连接的步骤</h3><p>建立Socket连接至少需要一对套接字，其中一个运行于客户端，称为ClientSocket ，另一个运行于服务器端，称为ServerSocket 。</p>
<p>套接字之间的连接过程分为三个步骤：<code>服务器监听</code>，<code>客户端请求</code>，<code>连接确认</code>。</p>
<p>1。服务器监听：服务器端套接字并不定位具体的客户端套接字，而是处于等待连接的状态，实时监控网络状态，等待客户端的连接请求。</p>
<p>2。客户端请求：指客户端的套接字提出连接请求，要连接的目标是服务器端的套接字。为此，客户端的套接字必须首先描述它要连接的服务器的套接字，指出服务器端套接字的地址和端口号，然后就向服务器端套接字提出连接请求。</p>
<p>3。连接确认：当服务器端套接字监听到或者说接收到客户端套接字的连接请求时，就响应客户端套接字的请求，建立一个新的线程，把服务器端套接字的描述发给客户端，一旦客户端确认了此描述，双方就正式建立连接。而服务器端套接字继续处于监听状态，继续接收其他客户端套接字的连接请求。</p>
<h3 id="HTTP链接的特点"><a href="#HTTP链接的特点" class="headerlink" title="HTTP链接的特点"></a>HTTP链接的特点</h3><p>HTTP协议即超文本传送协议(Hypertext Transfer Protocol )，是Web联网的基础，也是手机联网常用的协议之一，HTTP协议是建立在TCP协议之上的一种应用。</p>
<p>HTTP连接最显著的特点是客户端发送的每次请求都需要服务器回送响应，在请求结束后，会主动释放连接。从建立连接到关闭连接的过程称为“一次连接”。</p>
<h3 id="TCP和UDP的区别（考点）"><a href="#TCP和UDP的区别（考点）" class="headerlink" title="TCP和UDP的区别（考点）"></a>TCP和UDP的区别（考点）</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;为了便于理解，其实TCP像打电话，必须接通才能说话<br> 而UDP则像发短信，发送即可，至于收到收不到，可以让接受方回复短信</p>
<p>1。TCP是面向链接的，虽然说网络的不安全不稳定特性决定了多少次握手都不能保证连接的可靠性，但TCP的三次握手在最低限度上（实际上也很大程度上保证了）保证了连接的可靠性；而UDP不是面向连接的，UDP传送数据前并不与对方建立连接，对接收到的数据也不发送确认信号，发送端不知道数据是否会正确接收，当然也不用重发，所以说UDP是无连接的、不可靠的一种数据传输协议。</p>
<p>2。也正由于1所说的特点，使得UDP的开销更小数据传输速率更高，因为不必进行收发数据的确认，所以UDP的实时性更好。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;知道了TCP和UDP的区别，就不难理解为何采用TCP传输协议的MSN比采用UDP的QQ传输文件慢了，但并不能说QQ的通信是不安全的，因为程序员可以手动对UDP的数据收发进行验证，比如发送方对每个数据包进行编号然后由接收方进行验证啊什么的，即使是这样，UDP因为在底层协议的封装上没有采用类似TCP的“三次握手”而实现了TCP所无法达到的传输效率。</p>
]]></content>
    
    <summary type="html">
    
      最近开课了计算机网络，也学习了关于Java的网络编程
    
    </summary>
    
    
      <category term="网络" scheme="http://draymonder.me/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>心情小扎</title>
    <link href="http://draymonder.me/2018/05/15/the-diary-05-15/"/>
    <id>http://draymonder.me/2018/05/15/the-diary-05-15/</id>
    <published>2018-05-15T15:30:00.000Z</published>
    <updated>2018-05-16T14:14:25.686Z</updated>
    
    <content type="html"><![CDATA[<h1 id="反思"><a href="#反思" class="headerlink" title="反思"></a>反思</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;已经大二下学期过去半个学期了，想想这个学期颓废的状态，真的好痛心，虽然取得了一些小成绩,但是凭心而论，那都是靠别人的努力所获得的，这样的荣誉或者证书其实真的对自己的成长没有太大的作用，反而会助长自己的骄傲的小情绪呢吧。<br>&nbsp;&nbsp;&nbsp;&nbsp;悟已往之不谏，知来者之可追。<br>&nbsp;&nbsp;&nbsp;&nbsp;上周末去南京打了省赛，真的，整个队，神迷离，题目看不懂，枚举，暴力，排序简单的trick题目都Wa了很多次，痛心棘手啊。<br>&nbsp;&nbsp;&nbsp;&nbsp;昨天考完了操作系统，发现自己真的是好菜的呢，不好好看书，也不好好刷题，考试的时候一脸懵逼的看着不会做的题目，着实心痛。</p>
<h1 id="Flag"><a href="#Flag" class="headerlink" title="Flag"></a>Flag</h1><ul>
<li>减肥的了，控制在130斤左右吧，太胖了有种自卑感</li>
<li>每周写<code>leetcode</code> 5道题</li>
<li>JavaSE学完，以后技术栈就偏向Java了，然后开始JavaEE的学习</li>
<li>每周多陪陪人家嘛</li>
<li>未完待续…</li>
</ul>
]]></content>
    
    <summary type="html">
    
      咸鱼的我，想要调整一下状态
    
    </summary>
    
    
      <category term="Diary" scheme="http://draymonder.me/tags/Diary/"/>
    
  </entry>
  
  <entry>
    <title>操作系统复习汇总</title>
    <link href="http://draymonder.me/2018/05/11/os/"/>
    <id>http://draymonder.me/2018/05/11/os/</id>
    <published>2018-05-11T15:30:00.000Z</published>
    <updated>2018-05-11T15:20:47.335Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一章-操作系统绪论"><a href="#第一章-操作系统绪论" class="headerlink" title="第一章 操作系统绪论"></a>第一章 操作系统绪论</h1><ol>
<li>在操作系统中，处理机负责对进程进行管理和调度，对系统中的信息进行管理的部分通常称为<br><code>文件系统</code></li>
</ol>
<h1 id="第二章-进程控制和同步"><a href="#第二章-进程控制和同步" class="headerlink" title="第二章 进程控制和同步"></a>第二章 进程控制和同步</h1><ol>
<li>临界区是<code>一段程序</code></li>
<li>信箱通信是一种<code>间接</code>通信方式</li>
<li>一个进程被唤醒意味着<code>进程变为就绪状态</code></li>
<li>进程由<code>PCB</code>、<code>程序段</code>和<code>数据段</code>三部分组成，其中<code>PCB</code>是进程存在的唯一标志。而<code>程序段</code>部分也可以为其它进程共享</li>
<li><code>同步</code>指进程间具有的一定逻辑关系；<code>互斥</code>是指进程间在使用共享资源方面的约束关系。</li>
<li>产生死锁的四个必要条件是：<code>互斥、请求与保持、循环等待和不可剥夺</code>。</li>
<li>银行家算法在解决死锁问题中是用于<code>避免死锁</code>的。</li>
</ol>
<h1 id="第三章-存储管理"><a href="#第三章-存储管理" class="headerlink" title="第三章 存储管理"></a>第三章 存储管理</h1><ol>
<li>采用<code>分段式存储管理</code>不会产生内部碎片</li>
</ol>
<h1 id="第四章-设备管理"><a href="#第四章-设备管理" class="headerlink" title="第四章 设备管理"></a>第四章 设备管理</h1><ol>
<li>在采用SPOOLING 技术的系统中，用户的打印结果首先被送到<code>磁盘固定区域</code></li>
<li>进行设备分配时所需的数据表格主要有<code>系统设备表</code>，<code>设备控制表</code>，<code>通道控制表</code>和<br><code>控制器控制表</code></li>
<li>逻辑设备表的主要功能是<code>实现设备独立性</code>和<code>实现设备分配灵活性</code></li>
<li>SPOOLING系统是由磁盘中的<code>输入井</code>、<code>输出井</code>、内存中的<code>输入缓冲区</code>、<code>输出缓冲区</code>，以及<code>输入进程</code>和<code>输出进程</code>组成的。</li>
</ol>
<h1 id="第五章-文件管理"><a href="#第五章-文件管理" class="headerlink" title="第五章 文件管理"></a>第五章 文件管理</h1><ol>
<li>文件的物理组织有<code>顺序</code>、<code>链接</code>和<code>索引</code>。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      考试前复习一些选择题
    
    </summary>
    
    
      <category term="os" scheme="http://draymonder.me/tags/os/"/>
    
  </entry>
  
  <entry>
    <title>JavaSE的IO流</title>
    <link href="http://draymonder.me/2018/05/06/javase-io/"/>
    <id>http://draymonder.me/2018/05/06/javase-io/</id>
    <published>2018-05-06T15:00:00.000Z</published>
    <updated>2018-05-05T05:47:23.444Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;五一玩了三天LOL，嘿嘿，可能假期就是用来放松的？<br>&nbsp;&nbsp;&nbsp;&nbsp;java从学习到现在已经有快一个月了，其实基础语法和基础的面向对象了不怎么难得，就是自己一直没有把控好学习时间和学习的效率，导致学习java比较慢，当然了，也不能急于求成，因为学的东西越快越多，忘的也越快越多吧。 以后给自己的一个小提醒就是尽量不要在宿舍敲代码，出来，宿舍的效率还是有点儿低的。</p>
<h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="File"><a href="#File" class="headerlink" title="File"></a>File</h2><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><figure class="highlight arduino"><table><tr><td class="code"><pre><div class="line"><span class="comment">//构造</span></div><div class="line"><span class="keyword">public</span> <span class="built_in">File</span>(<span class="keyword">String</span> pathname)</div><div class="line"><span class="keyword">public</span> <span class="built_in">File</span>(<span class="keyword">String</span> parent,<span class="keyword">String</span> child)</div><div class="line"><span class="keyword">public</span> <span class="built_in">File</span>(<span class="built_in">File</span> parent,<span class="keyword">String</span> child)</div><div class="line"></div><div class="line"><span class="comment">//创建</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> createNewFile()</div><div class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="built_in">mkdir</span>()</div><div class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> mkdirs()</div><div class="line"></div><div class="line"><span class="comment">//删除</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="keyword">delete</span>()</div><div class="line"></div><div class="line"><span class="comment">//重命名 也有 剪切的效果</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> renameTo(<span class="built_in">File</span> dest)</div><div class="line"></div><div class="line"><span class="comment">//判断</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="built_in">isDirectory</span>()</div><div class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> isFile()</div><div class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="built_in">exists</span>()</div><div class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> canRead()</div><div class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> canWrite()</div><div class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> isHidden()</div><div class="line"></div><div class="line"><span class="comment">//基本获取</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">String</span> getAbsolutePath()</div><div class="line"><span class="keyword">public</span> <span class="keyword">String</span> getPath()</div><div class="line"><span class="keyword">public</span> <span class="keyword">String</span> getName()</div><div class="line"><span class="keyword">public</span> <span class="keyword">long</span> length()</div><div class="line"><span class="keyword">public</span> <span class="keyword">long</span> lastModified()</div></pre></td></tr></table></figure>
<h4 id="高级获取-演示"><a href="#高级获取-演示" class="headerlink" title="高级获取 演示"></a>高级获取 演示</h4><figure class="highlight arduino"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">String</span>[] filter)</div><div class="line"><span class="keyword">public</span> <span class="built_in">File</span>[] listFiles(FilenameFillist(FilenameFilterter filter)</div><div class="line"></div><div class="line"><span class="comment">//判断 是否符合过滤规则</span></div><div class="line"><span class="keyword">String</span> []str = file.list(<span class="keyword">new</span> FilenameFilter() &#123;</div><div class="line">    @Override</div><div class="line">    <span class="keyword">public</span> <span class="keyword">boolean</span> accept(<span class="built_in">File</span> arg0, <span class="keyword">String</span> arg1) &#123;</div><div class="line">        <span class="built_in">return</span> <span class="keyword">new</span> <span class="built_in">File</span>(arg0,arg1).isFile() &amp;&amp; arg1.endsWith(<span class="string">".iso"</span>); </div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a>IO流</h2><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><p>按照数据流向<br>&nbsp;&nbsp;&nbsp;&nbsp;输入流 读入数据<br>&nbsp;&nbsp;&nbsp;&nbsp;输出流 写出数据<br>按照数据类型<br>&nbsp;&nbsp;&nbsp;&nbsp;字节流 Reader和Writer<br>&nbsp;&nbsp;&nbsp;&nbsp;字符流 InputStream和OutputStream</p>
<h3 id="字节流"><a href="#字节流" class="headerlink" title="字节流"></a>字节流</h3><h4 id="FileOutputStream"><a href="#FileOutputStream" class="headerlink" title="FileOutputStream"></a>FileOutputStream</h4><figure class="highlight arduino"><table><tr><td class="code"><pre><div class="line"><span class="comment">//构造</span></div><div class="line">FileOutputStream(<span class="built_in">File</span> file)</div><div class="line">FileOutputStream(<span class="keyword">String</span> name)</div><div class="line"></div><div class="line"><span class="comment">//写</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="built_in">write</span>(<span class="keyword">int</span> b)</div><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="built_in">write</span>(<span class="keyword">byte</span>[] b)</div><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="built_in">write</span>(<span class="keyword">byte</span>[] b,<span class="keyword">int</span> off,<span class="keyword">int</span> len)</div></pre></td></tr></table></figure>
<h4 id="FileInputStream"><a href="#FileInputStream" class="headerlink" title="FileInputStream"></a>FileInputStream</h4><figure class="highlight arduino"><table><tr><td class="code"><pre><div class="line"><span class="comment">//构造</span></div><div class="line">FileInputStream(<span class="built_in">File</span> file)</div><div class="line">FileInputStream(<span class="keyword">String</span> name)</div><div class="line"></div><div class="line"><span class="comment">//读</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">int</span> <span class="built_in">read</span>()</div><div class="line"><span class="keyword">public</span> <span class="keyword">int</span> <span class="built_in">read</span>(<span class="keyword">byte</span>[] b) <span class="comment">//byte数组用来做缓冲区</span></div></pre></td></tr></table></figure>
<h3 id="字符流"><a href="#字符流" class="headerlink" title="字符流"></a>字符流</h3><h4 id="Stream"><a href="#Stream" class="headerlink" title="Stream"></a>Stream</h4><h5 id="InputStreamReader-OutputStreamWriter"><a href="#InputStreamReader-OutputStreamWriter" class="headerlink" title="InputStreamReader/OutputStreamWriter"></a>InputStreamReader/OutputStreamWriter</h5><figure class="highlight stylus"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="title">InputStreamReader</span><span class="params">(InputStream is)</span></span>:用默认的编码读取数据</div><div class="line"><span class="function"><span class="title">InputStreamReader</span><span class="params">(InputStream is,String charsetName)</span></span>:用指定的编码读取数据</div><div class="line"></div><div class="line"><span class="function"><span class="title">OutputStreamWriter</span><span class="params">(OutputStream out)</span></span>:根据默认编码把字节流的数据转换为字符流</div><div class="line"><span class="function"><span class="title">OutputStreamWriter</span><span class="params">(OutputStream out,String charsetName)</span></span>:根据指定编码把字节流数据转换为字符流</div></pre></td></tr></table></figure>
<h6 id="转换流的简单形式"><a href="#转换流的简单形式" class="headerlink" title="转换流的简单形式"></a>转换流的简单形式</h6><p>&nbsp;&nbsp;&nbsp;&nbsp;由于我们常见的操作都是使用本地默认编码,所以,不用指定编码<br><figure class="highlight ini"><table><tr><td class="code"><pre><div class="line"><span class="attr">OutputStreamWriter</span> = FileOutputStream + 编码表(GBK)</div><div class="line"><span class="attr">FileWriter</span> = FileOutputStream + 编码表(GBK)</div><div class="line"></div><div class="line"><span class="attr">InputStreamReader</span> = FileInputStream + 编码表(GBK)</div><div class="line"><span class="attr">FileReader</span> = FileInputStream + 编码表(GBK)</div></pre></td></tr></table></figure></p>
<h4 id="Buffered"><a href="#Buffered" class="headerlink" title="Buffered"></a>Buffered</h4><h5 id="BufferedReader-BufferedWriter"><a href="#BufferedReader-BufferedWriter" class="headerlink" title="BufferedReader/BufferedWriter"></a>BufferedReader/BufferedWriter</h5><figure class="highlight cs"><table><tr><td class="code"><pre><div class="line">BufferedReader(Reader <span class="keyword">in</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getLineNumber</span>(<span class="params"></span>)获得当前行号。 </span></div><div class="line"><span class="function">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLineNumber</span>(<span class="params"><span class="keyword">int</span> lineNumber</span>) 更改行号</span></div><div class="line"><span class="function"><span class="title">BufferedWriter</span>(<span class="params">Writer <span class="keyword">out</span></span>)</span></div></pre></td></tr></table></figure>
<h4 id="close和flush的区别"><a href="#close和flush的区别" class="headerlink" title="close和flush的区别"></a>close和flush的区别</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;close()关闭流对象，但是先刷新一次缓冲区(就是把缓冲区的数据立即写出。关闭之后，流对象不可以继续再使用了。<br>&nbsp;&nbsp;&nbsp;&nbsp;flush()仅仅刷新缓冲区,刷新之后，流对象还可以继续使用。</p>
<h3 id="数据流"><a href="#数据流" class="headerlink" title="数据流"></a>数据流</h3><figure class="highlight ebnf"><table><tr><td class="code"><pre><div class="line"><span class="attribute">DataInputStream</span> </div><div class="line"><span class="attribute">DataOutputStream</span></div></pre></td></tr></table></figure>
<h3 id="RandomAccessFile"><a href="#RandomAccessFile" class="headerlink" title="RandomAccessFile"></a>RandomAccessFile</h3><figure class="highlight applescript"><table><tr><td class="code"><pre><div class="line"><span class="number">1</span>：访问模式</div><div class="line">    <span class="string">"r"</span> 以只读方式打开。调用结果对象的任何 <span class="built_in">write</span> 方法都将导致抛出 IOException。  </div><div class="line">    <span class="string">"rw"</span> 打开以便读取和写入。如果该文件尚不存在，则尝试创建该文件。  </div><div class="line">    <span class="string">"rws"</span> 打开以便读取和写入，对于<span class="string">"rw"</span>，还要求对文件的内容或元数据的每个更新都同步写入到底层存储设备。  </div><div class="line">    <span class="string">"rwd"</span>打开以便读取和写入，对于<span class="string">"rw"</span>，还要求对文件内容的每个更新都同步写入到底层存储设备。 </div><div class="line">一般使用rw模式。</div></pre></td></tr></table></figure>
<h3 id="SequenceInputStream"><a href="#SequenceInputStream" class="headerlink" title="SequenceInputStream"></a>SequenceInputStream</h3><p>SequenceInputStream类可以将多个输入流串流在一起，合并为一个输入流，因此，该流也被称为合并流<br><figure class="highlight stylus"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="title">SequenceInputStream</span><span class="params">(InputStream s1, InputStream s2)</span></span>  </div><div class="line"><span class="function"><span class="title">SequenceInputStream</span><span class="params">(Enumeration&lt;? extends InputStream&gt; e)</span></span></div></pre></td></tr></table></figure></p>
<h3 id="序列化流"><a href="#序列化流" class="headerlink" title="序列化流"></a>序列化流</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;序列化流：把对象按照流一样的方式存入文本文件或者在网络中传输。对象 – 流数据(ObjectOutputStream)<br>&nbsp;&nbsp;&nbsp;&nbsp;反序列化流:把文本文件中的流对象数据或者网络中的流对象数据还原成对象。流数据 – 对象(ObjectInputStream)</p>
<h2 id="编码问题"><a href="#编码问题" class="headerlink" title="编码问题"></a>编码问题</h2><figure class="highlight arduino"><table><tr><td class="code"><pre><div class="line"><span class="comment">//字符集一样才能得到正确的解码结果</span></div><div class="line"><span class="keyword">String</span>(<span class="keyword">byte</span>[] bytes, <span class="keyword">String</span> charsetName):通过指定的字符集解码字节数组</div><div class="line"><span class="keyword">byte</span>[] getBytes(<span class="keyword">String</span> charsetName):使用指定的字符集合把字符串编码为字节数组</div></pre></td></tr></table></figure>
<h2 id="io实战"><a href="#io实战" class="headerlink" title="io实战"></a>io实战</h2><h3 id="文本复制"><a href="#文本复制" class="headerlink" title="文本复制"></a>文本复制</h3><figure class="highlight armasm"><table><tr><td class="code"><pre><div class="line"><span class="number">1</span>. FileReader FileWriter 单个字符或者缓冲数组读</div><div class="line"><span class="number">2</span>. <span class="keyword">BufferedReader </span><span class="keyword">BufferedWriter </span>单个字符或者缓冲数组读</div><div class="line"><span class="number">3</span>. <span class="keyword">BufferedReader </span><span class="keyword">BufferedWriter </span>一行一行读，注意换行</div></pre></td></tr></table></figure>
<h3 id="图片复制"><a href="#图片复制" class="headerlink" title="图片复制"></a>图片复制</h3><figure class="highlight armasm"><table><tr><td class="code"><pre><div class="line"><span class="number">1</span>. FileInputStream FileOutputStream 单个字符或者缓冲数组读</div><div class="line"><span class="number">2</span>. <span class="keyword">BufferedInputStream </span><span class="keyword">BufferedOutputStream </span>单个字符或者缓冲数组读</div></pre></td></tr></table></figure>
<h3 id="递归删除一个文件夹"><a href="#递归删除一个文件夹" class="headerlink" title="递归删除一个文件夹"></a>递归删除一个文件夹</h3><figure class="highlight gradle"><table><tr><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> deleteFile(<span class="keyword">File</span> <span class="keyword">file</span>) &#123;</div><div class="line">    <span class="keyword">File</span> [] files = <span class="keyword">file</span>.listFiles();</div><div class="line">    <span class="keyword">if</span>(files != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">File</span> v : files ) &#123;</div><div class="line">            <span class="keyword">if</span>(v.isDirectory()) &#123;</div><div class="line">                deleteFile(v);</div><div class="line">            &#125;<span class="keyword">else</span> &#123;</div><div class="line">                System.out.<span class="keyword">println</span>(v.getName() + <span class="string">"----删除"</span> + v.<span class="keyword">delete</span>());</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        System.out.<span class="keyword">println</span>(<span class="keyword">file</span>.getName() + <span class="string">"----删除"</span> + <span class="keyword">file</span>.<span class="keyword">delete</span>());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="批量复制文件"><a href="#批量复制文件" class="headerlink" title="批量复制文件"></a>批量复制文件</h3><p><a href="https://www.jianshu.com/p/56843fdc2986" target="_blank" rel="external">Java文件拷贝的几种实现方案</a><br><figure class="highlight gradle"><table><tr><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> Copyppt(<span class="keyword">File</span> <span class="keyword">file</span>, <span class="keyword">File</span> destfolder) <span class="keyword">throws</span> IOException &#123;</div><div class="line">    <span class="keyword">File</span>[] files = <span class="keyword">file</span>.listFiles(); <span class="comment">//把文件下的目录找出来</span></div><div class="line">    <span class="keyword">if</span> (files != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">File</span> s : files) &#123;</div><div class="line">            <span class="keyword">if</span> (s.isDirectory()) &#123;</div><div class="line">                Copyppt(s, destfolder); <span class="comment">//如果是目录就接着递归查找</span></div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                String ppt = s.getName(); <span class="comment">//如果是文件</span></div><div class="line">                <span class="keyword">if</span> (ppt.endsWith(<span class="string">"ppt"</span>)) &#123; <span class="comment">//并且文件的命名后缀是ppt</span></div><div class="line">                    <span class="comment">//得到文件的复制目录</span></div><div class="line">                    String str = destfolder.getAbsolutePath() + <span class="string">"\\"</span> + ppt; </div><div class="line">                    <span class="keyword">File</span> destfile = <span class="keyword">new</span> <span class="keyword">File</span>(str);</div><div class="line">                    <span class="comment">//如果文件存在就不复制了</span></div><div class="line">                    <span class="keyword">if</span>(!destfile.exists()) &#123;</div><div class="line">                        System.out.<span class="keyword">println</span>(<span class="string">"拷贝"</span>+s.getName()+<span class="string">"到"</span>+destfile.toPath()+</div><div class="line">                                Files.<span class="keyword">copy</span>(s.toPath(), destfile.toPath()));</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//如果不处理重名情况，那么程序就会抛出FileAlreadyExistsException异常</span></div></pre></td></tr></table></figure></p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>  希望自己能够抓紧时间。 做自己能做的事，也做能让自己开心的事情。</p>
]]></content>
    
    <summary type="html">
    
      JavaSE的IO流学习
    
    </summary>
    
    
      <category term="JavaSE" scheme="http://draymonder.me/tags/JavaSE/"/>
    
  </entry>
  
  <entry>
    <title>Eclipse 导入工程</title>
    <link href="http://draymonder.me/2018/04/26/javase-import/"/>
    <id>http://draymonder.me/2018/04/26/javase-import/</id>
    <published>2018-04-26T10:00:00.000Z</published>
    <updated>2018-05-09T09:14:11.416Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;因为觉得看视频，进度挺慢，而且看完以后，并没有很好的掌握，但是单纯找每个类文件也很麻烦，所以就学习一下导入工程的方法，这样就可以看着代码学习了。</p>
<h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>1.在项目区域右键找到import</p>
<p>2.找到General，展开，并找到 Existing Projects into Workspace</p>
<p>3.点击next,然后选择你要导入的项目（注意：这里选择的是项目名称</p>
<p>因为还没有找到合适的图床，暂时没法分享图文<br><a href="https://blog.csdn.net/bing1926/article/details/80097334" target="_blank" rel="external">Eclipse 导入工程 有图版</a></p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;经过上面三步 就可以轻松的看项目里面的代码了，也可以自己动手去看着敲代码了</p>
]]></content>
    
    <summary type="html">
    
      JavaSE的project导入
    
    </summary>
    
    
      <category term="JavaSE" scheme="http://draymonder.me/tags/JavaSE/"/>
    
  </entry>
  
  <entry>
    <title>Git学习</title>
    <link href="http://draymonder.me/2018/04/16/git-learing/"/>
    <id>http://draymonder.me/2018/04/16/git-learing/</id>
    <published>2018-04-16T15:30:00.000Z</published>
    <updated>2018-04-17T12:48:32.805Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>听到大佬说我太菜了.没办法啊，确实蛮菜的，需要学习很多东西吧,就很难受。</p>
<h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight routeros"><table><tr><td class="code"><pre><div class="line">$ git<span class="built_in"> config </span>--global user.name <span class="string">"Your Name"</span></div><div class="line">$ git<span class="built_in"> config </span>--global user.email <span class="string">"email@example.com"</span></div></pre></td></tr></table></figure>
<p><code>--global</code>是指这台机器上所有的Git仓库都会使用这个配置</p>
<h2 id="创建版本库"><a href="#创建版本库" class="headerlink" title="创建版本库"></a>创建版本库</h2><p>先<code>mkdir</code>建立一个空目录<br>然后，用<code>git init</code>初始化当前目录Git可以管理的仓库</p>
<h2 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h2><h3 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h3><p>用命令<code>git add ***</code>把文件添加到仓库<br>接着用<code>git commit -m &quot;***&quot;</code>把文件提交到仓库</p>
<h3 id="文件改动"><a href="#文件改动" class="headerlink" title="文件改动"></a>文件改动</h3><p><code>git status</code>命令可以让我们时刻掌握仓库当前的状态，上面的命令告诉我们，readme.txt被修改过了，但还没有准备提交的修改。<br><code>git diff</code>顾名思义就是查看difference，显示的格式正是Unix通用的diff格式<br><code>git log</code>命令显示从最近到最远的提交日志</p>
<p>Git必须知道当前版本是哪个版本，在Git中，用<code>HEAD</code>表示当前版本，也就是最新的提交，上一个版本就是<code>HEAD^</code>，上上一个版本就是<code>HEAD^^</code>，往上100个版本写成<code>HEAD~100</code>。</p>
<p>把当前版本回退到上一个版本，就可以使用<code>git reset --hard HEAD^</code>,经尝试,命令在<code>Bash</code><br>下运行无错，在<code>cmder</code>下会有出现More的提示，只需要再写一下HEAD后面的<code>^</code>就可以了</p>
<p>如果真的返回上一个版本了，还想撤回本次操作，那么可以使用<code>git reflog</code>命令，来记录你的每一次命令。接着用<code>git reset --hard commit_id</code>命令回到操作前的状态</p>
<h3 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h3><p>当发现文件改动后，准备提交前，发现文件有问题，可以用<code>git checkout -- file</code>可以丢弃工作区的修改<br>命令<code>git checkout -- git学习</code> 意思就是，把git学习文件在工作区的修改全部撤销，这里有两种情况：<br>一种是 git学习 自修改后还没有被放到暂存区，现在，<code>撤销修改就回到和版本库一模一样的状态</code><br>一种是 git学习 已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态</p>
<p>总之，就是让这个文件回到最近一次git commit或git add时的状态。</p>
<p>场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令<code>git checkout -- file</code><br>场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令<code>git reset HEAD file</code>，就回到了场景1，第二步按场景1操作。</p>
<h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p>当你在工作区删除文件后，你有两个选择<br>一是确实要从版本库中删除该文件，那就用命令<code>git rm file</code>删掉，并且<code>git commit</code><br>另一种情况是删错了，<code>git checkout -- file</code></p>
<h2 id="仓库"><a href="#仓库" class="headerlink" title="仓库"></a>仓库</h2><h3 id="分布式优点"><a href="#分布式优点" class="headerlink" title="分布式优点"></a>分布式优点</h3><p>可以利用ssh 添加多个Key，假定你有若干电脑，你一会儿在公司提交，一会儿在家里提交，只要把每台电脑的Key都添加到GitHub，就可以在每台电脑上往GitHub推送了</p>
<h3 id="推送到远程库"><a href="#推送到远程库" class="headerlink" title="推送到远程库"></a>推送到远程库</h3><p>关联远程库<br><code>git remote add origin https://github.com/Draymonders/git-learning.git</code><br>第一次推送master分支的所有内容<br><code>git push -u origin master</code><br>以后就可以用<br><code>git push origin master</code></p>
<p>使用<code>https</code>除了速度慢以外，还有个最大的麻烦是每次推送都必须输入口令，但是在某些只开放<br><code>http</code>端口的公司内部就无法使用<code>ssh</code>协议而只能用<code>https</code>。</p>
<h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><h3 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h3><p><code>git checkout -b dev</code> 表示创建并切换<br>相当于<br><figure class="highlight q"><table><tr><td class="code"><pre><div class="line">git branch <span class="built_in">dev</span> <span class="comment">//创建dev分支</span></div><div class="line">git checkout <span class="built_in">dev</span> <span class="comment">//使用dev分支</span></div></pre></td></tr></table></figure></p>
<p><code>git branch</code> 命令会列出所有分支，当前分支前面会标一个*号</p>
<p>然后修改文件 接着<code>git add</code> and <code>git commit</code><br>接着回到master分支下 <code>git checkout master</code><br>把<code>dev</code>分支合并到<code>master</code>下,用<code>git merge dev</code><br>合并完成就可以删除<code>dev</code>分支了，用<code>git branch -d dev</code></p>
<p>分支语句汇总<br><figure class="highlight applescript"><table><tr><td class="code"><pre><div class="line">查看分支：git branch</div><div class="line"></div><div class="line">创建分支：git branch &lt;<span class="built_in">name</span>&gt;</div><div class="line"></div><div class="line">切换分支：git checkout &lt;<span class="built_in">name</span>&gt;</div><div class="line"></div><div class="line">创建+切换分支：git checkout -b &lt;<span class="built_in">name</span>&gt;</div><div class="line"></div><div class="line">合并某分支到当前分支：git merge &lt;<span class="built_in">name</span>&gt;</div><div class="line"></div><div class="line">删除分支：git branch -d &lt;<span class="built_in">name</span>&gt;</div><div class="line"></div><div class="line">分支合并图：git <span class="built_in">log</span> <span class="comment">--graph</span></div></pre></td></tr></table></figure></p>
<h3 id="分支管理策略"><a href="#分支管理策略" class="headerlink" title="分支管理策略"></a>分支管理策略</h3><p>合并分支时，加上<code>--no-ff</code>参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。<br><code>git merge --no-ff -m &quot;merge with no-ff&quot; beta</code></p>
<p>master是稳定版本，最好不要轻易动<br>然后下面建立一个beta测试版本，用来汇总代码和测试<br>最后建立每个人的分支，汇总到beta分支下。</p>
<h3 id="团队协作"><a href="#团队协作" class="headerlink" title="团队协作"></a>团队协作</h3><p>在项目中，先添加<code>beta</code>分支<br><code>git clone</code>后接着用<code>git branch</code> 显示只有<code>master</code>分支<br>如果想要在<code>beta</code>分支上开发,就需要在本地创建beta分支和远程库的beta分支关联<br><code>git checkout -b beta origin/beta</code><br>最后上传的时候用<code>git push origin beta</code></p>
<h2 id="标签管理"><a href="#标签管理" class="headerlink" title="标签管理"></a>标签管理</h2><p>如果找之前的版本用commit_id比较麻烦，那么可以用标签来绑定对应的commit_id，标签一旦生成就不能改变</p>
<p>命令<code>git tag &lt;name&gt;</code>用于新建一个标签，默认为HEAD，也可以指定一个commit id；</p>
<p><code>git tag -a &lt;tagname&gt; -m &quot;***&quot;</code>可以指定标签信息；</p>
<p><code>git tag</code>可以查看所有标签。</p>
<p><code>git push origin &lt;tagname&gt;</code>可以推送一个本地标签；</p>
<p><code>git push origin --tags</code>可以推送全部未推送过的本地标签；</p>
<p><code>git tag -d &lt;tagname&gt;</code>可以删除一个本地标签；</p>
<p><code>git push origin :refs/tags/&lt;tagname&gt;</code>可以删除一个远程标签。</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p><a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="external">廖雪峰的Git教程</a><br><a href="https://www.cnblogs.com/schaepher/p/4933873.html" target="_blank" rel="external">GitHub团队项目合作流程</a></p>
<p>感觉发现了一个学长<a href="http://www.cnblogs.com/schaepher" target="_blank" rel="external">schaepher</a>解决了一下我的迷茫呢,嘿嘿，看了他的很多博文,蛮有营养，想做什么就做什么好了，顾虑那么多干嘛。</p>
]]></content>
    
    <summary type="html">
    
      Git学习，了解 以及使用
    
    </summary>
    
    
      <category term="Git" scheme="http://draymonder.me/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>JavaSE的Collection 和 Map</title>
    <link href="http://draymonder.me/2018/04/15/javase-CollectionAndMap/"/>
    <id>http://draymonder.me/2018/04/15/javase-CollectionAndMap/</id>
    <published>2018-04-15T15:00:00.000Z</published>
    <updated>2018-04-30T10:26:23.622Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="jdk特性"><a href="#jdk特性" class="headerlink" title="jdk特性"></a>jdk特性</h2><h3 id="加强for循环"><a href="#加强for循环" class="headerlink" title="加强for循环"></a>加强for循环</h3><p>用来替代迭代器的,简化数组和Collection集合的遍历<br><figure class="highlight ada"><table><tr><td class="code"><pre><div class="line"><span class="keyword">for</span>(<span class="keyword">TYPE</span> <span class="type">name:collectionName) </span>&#123;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h3><figure class="highlight d"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> 类名&lt;泛型类型<span class="number">1</span>,…&gt; <span class="comment">//泛型类</span></div><div class="line"><span class="keyword">public</span> &lt;泛型类型&gt; 返回类型 方法名(泛型类型 .) <span class="comment">//泛型方法</span></div><div class="line"><span class="keyword">public</span>  <span class="keyword">interface</span> 接口名&lt;泛型类型<span class="number">1</span>…&gt; <span class="comment">//泛型接口</span></div></pre></td></tr></table></figure>
<h4 id="泛型通配符"><a href="#泛型通配符" class="headerlink" title="泛型通配符"></a>泛型通配符</h4><figure class="highlight dart"><table><tr><td class="code"><pre><div class="line">Collection&lt;?&gt; c = <span class="keyword">new</span> ArrayList&lt;<span class="built_in">Object</span>&gt;();</div><div class="line">? <span class="keyword">extends</span> E</div><div class="line">向下限定，E及其子类</div><div class="line">? <span class="keyword">super</span> E</div><div class="line">向上限定，E及其父类</div></pre></td></tr></table></figure>
<h2 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h2><figure class="highlight processing"><table><tr><td class="code"><pre><div class="line"><span class="number">1</span>：添加功能</div><div class="line">        <span class="built_in">boolean</span> <span class="built_in">add</span>(<span class="keyword">Object</span> obj):添加一个元素</div><div class="line">        <span class="built_in">boolean</span> addAll(Collection c):添加一个集合的元素</div><div class="line"><span class="number">2</span>:删除功能</div><div class="line">        <span class="keyword">void</span> <span class="built_in">clear</span>():移除所有元素</div><div class="line">        <span class="built_in">boolean</span> remove(<span class="keyword">Object</span> o):移除一个元素</div><div class="line">        <span class="built_in">boolean</span> removeAll(Collection c):只要有一个元素被移除了，就返回<span class="keyword">true</span></div><div class="line"><span class="number">3</span>:判断功能</div><div class="line">        <span class="built_in">boolean</span> contains(<span class="keyword">Object</span> o)：判断集合中是否包含指定的元素</div><div class="line">        <span class="built_in">boolean</span> containsAll(Collection c)：判断集合中是否包含指定的集合元素(是所有)</div><div class="line">        <span class="built_in">boolean</span> isEmpty()：判断集合是否为空</div><div class="line"><span class="number">4</span>:获取功能</div><div class="line">        Iterator&lt;E&gt; iterator()(重点)</div><div class="line"><span class="number">5</span>:长度功能</div><div class="line">        <span class="built_in">int</span> <span class="built_in">size</span>():元素的个数</div><div class="line"><span class="number">6</span>:交集功能</div><div class="line">        <span class="built_in">boolean</span> retainAll(Collection c):返回交集给对应的对象</div><div class="line"><span class="number">7</span>：把集合转换为数组</div><div class="line">        <span class="keyword">Object</span>[] toArray()</div></pre></td></tr></table></figure>
<h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><p>有序(存储顺序和取出顺序一致),可重复</p>
<h4 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h4><p>底层数据结构是<code>数组</code>，查询快，增删慢。<br>线程不安全，效率高。</p>
<h4 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h4><p>底层数据结构是<code>数组</code>，查询快，增删慢。<br>线程安全，效率低。<br><figure class="highlight processing"><table><tr><td class="code"><pre><div class="line">添加功能</div><div class="line">     <span class="keyword">public</span> <span class="keyword">void</span> addElement(<span class="keyword">Object</span> obj)      --  <span class="built_in">add</span>() </div><div class="line">获取功能</div><div class="line">     <span class="keyword">public</span> <span class="keyword">Object</span> elementAt(<span class="built_in">int</span> index)      --  <span class="built_in">get</span>()</div><div class="line">     <span class="keyword">public</span> Enumeration elements()           --  Iterator iterator()</div><div class="line">     <span class="built_in">boolean</span> hasMoreElements()               hasNext()</div><div class="line">     <span class="keyword">Object</span> nextElement()                    next()</div></pre></td></tr></table></figure></p>
<h4 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h4><p>底层数据结构是<code>链表</code>，查询慢，增删快。<br>线程不安全，效率高。<br><figure class="highlight processing"><table><tr><td class="code"><pre><div class="line">添加功能</div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> addFirst(<span class="keyword">Object</span> e)</div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> addLast(<span class="keyword">Object</span> e)</div><div class="line">获取功能</div><div class="line">    <span class="keyword">public</span> <span class="keyword">Object</span> getFirst()</div><div class="line">    <span class="keyword">public</span> Obejct getLast()</div><div class="line">删除功能</div><div class="line">    <span class="keyword">public</span> <span class="keyword">Object</span> removeFirst()</div><div class="line">    <span class="keyword">public</span> <span class="keyword">Object</span> removeLast()</div></pre></td></tr></table></figure></p>
<h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><p>无序(存储顺序和取出顺序不一致),唯一</p>
<h4 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h4><figure class="highlight processing"><table><tr><td class="code"><pre><div class="line">底层数据结构是哈希表(元素是链表的数组)</div><div class="line">哈希表依赖于哈希值存储</div><div class="line">添加功能底层依赖两个方法：</div><div class="line">    <span class="built_in">int</span> hashCode()</div><div class="line">    <span class="built_in">boolean</span> equals(<span class="keyword">Object</span> obj)</div></pre></td></tr></table></figure>
<h4 id="LinkedHashSet"><a href="#LinkedHashSet" class="headerlink" title="LinkedHashSet"></a>LinkedHashSet</h4><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">元素有序唯一</div><div class="line">由链表保证元素有序</div><div class="line">由哈希表保证元素唯一</div></pre></td></tr></table></figure>
<h4 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a>TreeSet</h4><figure class="highlight gams"><table><tr><td class="code"><pre><div class="line">使用元素的自然顺序对元素进行排序</div><div class="line">或者根据创建 <span class="keyword">set</span> 时提供的 Comparator 进行排序</div><div class="line">具体取决于使用的构造方法。</div></pre></td></tr></table></figure>
<h3 id="Collections"><a href="#Collections" class="headerlink" title="Collections"></a>Collections</h3><figure class="highlight php"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; void sort(<span class="keyword">List</span>&lt;T&gt; <span class="keyword">list</span>)：排序 默认情况下是自然顺序。</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; int binarySearch(<span class="keyword">List</span><span class="meta">&lt;?</span>&gt; <span class="keyword">list</span>,T key):二分查找</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T max(Collection<span class="meta">&lt;?</span>&gt; coll):最大值</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> void reverse(<span class="keyword">List</span><span class="meta">&lt;?</span>&gt; <span class="keyword">list</span>):反转</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> void shuffle(<span class="keyword">List</span><span class="meta">&lt;?</span>&gt; <span class="keyword">list</span>):随机置换</div></pre></td></tr></table></figure>
<h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><figure class="highlight processing"><table><tr><td class="code"><pre><div class="line"><span class="number">1</span>:添加功能</div><div class="line">      V put(K <span class="built_in">key</span>,V value):添加元素。这个其实还有另一个功能?先不告诉你，等会讲</div><div class="line">          如果键是第一次存储，就直接存储元素，返回<span class="keyword">null</span></div><div class="line">          如果键不是第一次存在，就用值把以前的值替换掉，返回以前的值</div><div class="line"> <span class="number">2</span>:删除功能</div><div class="line">      <span class="keyword">void</span> <span class="built_in">clear</span>():移除所有的键值对元素</div><div class="line">      V remove(<span class="keyword">Object</span> <span class="built_in">key</span>)：根据键删除键值对元素，并把值返回</div><div class="line"> <span class="number">3</span>:判断功能</div><div class="line">      <span class="built_in">boolean</span> containsKey(<span class="keyword">Object</span> <span class="built_in">key</span>)：判断集合是否包含指定的键</div><div class="line">      <span class="built_in">boolean</span> containsValue(<span class="keyword">Object</span> value):判断集合是否包含指定的值</div><div class="line">      <span class="built_in">boolean</span> isEmpty()：判断集合是否为空</div><div class="line"> <span class="number">4</span>:获取功能</div><div class="line">      Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet():???</div><div class="line">      V <span class="built_in">get</span>(<span class="keyword">Object</span> <span class="built_in">key</span>):根据键获取值</div><div class="line">      Set&lt;K&gt; keySet():获取集合中所有键的集合</div><div class="line">      Collection&lt;V&gt; values():获取集合中所有值的集合</div><div class="line"> <span class="number">5</span>：长度功能</div><div class="line">      <span class="built_in">int</span> <span class="built_in">size</span>()：返回集合中的键值对的对数</div></pre></td></tr></table></figure>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><h2 id="eclipse快捷键"><a href="#eclipse快捷键" class="headerlink" title="eclipse快捷键"></a>eclipse快捷键</h2><figure class="highlight lsl"><table><tr><td class="code"><pre><div class="line">Ctrl+<span class="number">1</span> 快速修复，快速导包</div><div class="line"></div><div class="line">调试</div><div class="line">F5单步调试进入函数内部。 </div><div class="line">F6单步调试不进入函数内部。 </div><div class="line">F7由函数内部返回到调用处。 </div><div class="line">F8一直执行到下一个断点。</div></pre></td></tr></table></figure>
<h2 id="标记"><a href="#标记" class="headerlink" title="标记"></a>标记</h2><p>2018.4.30 重新修改</p>
]]></content>
    
    <summary type="html">
    
      JavaSE的Collection And Map学习
    
    </summary>
    
    
      <category term="JavaSE" scheme="http://draymonder.me/tags/JavaSE/"/>
    
  </entry>
  
  <entry>
    <title>JavaSE的常用API</title>
    <link href="http://draymonder.me/2018/04/10/javase-api/"/>
    <id>http://draymonder.me/2018/04/10/javase-api/</id>
    <published>2018-04-10T13:00:00.000Z</published>
    <updated>2018-04-30T03:51:05.336Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>学习JDK中提供的各种功能的Java类,API(Application Programming Interface)</p>
<h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h2><h3 id="hashCode"><a href="#hashCode" class="headerlink" title="hashCode"></a>hashCode</h3><p>A: 返回该对象的哈希码值。默认情况下，该方法会根据对象的地址来计算。<br>B: 不同对象的hashCode()一般来说不会相同。<br>&nbsp;&nbsp;&nbsp;&nbsp;但是，同一个对象的hashCode()值肯定相同。</p>
<h3 id="equal"><a href="#equal" class="headerlink" title="equal"></a>equal</h3><p>==和equals()的区别?<br>A:==<br>&nbsp;&nbsp;&nbsp;&nbsp;基本类型：比较的是值是否相同<br>&nbsp;&nbsp;&nbsp;&nbsp;引用类型：比较的是地址值是否相同<br>B:equals()<br>&nbsp;&nbsp;&nbsp;&nbsp;只能比较引用类型。默认情况下，比较的是地址值是否相同。<br>&nbsp;&nbsp;&nbsp;&nbsp;但是，我们可以根据自己的需要重写该方法。<br>&nbsp;&nbsp;&nbsp;&nbsp;String类型 也需要用equals来比较</p>
<h3 id="clone"><a href="#clone" class="headerlink" title="clone"></a>clone</h3><p>创建并返回此对象的一个副本，这种克隆机制十分高效，而且二者之间完全隔离。<br>自定义类实现克隆步骤：<br>&nbsp;&nbsp;&nbsp;&nbsp;A:自定义类实现Cloneable接口，这是一个标记性接口，实现这个接口的类的对象可以实现自我克隆。<br>&nbsp;&nbsp;&nbsp;&nbsp;B:自定义类中重写Object类的clone()方法。<br>&nbsp;&nbsp;&nbsp;&nbsp;C:重写clone()方法时通过super.clone()调用Object类的clone()方法来得到该对象的副本，并返回该副本。</p>
<h4 id="深复制与浅复制"><a href="#深复制与浅复制" class="headerlink" title="深复制与浅复制"></a>深复制与浅复制</h4><p><a href="https://www.cnblogs.com/acode/p/6306887.html" target="_blank" rel="external"> Java的clone()：深复制与浅复制</a><br>clone() 方法  基本数据类型 不会变，但是引用类型会随着克隆的对象改变而本身的属性改变，所以要注意到 clone()方法的正确使用</p>
<h2 id="Scanner"><a href="#Scanner" class="headerlink" title="Scanner"></a>Scanner</h2><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>先nextInt()然后nextLine()，后nextLine()读取错误的问题<br>A:重新创建对象。<br>B:都以字符串形式接收，然后把字符串转成int类型。<br><figure class="highlight dart"><table><tr><td class="code"><pre><div class="line">Scanner <span class="keyword">in</span> = <span class="keyword">new</span> Scanner(System.<span class="keyword">in</span>);</div><div class="line"><span class="built_in">String</span> x = <span class="keyword">in</span>.nextLine();</div><div class="line"><span class="built_in">String</span> str = <span class="keyword">in</span>.nextLine();</div><div class="line"><span class="built_in">int</span> xx = Integer.parseInt(x);</div></pre></td></tr></table></figure></p>
<h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><h3 id="字符串的特点"><a href="#字符串的特点" class="headerlink" title="字符串的特点"></a>字符串的特点</h3><p>A:字符串一旦被赋值，就不能改变。<br>    注意：这里指的是字符串的<code>内容不能改变，而不是引用不能改变</code>。<br>B:字面值作为字符串对象和通过构造方法创建对象的不同<br>    String s = new String(“hello”);和String s = “hello”的区别<br>    前者申请了堆区的对象 和 方法区的字符串常量区的对象<br>    后者只需要去创建 方法区的字符串常量区的对象</p>
<h3 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h3><p>字符串如果是变量相加，先开空间，在拼接。<br>字符串如果是常量相加，是先加，然后在常量池找，如果有就直接返回，否则，就创建。</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><div class="line">String <span class="built_in">s1</span> = <span class="string">"hello"</span><span class="comment">;</span></div><div class="line">String <span class="built_in">s2</span> = <span class="string">"world"</span><span class="comment">;</span></div><div class="line">String <span class="built_in">s3</span> = <span class="string">"helloworld"</span><span class="comment">;</span></div><div class="line"></div><div class="line">System.out.println(<span class="built_in">s3</span> == <span class="built_in">s1</span> + <span class="built_in">s2</span>)<span class="comment">;// false,这里是变量相加</span></div><div class="line">System.out.println(<span class="built_in">s3</span> == <span class="string">"hello"</span> + <span class="string">"world"</span>)<span class="comment">;// true,常量相加</span></div><div class="line">System.out.println(<span class="built_in">s3</span> == <span class="string">"hell"</span> + <span class="string">"oworld"</span>)<span class="comment">; //这个也是true</span></div></pre></td></tr></table></figure>
<h3 id="String的转换功能"><a href="#String的转换功能" class="headerlink" title="String的转换功能"></a>String的转换功能</h3><figure class="highlight processing"><table><tr><td class="code"><pre><div class="line"><span class="built_in">byte</span>[] getBytes():把字符串转换为字节数组。</div><div class="line"><span class="built_in">char</span>[] toCharArray():把字符串转换为字符数组。</div><div class="line"><span class="keyword">static</span> <span class="keyword">String</span> valueOf(<span class="built_in">char</span>[] chs):把字符数组转成字符串。</div><div class="line"><span class="keyword">static</span> <span class="keyword">String</span> valueOf(object i):</div><div class="line">   注意：<span class="keyword">String</span>类的valueOf方法可以把任意类型的数据转成字符串。</div><div class="line"><span class="keyword">String</span> toLowerCase():把字符串转成小写。</div><div class="line"><span class="keyword">String</span> toUpperCase():把字符串转成大写。</div><div class="line"><span class="keyword">String</span> <span class="built_in">concat</span>(<span class="keyword">String</span> <span class="built_in">str</span>):把字符串拼接。</div><div class="line"><span class="built_in">int</span> compareTo(<span class="keyword">String</span> <span class="built_in">str</span>):看源码 先比较是否字符相同，然后比较长度</div><div class="line"><span class="built_in">int</span> compareToIgnoreCase(<span class="keyword">String</span> <span class="built_in">str</span>)</div></pre></td></tr></table></figure>
<h2 id="StringBuffer-StringBuilder"><a href="#StringBuffer-StringBuilder" class="headerlink" title="StringBuffer/StringBuilder"></a>StringBuffer/StringBuilder</h2><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><figure class="highlight sql"><table><tr><td class="code"><pre><div class="line">public StringBuffer append(String str) //添加</div><div class="line">public StringBuffer <span class="keyword">insert</span>(<span class="built_in">int</span> <span class="keyword">offset</span>,<span class="keyword">String</span> <span class="keyword">str</span>) //插入</div><div class="line"><span class="keyword">public</span> StringBuffer deleteCharAt(<span class="built_in">int</span> <span class="keyword">index</span>) //删除</div><div class="line"><span class="keyword">public</span> StringBuffer <span class="keyword">delete</span>(<span class="built_in">int</span> <span class="keyword">start</span>,<span class="built_in">int</span> <span class="keyword">end</span>) //删除</div><div class="line"><span class="keyword">public</span> StringBuffer <span class="keyword">replace</span>(<span class="built_in">int</span> <span class="keyword">start</span>,<span class="built_in">int</span> <span class="keyword">end</span>,<span class="keyword">String</span> <span class="keyword">str</span>) //替换</div><div class="line"><span class="keyword">public</span> <span class="keyword">String</span> <span class="keyword">substring</span>(<span class="built_in">int</span> <span class="keyword">start</span>,<span class="built_in">int</span> <span class="keyword">end</span>) //截取</div></pre></td></tr></table></figure>
<h3 id="StringBuffer-和-String的相互转换"><a href="#StringBuffer-和-String的相互转换" class="headerlink" title="StringBuffer 和 String的相互转换"></a>StringBuffer 和 String的相互转换</h3><figure class="highlight armasm"><table><tr><td class="code"><pre><div class="line"><span class="keyword">String </span>-&gt; <span class="keyword">StringBuffer</span></div><div class="line"><span class="keyword"> </span>   构造方法</div><div class="line"><span class="keyword">StringBuffer </span>-&gt; <span class="keyword">String</span></div><div class="line"><span class="keyword"> </span>   toString()方法</div></pre></td></tr></table></figure>
<h2 id="Arrays"><a href="#Arrays" class="headerlink" title="Arrays"></a>Arrays</h2><h3 id="降序排序"><a href="#降序排序" class="headerlink" title="降序排序"></a>降序排序</h3><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyComparator</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">Integer</span>&gt; </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Integer o1, Integer o2)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> o2 - o1;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Integer[] arr = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> &#125;;</div><div class="line">        <span class="comment">// 第一种方法，直接用Collections的reverseOrder方法</span></div><div class="line">        <span class="comment">// Arrays.sort(arr, Collections.reverseOrder());</span></div><div class="line"></div><div class="line">        <span class="comment">// 第二种方法，自定义类重写Comparator接口的compare方法</span></div><div class="line">        Arrays.sort(arr, <span class="keyword">new</span> MyComparator());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h2><h3 id="基本类型与包装类的对应"><a href="#基本类型与包装类的对应" class="headerlink" title="基本类型与包装类的对应"></a>基本类型与包装类的对应</h3><figure class="highlight gradle"><table><tr><td class="code"><pre><div class="line">基本类型    包装类</div><div class="line"><span class="keyword">byte</span>        <span class="keyword">Byte</span></div><div class="line"><span class="keyword">short</span>       <span class="keyword">Short</span></div><div class="line"><span class="keyword">int</span>         Integer</div><div class="line"><span class="keyword">long</span>        <span class="keyword">Long</span></div><div class="line"><span class="keyword">float</span>       <span class="keyword">Float</span></div><div class="line"><span class="keyword">double</span>      <span class="keyword">Double</span></div><div class="line"><span class="keyword">char</span>        Character</div><div class="line"><span class="keyword">boolean</span>     <span class="keyword">Boolean</span></div></pre></td></tr></table></figure>
<h3 id="String-和-int-的相互转换"><a href="#String-和-int-的相互转换" class="headerlink" title="String 和 int 的相互转换"></a>String 和 int 的相互转换</h3><figure class="highlight processing"><table><tr><td class="code"><pre><div class="line">A:<span class="keyword">String</span> -- <span class="built_in">int</span></div><div class="line">    Integer.parseInt(<span class="string">"100"</span>);</div><div class="line">B:<span class="built_in">int</span> -- <span class="keyword">String</span></div><div class="line"><span class="built_in">int</span> a = <span class="number">100</span>;</div><div class="line"><span class="keyword">String</span> <span class="built_in">str</span> = <span class="string">""</span> + a; <span class="comment">//第一种</span></div><div class="line"><span class="keyword">String</span> <span class="built_in">str</span> = <span class="keyword">String</span>.valueOf(a); <span class="comment">//第二种</span></div><div class="line"><span class="keyword">String</span> <span class="built_in">str</span> = Integer.toString(a); <span class="comment">//第三种</span></div></pre></td></tr></table></figure>
<h3 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h3><figure class="highlight arduino"><table><tr><td class="code"><pre><div class="line"><span class="keyword">String</span> -&gt; <span class="keyword">int</span></div><div class="line">Integer.<span class="built_in">parseInt</span>(<span class="string">"64"</span>, <span class="number">16</span>);</div><div class="line"></div><div class="line"><span class="keyword">int</span> -&gt; <span class="keyword">String</span></div><div class="line">Integer.toString(<span class="number">100</span>,<span class="number">16</span>)</div></pre></td></tr></table></figure>
<h3 id="数据缓冲池"><a href="#数据缓冲池" class="headerlink" title="数据缓冲池"></a>数据缓冲池</h3><figure class="highlight lsl"><table><tr><td class="code"><pre><div class="line"><span class="number">-128</span>到<span class="number">127</span>之间的数据缓冲池问题</div><div class="line"><span class="comment">//byte以内的数据有常量池</span></div><div class="line"></div><div class="line">Integer s1 = <span class="number">122</span>;</div><div class="line">Integer s2 = <span class="number">122</span>;</div><div class="line">System.out.println(s1 == s2); <span class="comment">//返回true</span></div></pre></td></tr></table></figure>
<h2 id="System"><a href="#System" class="headerlink" title="System"></a>System</h2><h3 id="方法-1"><a href="#方法-1" class="headerlink" title="方法"></a>方法</h3><figure class="highlight processing"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> gc()：运行垃圾回收器。 </div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="built_in">exit</span>(<span class="built_in">int</span> status):终止当前正在运行的 Java 虚拟机。参数用作状态码；根据惯例，非 <span class="number">0</span> 的状态码表示异常终止。 </div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> currentTimeMillis():返回以毫秒为单位的当前时间</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> arraycopy(<span class="keyword">Object</span> src,<span class="built_in">int</span> srcPos,<span class="keyword">Object</span> dest,<span class="built_in">int</span> destPos,<span class="built_in">int</span> length)</div></pre></td></tr></table></figure>
<h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><h3 id="常见规则"><a href="#常见规则" class="headerlink" title="常见规则"></a>常见规则</h3><figure class="highlight tp"><table><tr><td class="code"><pre><div class="line">Pattern类中有明确的规则，这里只选取用的比较多的</div><div class="line">A:字符</div><div class="line">    x 字符 x。举例：<span class="string">'a'</span>表示字符a</div><div class="line">    \\ 反斜线字符。</div><div class="line">    \n 新行（换行）符 (<span class="string">'\u000A'</span>) </div><div class="line">    \r 回车符 (<span class="string">'\u000D'</span>)</div><div class="line">    </div><div class="line">B:字符类</div><div class="line">    [abc] a、b 或 c（简单类） </div><div class="line">    [^abc] 任何字符，除了 a、b 或 c（否定） </div><div class="line">    [a-zA-<span class="keyword">Z</span>] a到 z 或 A到 <span class="keyword">Z</span>，两头的字母包括在内（范围） </div><div class="line">    [<span class="number">0</span><span class="number">-9</span>] <span class="number">0</span>到<span class="number">9</span>的字符都包括</div><div class="line">    </div><div class="line">C:预定义字符类</div><div class="line">    . 任何字符。我的就是.字符本身，怎么表示呢? \.</div><div class="line">    \d 数字：[<span class="number">0</span><span class="number">-9</span>]</div><div class="line">    \w 单词字符：[a-zA-Z_<span class="number">0</span><span class="number">-9</span>]</div><div class="line">        在正则表达式里面组成单词的东西必须有这些东西组成</div><div class="line"></div><div class="line">D:边界匹配器</div><div class="line">    ^ 行的开头 </div><div class="line">    $ 行的结尾 </div><div class="line">    \b 单词边界</div><div class="line">    </div><div class="line">E:Greedy 数量词 </div><div class="line">    <span class="keyword">X</span>? <span class="keyword">X</span>，一次或一次也没有</div><div class="line">    <span class="keyword">X</span>* <span class="keyword">X</span>，零次或多次</div><div class="line">    <span class="keyword">X</span>+ <span class="keyword">X</span>，一次或多次</div><div class="line">    <span class="keyword">X</span>&#123;n&#125; <span class="keyword">X</span>，恰好 n 次 </div><div class="line">    <span class="keyword">X</span>&#123;n,&#125; <span class="keyword">X</span>，至少 n 次 </div><div class="line">    <span class="keyword">X</span>&#123;n,m&#125; <span class="keyword">X</span>，至少 n 次，但是不超过 m 次</div></pre></td></tr></table></figure>
<h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><figure class="highlight arduino"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 判断</span></div><div class="line"><span class="keyword">String</span>类的`<span class="keyword">public</span> <span class="keyword">boolean</span> matches(<span class="keyword">String</span> regex)`</div><div class="line"><span class="comment">// 分割</span></div><div class="line"><span class="keyword">String</span>类的`<span class="keyword">public</span> <span class="keyword">String</span>[] split(<span class="keyword">String</span> regex)`</div><div class="line"><span class="comment">// 替换</span></div><div class="line"><span class="keyword">String</span>类的`<span class="keyword">public</span> <span class="keyword">String</span> replaceAll(<span class="keyword">String</span> regex,<span class="keyword">String</span> replacement)`</div><div class="line"><span class="comment">// 获取 详细看Pattern和Matcher</span></div><div class="line"></div><div class="line"><span class="keyword">String</span> s = <span class="string">"I do not love you, could you still love me?"</span>;</div><div class="line"><span class="keyword">String</span> reg = <span class="string">"\\b\\w&#123;4&#125;\\b"</span>;</div><div class="line">Pattern p = Pattern.compile(reg);</div><div class="line">Matcher m = p.matcher(s);</div><div class="line"><span class="built_in">while</span> (m.<span class="built_in">find</span>()) &#123;</div><div class="line">    System.out.<span class="built_in">println</span>(m.group());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h2><h3 id="方法-2"><a href="#方法-2" class="headerlink" title="方法"></a>方法</h3><figure class="highlight stylus"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="title">Date</span><span class="params">()</span></span>:根据当前的默认毫秒值创建日期对象</div><div class="line"><span class="function"><span class="title">Date</span><span class="params">(long date)</span></span>：根据给定的毫秒值创建日期对象</div></pre></td></tr></table></figure>
<h3 id="转换"><a href="#转换" class="headerlink" title="转换"></a>转换</h3><figure class="highlight gauss"><table><tr><td class="code"><pre><div class="line"><span class="built_in">Date</span>   --   <span class="keyword">String</span>(格式化)</div><div class="line">    public final <span class="keyword">String</span> <span class="keyword">format</span>(<span class="built_in">Date</span> <span class="built_in">date</span>)</div><div class="line"></div><div class="line"><span class="built_in">Date</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>();</div><div class="line">SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy年MM月dd日 HH:mm:ss"</span>);</div><div class="line"><span class="keyword">String</span> s = sdf.<span class="keyword">format</span>(d);</div><div class="line"></div><div class="line"><span class="keyword">String</span> -- <span class="built_in">Date</span>(解析)</div><div class="line">    public <span class="built_in">Date</span> <span class="built_in">parse</span>(<span class="keyword">String</span> source)</div><div class="line"><span class="keyword">String</span> str = <span class="string">"2008-08-08 12:12:12"</span>;</div><div class="line">SimpleDateFormat sdf2 = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</div><div class="line"><span class="built_in">Date</span> d = sdf2.<span class="built_in">parse</span>(str);</div></pre></td></tr></table></figure>
<h2 id="Calendar"><a href="#Calendar" class="headerlink" title="Calendar"></a>Calendar</h2><h3 id="方法-3"><a href="#方法-3" class="headerlink" title="方法"></a>方法</h3><figure class="highlight processing"><table><tr><td class="code"><pre><div class="line">Calendar now = Calendar.getInstance();</div><div class="line"></div><div class="line"><span class="built_in">int</span> <span class="built_in">year</span> = now.<span class="built_in">get</span>(Calendar.YEAR);</div><div class="line"><span class="built_in">int</span> <span class="built_in">month</span> = now.<span class="built_in">get</span>(Calendar.MONTH) + <span class="number">1</span>;</div><div class="line"><span class="built_in">int</span> <span class="built_in">day</span> = now.<span class="built_in">get</span>(Calendar.DATE);</div><div class="line"><span class="comment">//设置日历</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="built_in">set</span>(<span class="built_in">int</span> <span class="built_in">year</span>, <span class="built_in">int</span> <span class="built_in">month</span>, <span class="built_in">int</span> date)</div><div class="line"><span class="comment">//修改某个字段的值</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="built_in">add</span>(<span class="built_in">int</span> field, <span class="built_in">int</span> amount);</div></pre></td></tr></table></figure>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://blog.csdn.net/woshifano/article/details/43937597" target="_blank" rel="external">next()和nextLine()的区别</a><br><a href="https://www.cnblogs.com/woshimrf/p/5263018.html" target="_blank" rel="external">java传参的注意事项</a><br><a href="http://blog.leanote.com/post/github-chemist0086/Java%E9%80%9A%E8%BF%87%E5%AE%9E%E7%8E%B0Comparator%E6%8E%A5%E5%8F%A3%E8%87%AA%E5%AE%9A%E4%B9%89Arrays.sort-%E6%8E%92%E5%BA%8F" target="_blank" rel="external">sort降序排列</a><br><a href="https://bbs.csdn.net/topics/360084214" target="_blank" rel="external">sort降序排列</a></p>
<h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><p>Java编辑器 格式化 Ctrl+Shift+F </p>
<h2 id="标记"><a href="#标记" class="headerlink" title="标记"></a>标记</h2><p>2018.4.30 再次修改并复习</p>
]]></content>
    
    <summary type="html">
    
      JavaSE常用API的学习
    
    </summary>
    
    
      <category term="JavaSE" scheme="http://draymonder.me/tags/JavaSE/"/>
    
  </entry>
  
  <entry>
    <title>JavaSE 面向对象</title>
    <link href="http://draymonder.me/2018/04/06/javase-oop/"/>
    <id>http://draymonder.me/2018/04/06/javase-oop/</id>
    <published>2018-04-06T02:00:00.000Z</published>
    <updated>2018-04-25T13:51:35.335Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>&emsp;&emsp;JavaSE oop概述和理解</p>
<h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="基本知识"><a href="#基本知识" class="headerlink" title="基本知识"></a>基本知识</h2><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>成员变量和局部变量的区别：<br>(1)在内存中的位置不同<br>&emsp;&emsp;成员变量：在堆中<br>&emsp;&emsp;局部变量：在栈中<br>(2)生命周期不同<br>&emsp;&emsp;成员变量：随着对象的创建而存在，随着对象的消失而消失<br>&emsp;&emsp;局部变量：随着方法的调用而存在，随着方法的调用完毕而消失<br>(3)初始化值不同<br>&emsp;&emsp;成员变量：有默认值<br>&emsp;&emsp;局部变量：没有默认值，必须定义，赋值，然后才能使用</p>
<h3 id="匿名对象"><a href="#匿名对象" class="headerlink" title="匿名对象"></a>匿名对象</h3><p>(1)没有名字的对象<br>(2)应用场景<br>&emsp;&emsp;A:调用方法，仅仅只调用一次的时候。(用完即被垃圾回收器回收<br>&emsp;&emsp;B:可以作为实际参数传递。</p>
<h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><p>推荐：永远手动自己给出无参构造方法。<br>把构造方法私有，外界就不能再创建对象了</p>
<h3 id="static关键字"><a href="#static关键字" class="headerlink" title="static关键字"></a>static关键字</h3><p>静态变量和成员变量的区别<br>A:所属不同<br>&emsp;&emsp;静态变量：属于<code>类</code>，类变量<br>&emsp;&emsp;成员变量：属于<code>对象</code>，对象变量，实例变量<br>B:内存位置不同<br>&emsp;&emsp;静态变量：方法区的<code>静态区</code><br>&emsp;&emsp;成员变量：<code>堆内存</code><br>C:生命周期不同<br>&emsp;&emsp;静态变量：静态变量是随着<code>类</code>的加载而加载，随着<code>类</code>的消失而消失<br>&emsp;&emsp;成员变量：成员变量是随着<code>对象</code>的创建而存在，随着<code>对象</code>的消失而消失<br>静态的注意事项<br>&emsp;&emsp;A:在静态方法中没有<code>this</code>对象<br>&emsp;&emsp;B:静态方法只能访问静态</p>
<h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><p>(1){…}括起来的代码。<br>(2)分类：<br>&emsp;&emsp;A:<code>局部代码块</code><br>&emsp;&emsp;&emsp;&emsp;用于限定变量的生命周期，及早释放，提高内存利用率。<br>&emsp;&emsp;B:<code>构造代码块</code><br>&emsp;&emsp;&emsp;&emsp;把多个构造方法中相同的代码可以放到这里，每个构造方法执行前，首先执行构造代码块。<br>&emsp;&emsp;C:<code>静态代码块</code><br>&emsp;&emsp;&emsp;&emsp;对类的数据进行初始化，仅仅只执行一次。<br>(3)<strong>顺序问题</strong><br>执行顺序优先级：<code>静态块 &gt; main方法 &gt; 构造块 &gt; 构造方法</code><br>(4)<strong>有继承结构的执行顺序</strong><br><figure class="highlight shell"><table><tr><td class="code"><pre><div class="line">父类静态对象和静态代码块 &gt; 子类静态对象和静态代码块 </div><div class="line"><span class="meta">&gt;</span><span class="bash"> 父类非静态对象和非静态代码块 &gt; 父类构造函数 </span></div><div class="line"><span class="meta">&gt;</span><span class="bash"> 子类非静态对象和非静态代码块 &gt; 子类构造函数</span></div></pre></td></tr></table></figure></p>
<h3 id="final"><a href="#final" class="headerlink" title="final"></a>final</h3><p>(1)是最终的意思，可以修饰类，方法，变量。<br>(2)特点：<br>&emsp;&emsp;A:它修饰的类，不能被继承。<br>&emsp;&emsp;B:它修饰的方法，不能被重写。<br>&emsp;&emsp;C:它修饰的变量，是一个常量。<br>(3)面试相关：<br>    A:局部变量<br>&emsp;&emsp;a:基本类型 值不能发生改变<br>&emsp;&emsp;b:引用类型 地址值不能发生改变，但是对象的内容是可以改变的<br>    B:初始化时机<br>&emsp;&emsp;a:只能初始化一次。<br>&emsp;&emsp;b:常见的给值<br>&emsp;&emsp;&emsp;&emsp;定义的时候。(推荐)<br>&emsp;&emsp;&emsp;&emsp;构造方法完毕前。</p>
<h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><h4 id="抽象类的成员特点"><a href="#抽象类的成员特点" class="headerlink" title="抽象类的成员特点"></a>抽象类的成员特点</h4><p>A:成员变量：有变量，有常量<br>B:构造方法：有构造方法<br>C:成员方法：有抽象，有非抽象</p>
<h4 id="面试问题"><a href="#面试问题" class="headerlink" title="面试问题"></a>面试问题</h4><p>A:抽象类有构造方法，不能实例化，那么构造方法有什么用?<br>&emsp;&emsp;用于子类访问父类数据的初始化<br>B:一个类如果没有抽象方法,却定义为了抽象类，有什么用?<br>&emsp;&emsp;为了不让创建对象<br>C:abstract不能和哪些关键字共存<br>&emsp;&emsp;a:final 冲突<br>&emsp;&emsp;b:private 冲突<br>&emsp;&emsp;c:static 无意义 //通过类来访问一个抽象的方法无意义</p>
<h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><p>(1)接口的特点：<br>A:接口用关键字interface修饰<br>&emsp;&emsp;<code>interface 接口名 {}</code><br>B:类实现接口用implements修饰<br>&emsp;&emsp;<code>class 类名 implements 接口名 {}</code><br>C:接口不能实例化<br>D:接口的实现类<br>&emsp;&emsp;a:是一个抽象类。//没卵用啊<br>&emsp;&emsp;b:是一个具体类，这个类必须重写接口中的所有抽象方法。<br>(2)接口的成员特点：<br>A:成员变量<br>&emsp;&emsp;<strong>只能是常量</strong><br>&emsp;&emsp;默认修饰符：public static final<br>B:构造方法<br>&emsp;&emsp;没有构造方法<br>C:成员方法<br>&emsp;&emsp;只能是抽象的<br>&emsp;&emsp;默认修饰符：public abstract<br>(3)类与类,类与接口,接口与接口<br>    A:类与类<br>        &emsp;&emsp;继承关系，只能单继承，可以多层继承<br>    B:类与接口<br>       &emsp;&emsp; 实现关系，可以单实现，也可以多实现。<br>        &emsp;&emsp;还可以在继承一个类的同时，实现多个接口<br>    C:接口与接口<br>       &emsp;&emsp; 继承关系，可以单继承，也可以多继承</p>
<h2 id="基本特征"><a href="#基本特征" class="headerlink" title="基本特征"></a>基本特征</h2><h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><p>(1)隐藏实现细节，提供公共的访问方式<br>(2)好处：<br>    A:隐藏实现细节，提供公共的访问方式<br>    B:提高代码的复用性<br>    C:提高代码的安全性<br>(3)设计原则<br>&emsp;&emsp;把不想让外界知道的实现细节给隐藏起来，提供公共的访问方式<br>(4)private是封装的一种体现。<br>&emsp;&emsp;封装：类，方法，private修饰成员变量</p>
<h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>(1)继承的好处：<br>    A:提高了代码的复用性<br>    B:提高了代码的维护性<br>    C:让类与类产生了一个关系，是多态的前提<br>(2)继承的弊端：<br>    A:让类的耦合性增强。这样某个类的改变，就会影响其他和该类相关的类。<br>        原则：低耦合，高内聚。<br>        耦合：类与类的关系<br>        内聚：自己完成某件事情的能力<br>    B:打破了封装性<br>(3)特点<br>    A:Java中类只支持单继承<br>    B:Java中可以多层(重)继承(继承体系)<br>(4)Override和Overload<br>    Override 方法重写<br>    Overload 方法重载<br>    方法重载能改变返回值类型，重写不行</p>
<h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><p>(1)同一个对象在不同时刻体现出来的不同状态。<br>(2)多态的前提：<br>    A:有继承或者实现关系。<br>    B:有方法重写。<br>    C:有父类或者父接口引用指向子类对象。<br>    多态的分类：<br>&emsp;&emsp;a:具体类多态<br>&emsp;&emsp;b:抽象类多态<br>&emsp;&emsp;c:接口多态<br>(3)多态中的成员访问特点<br>    A:成员变量<br>&emsp;&emsp;编译看左边，运行看左边<br>    B:构造方法<br>&emsp;&emsp;子类的构造都会默认访问父类构造<br>    C:<strong>成员方法</strong><br>        &emsp;&emsp;编译看左边，运行看<code>右边</code><br>    D:静态方法<br>        &emsp;&emsp;编译看左边，运行看左边<br>(4)多态的好处：<br>    A:提高代码的维护性(继承体现)<br>    B:提高代码的扩展性(多态体现)<br>(5)多态的弊端：<br>    父不能使用子的特有功能。<br>(6)多态中的转型<br>    A:向上转型<br>        &emsp;&emsp;从子到父 Fu f = new Zi();<br>    B:向下转型<br>        &emsp;&emsp;从父到子 Zi z = (Zi)f;</p>
<h2 id="进阶知识"><a href="#进阶知识" class="headerlink" title="进阶知识"></a>进阶知识</h2><h3 id="形式参数和返回值"><a href="#形式参数和返回值" class="headerlink" title="形式参数和返回值"></a>形式参数和返回值</h3><p>(1)形式参数：<br>    &emsp;&emsp;类名：需要该类的对象<br>    &emsp;&emsp;抽象类名：需要该类的子类对象<br>    &emsp;&emsp;接口名：需要该接口的实现类对象<br>(2)返回值类型：<br>    &emsp;&emsp;类名：返回的是该类的对象<br>    &emsp;&emsp;抽象类名：返回的是该类的子类对象<br>    &emsp;&emsp;接口名：返回的是该接口的实现类的对象<br>(3)链式编程<br>    &emsp;&emsp;对象.方法1().方法2()…….方法n();<br>    &emsp;&emsp;这种用法：其实在方法1()调用完毕后，应该一个对象；<br>              &emsp;&emsp;&emsp;&emsp;方法2()调用完毕后，应该返回一个对象。<br>              &emsp;&emsp;&emsp;&emsp;方法n()调用完毕后，可能是对象，也可以不是对象。</p>
<h3 id="包"><a href="#包" class="headerlink" title="包"></a>包</h3><p>(1)其实就是文件夹<br>(2)作用：<br>    A:区分同名的类<br>    B:对类进行分类管理<br>&emsp;&emsp;a:按照功能分<br>&emsp;&emsp;b:按照模块分<br>(3)包的定义(掌握)<br>    package 包名;<br>    多级包用.分开。<br>(4)注意事项：(掌握)<br>    A:package语句必须在文件中的第一条有效语句<br>    B:在一个java文件中，只能有一个package<br>    C:如果没有package，默认就是无包名<br>(5)带包的编译和运行<br>    A:手动式<br>    B:自动式(掌握)<br>&emsp;&emsp;javac -d . HelloWorld.java</p>
<h3 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h3><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><p>权限修饰符：private,默认,protected,public<br>状态修饰符：static,final<br>抽象修饰符：abstract</p>
<h4 id="权限修饰符"><a href="#权限修饰符" class="headerlink" title="权限修饰符"></a>权限修饰符</h4><figure class="highlight routeros"><table><tr><td class="code"><pre><div class="line">            本类     同一个包下   不同包下的子类 不同包下的无关类</div><div class="line">private      Y</div><div class="line">default      Y           Y</div><div class="line">protected    Y           Y             Y</div><div class="line">public       Y           Y             Y            Y</div></pre></td></tr></table></figure>
<h4 id="常见的修饰"><a href="#常见的修饰" class="headerlink" title="常见的修饰"></a>常见的修饰</h4><p>类：<br>&emsp;&emsp;默认,public,final,abstract<br>&emsp;&emsp;常用的：public<br>成员变量：<br>&emsp;&emsp;private,默认,protected,public,static,final<br>&emsp;&emsp;常用的：private<br>构造方法：<br>&emsp;&emsp;private,默认,protected,public<br>&emsp;&emsp;常用的：public<br>成员方法：<br>    &emsp;&emsp;private,默认,protected,public,static,final,abstract<br>    &emsp;&emsp;常用的：public<br>修饰：<br><figure class="highlight aspectj"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> X = <span class="number">10</span>; <span class="comment">//静态常量，用类来访问</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;&#125; <span class="comment">//静态方法</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;&#125;  <span class="comment">//final方法，无法被子类重写</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>; <span class="comment">//抽象方法，子类实现</span></div></pre></td></tr></table></figure></p>
<h3 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h3><h4 id="访问规则"><a href="#访问规则" class="headerlink" title="访问规则"></a>访问规则</h4><p>A:可以直接访问外部类的成员，包括私有<br>B:外部类要想访问内部类成员，必须创建对象</p>
<h4 id="成员内部类"><a href="#成员内部类" class="headerlink" title="成员内部类"></a>成员内部类</h4><p><a href="https://www.cnblogs.com/SQP51312/p/6101688.html" target="_blank" rel="external">成员内部类详解 </a><br>成员内部类不是静态的：<br><figure class="highlight ceylon"><table><tr><td class="code"><pre><div class="line">Outer <span class="keyword">out</span> = <span class="keyword">new</span> Outer();</div><div class="line">Outer.Inner <span class="keyword">in</span> = <span class="keyword">out</span>.<span class="keyword">new</span> Inner(); <span class="comment">//内部类归属于对象实例</span></div></pre></td></tr></table></figure></p>
<p>成员内部类是静态的：<br><figure class="highlight haxe"><table><tr><td class="code"><pre><div class="line">Outer.Inner <span class="keyword">in</span> = <span class="keyword">new</span> <span class="type">Outer</span>.Inner(); <span class="comment">//内部类归属于类</span></div></pre></td></tr></table></figure></p>
<ul>
<li>如果内部类想访问外部类的同名数据，可以通过外部类名限定this对象<br>即类似 <code>Outer.this.num</code>的形式来调用 </li>
</ul>
<h4 id="局部内部类"><a href="#局部内部类" class="headerlink" title="局部内部类"></a>局部内部类</h4><p>局部内部类访问局部变量必须加final修饰。</p>
<h5 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h5><p>A:是局部内部类的简化形式<br>B:前提<br>&emsp;&emsp;存在一个类或者接口<br>C:格式:<br><figure class="highlight haxe"><table><tr><td class="code"><pre><div class="line"><span class="keyword">new</span> <span class="type"></span>类名或者接口名() &#123;</div><div class="line">    重写方法;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>D:本质：<br>&emsp;&emsp;其实是继承该类或者实现接口的子类匿名对象</p>
<h4 id="成员内部类里面为什么不能有静态成员和方法"><a href="#成员内部类里面为什么不能有静态成员和方法" class="headerlink" title="成员内部类里面为什么不能有静态成员和方法"></a>成员内部类里面为什么不能有静态成员和方法</h4><p><a href="https://www.zhihu.com/question/38147948" target="_blank" rel="external">Java Inner Class 为什么不能有static方法</a></p>
<p>大概因为外部类用this指针调用内部类的方法 与 静态成员/方法不能用实例访问的原则相违背？</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>4.25日复习一遍JavaSE面向对象的相关基础知识，并对文章内容做了修正(内部类)</p>
]]></content>
    
    <summary type="html">
    
      JavaSE面向对象的学习
    
    </summary>
    
    
      <category term="JavaSE" scheme="http://draymonder.me/tags/JavaSE/"/>
    
  </entry>
  
  <entry>
    <title>JavaSE的基础语法</title>
    <link href="http://draymonder.me/2018/04/04/javase-learning/"/>
    <id>http://draymonder.me/2018/04/04/javase-learning/</id>
    <published>2018-04-04T09:00:00.000Z</published>
    <updated>2018-04-25T06:40:35.961Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>  终于下定决心要好好攻克Java这个难题了，希望以后自己能坚持下来呢。</p>
<h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="Java语言概述"><a href="#Java语言概述" class="headerlink" title="Java语言概述"></a>Java语言概述</h2><p> Java语言是跨平台的，JVM不是跨平台的<br>    JavaSE      –桌面开发<br>    JavaME      –安卓开发<br>    JavaEE      –Web开发<br>    JVM：保证Java语言跨平台<br>    JRE：Java程序的运行环境 (JVM+类库<br>    JDK：Java程序的开发环境 (JRE+工具</p>
<p> Java程序的开发执行流程：<br>    A:编写java源程序(.java)<br>    B:通过javac命令编译生成.class文件<br>    C:通过java命令运行.class文件<br>  path环境变量里面记录的是可执行性文件，如.exe文件，对可执行文件先在当前路径去找<br>如果没找到就去path环境变量中配置的路径去找<br>  classpath环境变量里记录的是java类的运行文件所在的目录</p>
<h2 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h2><h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h3><p>全部小写 (String 不是关键字</p>
<h3 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h3><p>A:英文大小写字母<br>B:数字<br>C:$和_</p>
<h3 id="常见命名规则"><a href="#常见命名规则" class="headerlink" title="常见命名规则"></a>常见命名规则</h3><p>A:包 全部小写<br>    单级包：小写<br>        举例：package,com<br>    多级包：小写，并用.隔开<br>        举例：com.baidu<br>B:类或者接口<br>    一个单词：首字母大写<br>        举例：Student,Demo<br>    多个单词：每个单词首字母大写<br>        举例：HelloWorld,StudentName<br>C:方法或者变量<br>    一个单词：首字母小写<br>        举例：name,main<br>    多个单词：从第二个单词开始，每个单词首字母大写<br>        举例：studentAge,showAllNames()<br>D:常量<br>    全部大写<br>    一个单词：大写<br>        举例：PI<br>    多个单词：大写，并用_隔开<br>        举例：STUDENT_MAX_AGE</p>
<h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><p>A:字面值常量<br><figure class="highlight groovy"><table><tr><td class="code"><pre><div class="line"><span class="string">A:</span> 字符串常量 <span class="string">"hello"</span></div><div class="line"><span class="string">B:</span> 整数常量  <span class="number">12</span>,<span class="number">23</span></div><div class="line"><span class="string">C:</span> 小数常量  <span class="number">12.345</span></div><div class="line"><span class="string">D:</span> 字符常量  <span class="string">'a'</span>,<span class="string">'A'</span>,<span class="string">'0'</span></div><div class="line"><span class="string">E:</span> 布尔常量  <span class="literal">true</span>,<span class="literal">false</span></div><div class="line"><span class="string">F:</span> 空常量   <span class="literal">null</span>(后面讲)</div></pre></td></tr></table></figure></p>
<p>B:自定义常量<br>以后补充<br>进制转换<br><figure class="highlight avrasm"><table><tr><td class="code"><pre><div class="line"><span class="symbol">A:</span>二进制   由<span class="number">0</span>，<span class="number">1</span>组成。以<span class="number">0</span>b开头。</div><div class="line"><span class="symbol">B:</span>八进制   由<span class="number">0</span>，<span class="number">1</span>，..<span class="number">.7</span>组成。以<span class="number">0</span>开头。</div><div class="line"><span class="symbol">C:</span>十进制   由<span class="number">0</span>，<span class="number">1</span>，..<span class="number">.9</span>组成。整数默认是十进制。</div><div class="line"><span class="symbol">D:</span>十六进制  由<span class="number">0</span>，<span class="number">1</span>，..<span class="number">.9</span>,a,b,c,d,e,f(大小写均可)组成。以<span class="number">0</span><span class="built_in">x</span>开头。</div></pre></td></tr></table></figure></p>
<h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><p>注意变量的默认值，以及作用域，以及赋初值<br>A:基本数据类型：4类8种<br>    整型 byte,short,int,long<br>    浮点数 float double<br>    字符 char<br>    布尔 boolean<br>B:引用数据类型：类，接口，数组。</p>
<h4 id="注意类型"><a href="#注意类型" class="headerlink" title="注意类型"></a>注意类型</h4><p>A:下面两种方式有区别吗?<br>    float f1 = 12.345f;  //这个是本身就是float<br>    float f2 = (float)12.345;  //这个是double转float，丢精度<br>B:下面的程序有问题吗，如果有，在哪里呢?<br>    byte b1 = 3;<br>    byte b2 = 4;<br>    byte b3 = b1 + b2; //变量运算会提升，所以有问题<br>    byte b4 = 3 + 4; //这个是常量，先把结果算出来，看有没有在byte类型中<br>C:下面的操作结果是什么呢?<br>    byte b = (byte)130; //数据运算都是补码运算的<br>D:字符串参与运算<br>    这里其实是字符串的连接</p>
<pre><code>System.out.println(&quot;hello&quot;+&apos;a&apos;+1); //helloa1
System.out.println(&apos;a&apos;+1+&quot;hello&quot;); //98hello
System.out.println(&quot;5+5=&quot;+5+5); //5+5=55
System.out.println(5+5+&quot;=5+5&quot;); //10=5+5
</code></pre><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><p>算术运算符，赋值运算符，比较运算符，逻辑运算符，位运算符，三元运算符</p>
<ol>
<li><p>instanceof(检查是否是类的对象</p>
</li>
<li><p>trick(一个数据对另外一个数据异或两次 结果不变，相同的数据异或为0 然后一个数据异或0还是本身)</p>
</li>
<li><p>异或实现两个数交换<br>a = a ^ b;<br>b = a ^ b; // a ^ b ^ b,然后b = a<br>a = a ^ b; // a ^ b ^ a,然后a = b </p>
</li>
<li><p>所有的三元运算符能够实现的，if语句的第二种格式都能实现。 反之不成立。</p>
</li>
</ol>
<h3 id="控制语句"><a href="#控制语句" class="headerlink" title="控制语句"></a>控制语句</h3><p>JDK7以后可以 枚举,字符串,byte,short,int,char类型或变量，不能long<br>if,switch,for,while,do while,continue,break 大概没什么好写的</p>
<h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><p>注意标签的使用，可以continue 或者 break 多重循环</p>
<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>A:方法不调用不执行<br>B:方法之间是平级关系，不能嵌套定义<br>C:方法定义的时候，参数是用，隔开的<br>D:方法在调用的时候，不用在传递数据类型<br>E:支持方法的重载 即在同一个类中，方法名相同，参数列表不同。</p>
<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="堆和栈的区别"><a href="#堆和栈的区别" class="headerlink" title="堆和栈的区别"></a>堆和栈的区别</h3><p>栈：<br>    数据使用完毕，就消失。<br>堆：<br>    A.每一个new出来的东西都有地址<br>    B.每一个变量都有默认值<br>        byte,short,int,long 0<br>        float,double 0.0<br>        char ‘\u0000’<br>        boolean false<br>        引用类型 null<br>    C.数据使用完毕后，在垃圾回收器空闲的时候回收。</p>
<h3 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h3><figure class="highlight nimrod"><table><tr><td class="code"><pre><div class="line">一维数组:</div><div class="line">    <span class="built_in">int</span> []arr = new <span class="built_in">int</span> [<span class="number">30</span>];</div><div class="line">    <span class="built_in">int</span> []arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</div><div class="line">二维数组:</div><div class="line">    A:数据类型[][] 数组名 = new 数据类型[m][n];</div><div class="line">    B:数据类型[][] 数组名 = new 数据类型[m][];</div><div class="line">    C:数据类型[][] 数组名 = &#123;<span class="meta">&#123;...&#125;</span>,<span class="meta">&#123;...&#125;</span>,<span class="meta">&#123;...&#125;</span>&#125;;</div></pre></td></tr></table></figure>
<h2 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h2><p>Java中只有值传递。<br>    基本类型：形式参数的改变不影响实际参数<br>    引用类型：形式参数的改变直接影响实际参数</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>  4.25日又重新复习了一下Java的基础知识，对知识进行消化，吸收。</p>
]]></content>
    
    <summary type="html">
    
      JavaSE基础语法的学习
    
    </summary>
    
    
      <category term="JavaSE" scheme="http://draymonder.me/tags/JavaSE/"/>
    
  </entry>
  
  <entry>
    <title>Linux学习</title>
    <link href="http://draymonder.me/2018/04/02/the-linux/"/>
    <id>http://draymonder.me/2018/04/02/the-linux/</id>
    <published>2018-04-02T15:59:59.000Z</published>
    <updated>2018-04-02T12:49:24.374Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>  考虑到开发和别人所说的一些linux的便捷性，所以要学一下Linux相关的操作。</p>
<h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="linux-特点"><a href="#linux-特点" class="headerlink" title="linux 特点"></a>linux 特点</h2><p>  1.免费/开源<br>  2.支持多线程/多用户<br>  3.安全性好<br>  4.对内存和文件管理优越。</p>
<h2 id="管理方法"><a href="#管理方法" class="headerlink" title="管理方法"></a>管理方法</h2><h3 id="Shell基本命令"><a href="#Shell基本命令" class="headerlink" title="Shell基本命令"></a>Shell基本命令</h3><figure class="highlight less"><table><tr><td class="code"><pre><div class="line">关机命令</div><div class="line">    <span class="selector-tag">shutdown</span> <span class="selector-tag">-h</span> <span class="selector-tag">now</span> 立即关机</div><div class="line">    <span class="selector-tag">shutdown</span> <span class="selector-tag">-r</span> <span class="selector-tag">now</span> 现在重新启动计算机</div><div class="line">    <span class="selector-tag">reboot</span>     重启计算机</div><div class="line"></div><div class="line">文件和目录操作命令</div><div class="line">    <span class="selector-tag">pwd</span> 显示当前路径</div><div class="line">    <span class="selector-tag">cd</span> 改变目录</div><div class="line">    <span class="selector-tag">ls</span> 列出文件和目录</div><div class="line">     <span class="selector-tag">-a</span> 显示全部文件</div><div class="line">     <span class="selector-tag">-l</span> 显示长列表格式</div><div class="line"></div><div class="line">    <span class="selector-tag">mkdir</span> 建立目录</div><div class="line">    <span class="selector-tag">rm</span> <span class="selector-tag">-rf</span> 删除文件或者目录</div><div class="line">     <span class="selector-tag">-r</span> 删除目录 <span class="selector-tag">-f</span>强制</div><div class="line">    <span class="selector-tag">touch</span> 建立空文件</div><div class="line"></div><div class="line">    <span class="selector-tag">cp</span> <span class="selector-attr">[选项]</span> <span class="selector-attr">[原文件或目录]</span> <span class="selector-attr">[目标目录]</span> 复制命令</div><div class="line">    用来复制或者更改文件名的后缀</div><div class="line">    <span class="selector-tag">mv</span> <span class="selector-attr">[选项]</span> <span class="selector-attr">[原文件或目录]</span> <span class="selector-attr">[目标目录]</span> 剪切命令</div><div class="line">    目录重命名或者剪切</div><div class="line"></div><div class="line">    | 管道命令</div><div class="line">    <span class="selector-tag">grep</span> 查找内容 文件名 在文本中查询内容</div><div class="line"></div><div class="line">    &gt; 文件重定向(覆盖写)</div><div class="line">    &gt;&gt; 追加写</div><div class="line">   </div><div class="line">    <span class="selector-tag">tar</span> <span class="selector-tag">-zxvf</span> ???<span class="selector-class">.tar</span><span class="selector-class">.gz</span> <span class="comment">//解压命令 </span></div><div class="line">    <span class="selector-tag">Ctrl</span>+<span class="selector-tag">L</span> <span class="comment">//清屏</span></div></pre></td></tr></table></figure>
<h3 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h3><figure class="highlight lsl"><table><tr><td class="code"><pre><div class="line">文件权限</div><div class="line">  文件所有者，所在组和其他组</div><div class="line"></div><div class="line"><span class="comment">//添加组名</span></div><div class="line">groupadd 组名</div><div class="line"></div><div class="line"><span class="comment">//查看所有组的信息</span></div><div class="line">cat /etc/group </div><div class="line"></div><div class="line"><span class="comment">//添加用户</span></div><div class="line">useradd -g 组名 用户名 </div><div class="line"></div><div class="line"><span class="comment">//查看所有用户信息</span></div><div class="line">cat /etc/passwd </div><div class="line"></div><div class="line">文件(-) 目录(d) 链接(l)</div><div class="line"></div><div class="line">操作权限</div><div class="line">     r可读 <span class="number">4</span>表示 </div><div class="line">     w可写 <span class="number">2</span>表示</div><div class="line">     x可执行 <span class="number">1</span>表示</div><div class="line"></div><div class="line"><span class="comment">//改变文件权限 (7就是4+2+1 r/w/x)</span></div><div class="line">chmod <span class="number">777</span> 文件名</div><div class="line"></div><div class="line"><span class="comment">//改变某个用户所在的组</span></div><div class="line">usermod -g 组名 用户名</div><div class="line"></div><div class="line"><span class="comment">//改变某个文件或目录的所有者和所属的组</span></div><div class="line">chown 用户名 文件名</div><div class="line"></div><div class="line"><span class="comment">//该命令用来改变指定文件所属的用户组</span></div><div class="line">chgrp 用户所在组 文件名</div></pre></td></tr></table></figure>
<h3 id="磁盘管理"><a href="#磁盘管理" class="headerlink" title="磁盘管理"></a>磁盘管理</h3><h4 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h4><figure class="highlight gauss"><table><tr><td class="code"><pre><div class="line">root 存放用户root的相关文件</div><div class="line">home 存放普通用户的相关文件</div><div class="line">bin 存放常用命令的目录</div><div class="line">sbin 存放具有一定权限的命令(管理员)</div><div class="line">mnt 挂载软驱和光驱的目录</div><div class="line">boot 存放引导相关的文件 <span class="comment">// 一般不要删除目录下文件</span></div><div class="line">etc 存放配置相关文件</div><div class="line">var 存放经常变化的数据</div><div class="line">usr 文件默认安装文件夹</div><div class="line">opt 给主机额外安装软件所摆放的目录</div><div class="line"><span class="keyword">lib</span> 系统使用的函数库的目录</div><div class="line"><span class="function"><span class="keyword">proc</span> 目录下的数据都在内存中，如系统核心，外部设备，网络状态</span></div></pre></td></tr></table></figure>
<h4 id="文件链接"><a href="#文件链接" class="headerlink" title="文件链接"></a>文件链接</h4><p>在Linux系统中，硬链接有两个局限性<br>第一： 只能给文件建立硬链接，而不能给目录建立硬链接<br>第二： 他们不能跨文件系统<br><figure class="highlight livecodeserver"><table><tr><td class="code"><pre><div class="line">经过测试</div><div class="line"><span class="built_in">ln</span> <span class="built_in">file</span> hfile </div><div class="line"><span class="built_in">ln</span> -s <span class="built_in">file</span> sfile </div><div class="line">显示hfile 为硬链接 和<span class="built_in">file</span>是相同的索引节点</div><div class="line">而sfile 则是符号链接，指向<span class="built_in">file</span>的节点，因此删除<span class="built_in">file</span> 那么sfile无效</div></pre></td></tr></table></figure></p>
<h4 id="磁盘分区"><a href="#磁盘分区" class="headerlink" title="磁盘分区"></a>磁盘分区</h4><p>磁盘分区表示，IDE硬盘的设备名称是以/hdX表示，SATA硬盘的设备名称是以/sdX表示的<br>X可以是a~z的小写字母序列<br>在Windows操作系统中，磁盘分区是以盘符的形式表示的，如C:,D:,E:,F:,而在Linux系统中，<br>磁盘分区是以文件的形式表示的，如/dev/sda1,/dev/sda2<br><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><div class="line">ll <span class="string">/dev/sda</span>*    </div><div class="line"><span class="string">//ll</span> 是 <span class="keyword">ls</span> -l的意思</div></pre></td></tr></table></figure></p>
<p>磁盘分区一般包括主分区和拓展分区，逻辑分区是拓展分区的磁盘分区类型。<br>一个磁盘中只能容纳4个主要分区，包括主分区和拓展分区<br>系统为主要分区预留了标识，预留了1~4的序号表示，所以逻辑分区的序号标识从5开始。<br><figure class="highlight less"><table><tr><td class="code"><pre><div class="line"><span class="comment">//查看所有磁盘分区情况</span></div><div class="line"><span class="selector-tag">fdisk</span> <span class="selector-tag">-l</span></div><div class="line"></div><div class="line"><span class="comment">//查磁盘使用情况</span></div><div class="line"><span class="selector-tag">df</span> <span class="selector-attr">[-参数]</span></div><div class="line">比如 <span class="selector-tag">df</span> <span class="selector-tag">-l</span></div><div class="line"></div><div class="line"><span class="comment">//查询目录在哪个分区</span></div><div class="line"><span class="selector-tag">df</span> <span class="selector-attr">[路径]</span></div></pre></td></tr></table></figure></p>
<h3 id="网络管理"><a href="#网络管理" class="headerlink" title="网络管理"></a>网络管理</h3><h4 id="TCP-IP网络基础"><a href="#TCP-IP网络基础" class="headerlink" title="TCP/IP网络基础"></a>TCP/IP网络基础</h4><h5 id="TCP-IP-参考模型"><a href="#TCP-IP-参考模型" class="headerlink" title="TCP/IP 参考模型"></a>TCP/IP 参考模型</h5><p>1.应用层<br>HTTP，HTTPS，FTP，POP3，SMTP，SSH，NTP，DNS，SNMP，DHCP<br>2.传输层<br>3.网络互联层<br>4.链路层</p>
<h5 id="查看本机ip"><a href="#查看本机ip" class="headerlink" title="查看本机ip"></a>查看本机ip</h5><figure class="highlight groovy"><table><tr><td class="code"><pre><div class="line"><span class="string">windows:</span> ipconfig</div><div class="line">linux/<span class="string">unix:</span> ifconfig</div></pre></td></tr></table></figure>
<h5 id="网关和路由器的区别"><a href="#网关和路由器的区别" class="headerlink" title="网关和路由器的区别"></a>网关和路由器的区别</h5><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">网关和路由器最大的区别是是否连接相似的网络。</div><div class="line">如果连接相似的网络，则称为路由器。</div><div class="line">而连接不相似的网络，称为网关。</div><div class="line"></div><div class="line">相似的网络：如果都是互联网上的两个网络，我们称为相似的网络。</div><div class="line">不相似的网络：如果一个是私网，一个是公网。我们称为不相似的网络。</div></pre></td></tr></table></figure>
<h5 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h5><figure class="highlight dts"><table><tr><td class="code"><pre><div class="line"><span class="meta-keyword">/etc/</span>hosts</div><div class="line"><span class="meta-keyword">/etc/</span>NetworkManager/NetworkManager.conf</div><div class="line"><span class="meta-keyword">/etc/</span>network/interfaces</div><div class="line"><span class="meta-keyword">/etc/</span>resolv.conf</div><div class="line"><span class="meta-keyword">/etc/</span>host.conf</div><div class="line"><span class="meta-keyword">/etc/</span>services</div></pre></td></tr></table></figure>
<h5 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h5><p>ifconfig ping netstat route<br>具体协议内容（学计网的时候，再钻研下吧</p>
<h3 id="系统管理"><a href="#系统管理" class="headerlink" title="系统管理"></a>系统管理</h3><h4 id="进程管理和作业控制"><a href="#进程管理和作业控制" class="headerlink" title="进程管理和作业控制"></a>进程管理和作业控制</h4><p>在windows系统中，习惯使用任务管理器来结束未响应的应用程序；<br>在Unbuntu中，可以使用系统监视器来完成这个操作。</p>
<h5 id="系统监视器"><a href="#系统监视器" class="headerlink" title="系统监视器"></a>系统监视器</h5><p>字段含义<br><figure class="highlight haml"><table><tr><td class="code"><pre><div class="line"><span class="tag">%<span class="selector-tag">CPU</span></span> 此字段表示进程所占用CPU资源的百分比</div><div class="line">优先级 表示进程的优先级。系统提供5个级别，包括非常高，高，普通，低，和非常低</div><div class="line">       优先级是由一个Nice值控制的，值越小，优先级越高</div></pre></td></tr></table></figure></p>
<h5 id="ps命令"><a href="#ps命令" class="headerlink" title="ps命令"></a>ps命令</h5><p>进程监视命令 ps(process status)<br><figure class="highlight haml"><table><tr><td class="code"><pre><div class="line">ps [选项]</div><div class="line">  -<span class="ruby">A 显示所有进程</span></div><div class="line"><span class="ruby">  -a 显示一个终端的所有进程，除了会话引线</span></div><div class="line"><span class="ruby">  -u 以用户的格式显示进程信息</span></div><div class="line"><span class="ruby">  -x 显示后台进程运行的参数</span></div><div class="line"><span class="ruby"></span></div><div class="line"><span class="ruby"><span class="symbol">S:</span> 进程状态代码,S表示闲置状态，R表示可执行的</span></div></pre></td></tr></table></figure></p>
<h5 id="kill命令"><a href="#kill命令" class="headerlink" title="kill命令"></a>kill命令</h5><p>结束进程命令<br><figure class="highlight cos"><table><tr><td class="code"><pre><div class="line"><span class="comment">//无法结束进程时候，传送出SIGKILL信号</span></div><div class="line"><span class="keyword">kill</span> -<span class="number">9</span> PID号</div><div class="line"><span class="comment">//如果-9还不能结束进程，那么可以使用-15选项来结束进程</span></div><div class="line"><span class="keyword">kill</span> -<span class="number">15</span> PID号</div><div class="line"></div><div class="line">&amp; 进程在后台运行</div></pre></td></tr></table></figure></p>
<h2 id="Linux编程"><a href="#Linux编程" class="headerlink" title="Linux编程"></a>Linux编程</h2><h3 id="Vim使用"><a href="#Vim使用" class="headerlink" title="Vim使用"></a>Vim使用</h3><figure class="highlight stylus"><table><tr><td class="code"><pre><div class="line">vim -文件名</div><div class="line"><span class="selector-tag">i</span> 插入模式</div><div class="line">ESC + :wq 退出并保存</div></pre></td></tr></table></figure>
<h3 id="Shell脚本编程"><a href="#Shell脚本编程" class="headerlink" title="Shell脚本编程"></a>Shell脚本编程</h3><p>shell脚本文件的后缀可有可无，这是Linecho ux操作系统对文件访问的一个特点。为了让用户知道文件的类型，都会使用.sh作为Shell脚本文件的后缀<br><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">vim hello.sh</div><div class="line">chmod +x hello.sh</div><div class="line">./hello.sh</div><div class="line"></div><div class="line">hello.sh文件</div><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"Hello,World!"</span>;</div><div class="line"><span class="built_in">echo</span> <span class="string">"显示系统时间"</span>;</div><div class="line">date</div></pre></td></tr></table></figure></p>
<h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><figure class="highlight shell"><table><tr><td class="code"><pre><div class="line">var=string</div><div class="line">计算命令</div><div class="line">expr 20 - 15 //操作符两端需要有空格</div><div class="line"></div><div class="line">预定义变量</div><div class="line"><span class="meta">  $</span><span class="bash"><span class="comment">#: 位置参数的数量</span></span></div><div class="line"><span class="meta">  $</span><span class="bash">*或<span class="variable">$@</span>: 所有位置参数的内容</span></div><div class="line"><span class="meta">  $</span><span class="bash">?: 命令执行后的返回值</span></div><div class="line"><span class="meta">  $</span><span class="bash">$: 当前进程的进程ID(PID)</span></div><div class="line"><span class="meta">  $</span><span class="bash">!: 最后一个后台运行进程的进程ID(PID)</span></div><div class="line"><span class="meta">  $</span><span class="bash">0: 当前执行的程序名</span></div><div class="line"></div><div class="line">//使用export命令设置环境变量</div><div class="line">export PATH=/home/draymond/shell:$PATH </div><div class="line"></div><div class="line">//一般值都被Shell看成是字符串</div></pre></td></tr></table></figure>
<h4 id="条件表达式"><a href="#条件表达式" class="headerlink" title="条件表达式"></a>条件表达式</h4><figure class="highlight gams"><table><tr><td class="code"><pre><div class="line">文件比较</div><div class="line">    -e filename <span class="comment">//exist 文件存在为真</span></div><div class="line">    -d filename <span class="comment">//dir 目录存在为真</span></div><div class="line">    -f filename <span class="comment">//file 常规文件存在为真</span></div><div class="line">    -r/-w/-x filename <span class="comment">//可读，可写，可执行</span></div><div class="line">字符串比较</div><div class="line">    -z/-n string <span class="comment">//string长度为零/非零</span></div><div class="line">    string1=string2 <span class="comment">//string1与string2相同</span></div><div class="line">    string1!=string2 <span class="comment">//不同</span></div><div class="line">数值比较</div><div class="line">    num1 -<span class="keyword">eq</span> num2 <span class="comment">//num1==num2</span></div><div class="line">    num1 -<span class="keyword">ne</span> num2 <span class="comment">//num1!=num2</span></div><div class="line">    num1 -<span class="keyword">lt</span> num2 <span class="comment">//num1&lt;num2</span></div><div class="line">    num1 -<span class="keyword">le</span> num2 <span class="comment">//num1&lt;=num2</span></div><div class="line">    num1 -<span class="keyword">gt</span> num2 <span class="comment">//num1&gt;num2</span></div><div class="line">    num1 -<span class="keyword">ge</span> num2 <span class="comment">//num1&gt;=num2</span></div><div class="line">逻辑判断</div><div class="line">    exp1 -a exp2 <span class="comment">//逻辑与</span></div><div class="line">    exp1 -o exp2 <span class="comment">//逻辑或</span></div><div class="line">    ! exo1 <span class="comment">//取反</span></div></pre></td></tr></table></figure>
<h4 id="条件控制"><a href="#条件控制" class="headerlink" title="条件控制"></a>条件控制</h4><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="keyword">if</span>判断</div><div class="line">    <span class="keyword">if</span> [ <span class="variable">$&#123;SHELL&#125;</span> != <span class="string">"/bin/bash"</span> ]</div><div class="line">    <span class="keyword">then</span> </div><div class="line">        <span class="built_in">echo</span> <span class="string">"I Love you"</span>;</div><div class="line">    <span class="keyword">elif</span> [ 1 -eq 1 ]</div><div class="line">    <span class="keyword">then</span> </div><div class="line">        <span class="built_in">echo</span> <span class="string">"Draymonder"</span>;</div><div class="line">    <span class="keyword">else</span> </div><div class="line">        <span class="built_in">echo</span> <span class="string">"I do not love you"</span>;</div><div class="line">    <span class="keyword">fi</span></div></pre></td></tr></table></figure>
<h4 id="循环控制"><a href="#循环控制" class="headerlink" title="循环控制"></a>循环控制</h4><figure class="highlight fsharp"><table><tr><td class="code"><pre><div class="line"><span class="keyword">for</span>循环</div><div class="line">    <span class="keyword">for</span> 变量 <span class="keyword">in</span> 数据列表</div><div class="line">    <span class="keyword">do</span></div><div class="line">      循环体</div><div class="line">    <span class="keyword">done</span></div><div class="line">    或者</div><div class="line">    <span class="keyword">for</span>(( 变量; 条件表达式; 增量))</div><div class="line">    <span class="keyword">do</span></div><div class="line">      循环体</div><div class="line">    <span class="keyword">done</span></div><div class="line"></div><div class="line"><span class="keyword">while</span>循环</div><div class="line">    <span class="keyword">while</span> 条件表达式</div><div class="line">    <span class="keyword">do</span></div><div class="line">    命令循环体</div><div class="line">    <span class="keyword">done</span></div><div class="line"></div><div class="line">until循环 <span class="comment">//不断执行循环体，知道条件表达式为真时退出</span></div><div class="line">    until 条件表达式</div><div class="line">    <span class="keyword">do</span></div><div class="line">    命令循环体</div><div class="line">    <span class="keyword">done</span></div><div class="line"></div><div class="line">select循环</div><div class="line">    select 变量 <span class="keyword">in</span> 数据列表</div><div class="line">    <span class="keyword">do</span></div><div class="line">      命令组</div><div class="line">    <span class="keyword">done</span></div></pre></td></tr></table></figure>
<h4 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h4><p>这里先空着，以后再补</p>
<h2 id="服务器管理"><a href="#服务器管理" class="headerlink" title="服务器管理"></a>服务器管理</h2><h3 id="任务计划"><a href="#任务计划" class="headerlink" title="任务计划"></a>任务计划</h3><h4 id="cron服务"><a href="#cron服务" class="headerlink" title="cron服务"></a>cron服务</h4><p>用来运行周期性的任务<br><figure class="highlight haml"><table><tr><td class="code"><pre><div class="line">crontab [-u user] </div><div class="line">  -<span class="ruby">t /<span class="regexp">/选择文本编辑器</span></span></div><div class="line"><span class="ruby">  -r /<span class="regexp">/删除目前的时程表</span></span></div><div class="line"><span class="ruby">  -l /<span class="regexp">/列出目前的时程表</span></span></div><div class="line"><span class="ruby">  -u user /<span class="regexp">/对指定用的cron任务进行操作</span></span></div><div class="line"><span class="ruby">  -e /<span class="regexp">/建立或编辑cron任务</span></span></div></pre></td></tr></table></figure></p>
<p>调度多个任务<br><figure class="highlight dockerfile"><table><tr><td class="code"><pre><div class="line"><span class="number">1</span>) crontab -e直接写</div><div class="line"><span class="number">2</span>) 把所有的任务，写入到一个可执行文件(<span class="keyword">shell</span><span class="bash">编程)</span></div></pre></td></tr></table></figure></p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>  悟已往之不谏，知来者之可追。实迷途其未远，觉今是而昨非。</p>
]]></content>
    
    <summary type="html">
    
      Linux学习,一些记录
    
    </summary>
    
    
      <category term="Linux" scheme="http://draymonder.me/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>二叉搜索树，二叉堆学习</title>
    <link href="http://draymonder.me/2018/03/23/BinarySearchTree/"/>
    <id>http://draymonder.me/2018/03/23/BinarySearchTree/</id>
    <published>2018-03-23T12:00:00.000Z</published>
    <updated>2018-03-28T09:08:45.950Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Blog 好久没更新了，因为一方面忙着刷题，一方面搞大创(好浪费精力，不太想搞)</p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>今天突然不知道怎么回事，想看看之前买的数据结构书(挑战程序设计竞赛-算法和数据结构)，<br>虽然整本书不太难，但是还是有很多不太明白的知识，光二叉搜索树就倒腾了一下午，怪我太菜了吧</p>
<h3 id="BinarySearchTree"><a href="#BinarySearchTree" class="headerlink" title="BinarySearchTree"></a>BinarySearchTree</h3><figure class="highlight zephir"><table><tr><td class="code"><pre><div class="line"><span class="comment">#include&lt;bits/stdc++.h&gt;</span></div><div class="line">using <span class="keyword">namespace</span> <span class="title">std</span>;</div><div class="line"></div><div class="line">struct node &#123;</div><div class="line">    <span class="keyword">int</span> key;</div><div class="line">    <span class="comment">/*p是parent l是left r是right*/</span></div><div class="line">    node *p,*l,*r;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">node *root;</div><div class="line"></div><div class="line"><span class="comment">//插入操作</span></div><div class="line">void insert(<span class="keyword">int</span> k) &#123;</div><div class="line">    <span class="comment">//y是要找的节点的父节点</span></div><div class="line">    node *y = <span class="keyword">NULL</span>;</div><div class="line">    <span class="comment">//x用来寻找应该插入的位置</span></div><div class="line">    node *x = root;</div><div class="line">    node *z = <span class="keyword">new</span> node;</div><div class="line">    z-&gt;key = k;</div><div class="line">    z-&gt;l = <span class="keyword">NULL</span>;</div><div class="line">    z-&gt;r = <span class="keyword">NULL</span>;</div><div class="line"></div><div class="line">    <span class="keyword">while</span> (x != <span class="keyword">NULL</span>) &#123;</div><div class="line">        y = x;</div><div class="line">        <span class="keyword">if</span>( z-&gt;key &lt; x-&gt;key)</div><div class="line">            x = x-&gt;l;</div><div class="line">        <span class="keyword">else</span></div><div class="line">            x = x-&gt;r;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    z-&gt;p = y;</div><div class="line">    <span class="keyword">if</span>(y == <span class="keyword">NULL</span>)</div><div class="line">        root = z;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">if</span>(z-&gt;key &lt; y-&gt;key)</div><div class="line">            y-&gt;l = z;</div><div class="line">        <span class="keyword">else</span></div><div class="line">            y-&gt;r = z;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//查找操作</span></div><div class="line">node* find(node *u,<span class="keyword">int</span> k) &#123;</div><div class="line">    <span class="keyword">while</span> (u !=<span class="keyword">NULL</span> &amp;&amp; k != u-&gt;key) &#123;</div><div class="line">        <span class="keyword">if</span>(k &lt; u-&gt;key)</div><div class="line">            u = u-&gt;l;</div><div class="line">        <span class="keyword">else</span> u = u-&gt;r;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> u;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//寻找最左面的节点</span></div><div class="line">node* TreeMin(node *x) &#123;</div><div class="line">    <span class="keyword">while</span> (x-&gt;l != <span class="keyword">NULL</span>)</div><div class="line">        x = x-&gt;l;</div><div class="line">    <span class="keyword">return</span> x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//调用这个函数 就说明x下面肯定有右节点</span></div><div class="line">node* TreeNext(node *x) &#123;</div><div class="line">    <span class="keyword">if</span>(x-&gt;r != <span class="keyword">NULL</span>)</div><div class="line">        <span class="keyword">return</span> TreeMin(x-&gt;r);</div><div class="line">    <span class="comment">/*</span></div><div class="line"><span class="comment">    node *y = x-&gt;p;</span></div><div class="line"><span class="comment">    while (y!=NULL &amp;&amp; x == y-&gt;r) &#123;</span></div><div class="line"><span class="comment">        x = y;</span></div><div class="line"><span class="comment">        y = y-&gt;p;</span></div><div class="line"><span class="comment">    &#125;</span></div><div class="line"><span class="comment">    return y;</span></div><div class="line"><span class="comment">    */</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//删除操作 ***慢慢理解</span></div><div class="line">void Delete(node *z) &#123;</div><div class="line">    <span class="comment">//y为要删除的对象 x为y子节点</span></div><div class="line">    node *y,*x;</div><div class="line"></div><div class="line">    <span class="comment">//z没有或只有一个子节点</span></div><div class="line">    <span class="keyword">if</span>(z-&gt;l == <span class="keyword">NULL</span> || z-&gt;r ==<span class="keyword">NULL</span>) y=z;</div><div class="line">    <span class="keyword">else</span> y=TreeNext(z);  <span class="comment">//肯定有两个子节点</span></div><div class="line"></div><div class="line">    <span class="comment">//确定y的子节点x</span></div><div class="line">    <span class="keyword">if</span>(y-&gt;l != <span class="keyword">NULL</span>) &#123;</div><div class="line">        x = y-&gt;l;</div><div class="line">    &#125;<span class="keyword">else</span> x = y-&gt;r;</div><div class="line"></div><div class="line">    <span class="comment">//删除y 就是 x 接到y的父节点上</span></div><div class="line">    <span class="keyword">if</span>(x != <span class="keyword">NULL</span>) &#123;</div><div class="line">        x-&gt;p = y-&gt;p;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(y-&gt;p == <span class="keyword">NULL</span>) &#123;</div><div class="line">        root = x;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">//把x接到y的父节点下</span></div><div class="line">        <span class="keyword">if</span>(y == y-&gt;p-&gt;l)</div><div class="line">            y-&gt;p-&gt;l = x;</div><div class="line">        <span class="keyword">else</span></div><div class="line">            y-&gt;p-&gt;r = x;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(y != z)</div><div class="line">        z-&gt;key = y-&gt;key;</div><div class="line">    free(y);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//中序遍历</span></div><div class="line">void inorder(node *u) &#123;</div><div class="line">    <span class="keyword">if</span>(u == <span class="keyword">NULL</span>) <span class="keyword">return</span>;</div><div class="line">    inorder(u-&gt;l);</div><div class="line">    printf(<span class="string">" %d"</span>,u-&gt;key);</div><div class="line">    inorder(u-&gt;r);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//先序遍历</span></div><div class="line">void preorder(node *u) &#123;</div><div class="line">    <span class="keyword">if</span>(u == <span class="keyword">NULL</span>) <span class="keyword">return</span>;</div><div class="line">    printf(<span class="string">" %d"</span>,u-&gt;key);</div><div class="line">    preorder(u-&gt;l);</div><div class="line">    preorder(u-&gt;r);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">int</span> main ()</div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> n,i,x;</div><div class="line">    string com;</div><div class="line">    scanf(<span class="string">"%d"</span>,&amp;n);</div><div class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;n; i++)</div><div class="line">    &#123;</div><div class="line">        cin &gt;&gt; com;</div><div class="line">        <span class="keyword">if</span>(com == <span class="string">"insert"</span>) &#123;</div><div class="line">            scanf(<span class="string">"%d"</span>,&amp;x);</div><div class="line">            insert(x);</div><div class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(com == <span class="string">"find"</span>) &#123;</div><div class="line">            scanf(<span class="string">"%d"</span>,&amp;x);</div><div class="line">            node *f = find(root,x);</div><div class="line">            <span class="keyword">if</span>(f != <span class="keyword">NULL</span>)</div><div class="line">                puts(<span class="string">"yes"</span>);</div><div class="line">            <span class="keyword">else</span></div><div class="line">                puts(<span class="string">"no"</span>);</div><div class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(com == <span class="string">"delete"</span>) &#123;</div><div class="line">            scanf(<span class="string">"%d"</span>,&amp;x);</div><div class="line">            Delete(find(root,x));</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(com == <span class="string">"print"</span>) &#123;</div><div class="line">            inorder(root); puts(<span class="string">""</span>);</div><div class="line">            preorder(root); puts(<span class="string">""</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="二叉堆"><a href="#二叉堆" class="headerlink" title="二叉堆"></a>二叉堆</h3><p>最大堆： 结点的键值小于等于父节点的键值<br>最小堆： 结点的键值大于等于父节点的键值<br><figure class="highlight cpp"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 20000</span></div><div class="line"></div><div class="line"><span class="keyword">int</span> H,A[MAX+<span class="number">1</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">maxHeapify</span><span class="params">(<span class="keyword">int</span> i)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">int</span> l,r,largest;</div><div class="line">    l= <span class="number">2</span>*i, r =<span class="number">2</span>*i+<span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span>(l&lt;=H &amp;&amp; A[l] &gt; A[i])</div><div class="line">        largest = l;</div><div class="line">    <span class="keyword">else</span></div><div class="line">        largest = i;</div><div class="line">    <span class="keyword">if</span>(r&lt;=H &amp;&amp; A[r] &gt; A[largest]) largest = r;</div><div class="line">    <span class="keyword">if</span>(largest != i)</div><div class="line">    &#123;</div><div class="line">        swap(A[i],A[largest]);</div><div class="line">        maxHeapify(largest);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="built_in">cin</span> &gt;&gt; H;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=H;i++)</div><div class="line">        <span class="built_in">cin</span> &gt;&gt; A[i];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=H/<span class="number">2</span>; i&gt;=<span class="number">1</span>; i--)</div><div class="line">        maxHeapify(i);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=H; i++)</div><div class="line">        <span class="built_in">cout</span> &lt;&lt;<span class="string">" "</span>&lt;&lt;A[i];</div><div class="line">    </div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 20000</span></div><div class="line"></div><div class="line"><span class="keyword">int</span> H,A[MAX+<span class="number">1</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">maxHeapify</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> len)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">int</span> l,r,largest;</div><div class="line">    l= <span class="number">2</span>*i+<span class="number">1</span>, r =<span class="number">2</span>*i+<span class="number">2</span>;</div><div class="line">    <span class="keyword">if</span>(l&lt;len &amp;&amp; A[l] &gt; A[i])</div><div class="line">        largest = l;</div><div class="line">    <span class="keyword">else</span></div><div class="line">        largest = i;</div><div class="line">    <span class="keyword">if</span>(r&lt;len &amp;&amp; A[r] &gt; A[largest]) largest = r;</div><div class="line">    <span class="keyword">if</span>(largest != i)</div><div class="line">    &#123;</div><div class="line">        swap(A[i],A[largest]);</div><div class="line">        maxHeapify(largest,len);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="comment">//先把最大值放到顶端</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=H/<span class="number">2</span><span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)</div><div class="line">            maxHeapify(i,H);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;H;i++)&#123;</div><div class="line">        <span class="built_in">cout</span> &lt;&lt;<span class="string">" "</span>&lt;&lt;A[i];</div><div class="line">    &#125;<span class="built_in">cout</span>&lt;&lt; <span class="built_in">endl</span>;</div><div class="line"></div><div class="line">    <span class="comment">//每次把最大的放到最后</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=H<span class="number">-1</span>;i&gt;<span class="number">0</span>;i--)</div><div class="line">    &#123;</div><div class="line">        swap(A[<span class="number">0</span>],A[i]);</div><div class="line">        maxHeapify(<span class="number">0</span>,i);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;H;i++)&#123;</div><div class="line">        <span class="built_in">cout</span> &lt;&lt;<span class="string">" "</span>&lt;&lt;A[i];</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="built_in">cin</span> &gt;&gt; H;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;H;i++)</div><div class="line">        <span class="built_in">cin</span> &gt;&gt; A[i];</div><div class="line">    solve();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="排序总结"><a href="#排序总结" class="headerlink" title="排序总结"></a>排序总结</h3><p><img src="https://img-blog.csdn.net/20180324082059158?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0JJTkcxOTI2/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="排序总结"></p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>下个月没什么特别多的事情，入门Java和Linux了，希望以后能用Java做题吧(熟悉一下Java，嘿嘿)</p>
]]></content>
    
    <summary type="html">
    
      BinarySearchTree的插入，查找，删除操作和Heap学习
    
    </summary>
    
    
      <category term="Algorithm" scheme="http://draymonder.me/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Digital Ocean 购买VPS搭建SS</title>
    <link href="http://draymonder.me/2018/03/11/Do-ss/"/>
    <id>http://draymonder.me/2018/03/11/Do-ss/</id>
    <published>2018-03-11T07:00:00.000Z</published>
    <updated>2018-03-11T06:00:50.246Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>因为要做项目，所以买了Vps<br>考虑到国内的备案问题，果断听从俺班妹子的意见买了Do的最便宜的VPS</p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>首先要对机房测速，挨个测试<br>最后使用的旧金山的机房，Unbuntu的系统<br>接着按照 <a href="http://blog.csdn.net/Jayson_Leang/article/details/78243554?locationNum=6&fps=1" target="_blank" rel="external"> 搭建SS </a><br>顺利搭建了梯子，成功在YouTuBe上看起了1080p MV，美滋滋</p>
<p>后续还会写php+mysql的环境配置</p>
]]></content>
    
    <summary type="html">
    
      Digital Ocean 购买VPS搭建SS梯子
    
    </summary>
    
    
      <category term="Vps" scheme="http://draymonder.me/tags/Vps/"/>
    
  </entry>
  
  <entry>
    <title>校赛补题记录</title>
    <link href="http://draymonder.me/2018/03/10/the-cumtacm/"/>
    <id>http://draymonder.me/2018/03/10/the-cumtacm/</id>
    <published>2018-03-10T15:59:59.000Z</published>
    <updated>2018-03-28T09:08:41.755Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>  好久没写过算法题了，然后抱着水水的态度去参加了校赛，整体难度还可以，<br>  可能是我太菜了，很多简单题，我都没能顺利地ac掉。<br>  不过心态还是好的，继续努力加油吧。</p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="一起来数数字"><a href="#一起来数数字" class="headerlink" title="一起来数数字"></a>一起来数数字</h3><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>把人排成一排，从左到右从1开始报数，选择三个不同的数字x，y，z。从1开始报数，遇到x的倍数，y的倍数，z的倍数就跳过。比如x=2，y=3，z=5，第一个人报1，第二个人跳过2,3,4,5,6，报7，第三个人跳过8,9,10，报11。<br>给出一个n，问你第n个人报的数字是多少。 </p>
<h4 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h4><p>第一行给出一个T（T≤300），代表样例组数，每组样例给出一个正整数n（n≤1e9）。接下来T行，每行输入四个数字x，y，z，n(其中x,y,z大于1且小于200000),代表题目描述中的意思</p>
<h4 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h4><p>输出第n个人报的数字</p>
<h4 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h4><figure class="highlight basic"><table><tr><td class="code"><pre><div class="line"><span class="number">2</span></div><div class="line"><span class="symbol">2 </span><span class="number">3</span> <span class="number">5</span> <span class="number">2</span></div><div class="line"><span class="symbol">6 </span><span class="number">2</span> <span class="number">4</span> <span class="number">10000</span></div></pre></td></tr></table></figure>
<h4 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h4><figure class="highlight lsl"><table><tr><td class="code"><pre><div class="line"><span class="number">7</span></div><div class="line"><span class="number">19999</span></div></pre></td></tr></table></figure>
<h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>刚开始以为是规律题，不做（太菜了，后来发现是之前遇到过的容斥。<br>然后手写容斥+二分，然而一直WA.<br>比赛完，问队友，才知道自己容斥的不对,果然还是自己太菜了。</p>
<h4 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line">ll x,y,z,n;</div><div class="line"></div><div class="line"><span class="function">ll <span class="title">gcd</span><span class="params">(ll a,ll b)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> b==<span class="number">0</span>? a: gcd(b,a%b);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">ll <span class="title">solve</span><span class="params">(ll b)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    ll ans1 = b/x + b/y + b/z;</div><div class="line"></div><div class="line">    ll xy = (x*y)/gcd(x,y);</div><div class="line">    ll xz = (x*z)/gcd(x,z);</div><div class="line">    ll yz = (y*z)/gcd(y,z);</div><div class="line">    ll ans2 = b/xy + b/yz + b/xz;</div><div class="line"></div><div class="line">    ll xyz=xy*z/gcd(xy,z);</div><div class="line">    ll ans3 = b / xyz;</div><div class="line">    <span class="keyword">return</span> ans1 -ans2 + ans3;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">int</span> t;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</div><div class="line">    <span class="keyword">while</span> (t--) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld %lld %lld %lld"</span>,&amp;x,&amp;y,&amp;z,&amp;n);</div><div class="line">        ll l=<span class="number">1</span>,r=<span class="number">1e18</span>;</div><div class="line">        ll ans = <span class="number">-1</span>;</div><div class="line">        <span class="keyword">while</span> (l &lt;= r)</div><div class="line">        &#123;</div><div class="line">            ll mid = (l+r)/<span class="number">2</span>;</div><div class="line">            <span class="keyword">if</span>(mid - solve(mid) &gt;= n)&#123;</div><div class="line">                ans = mid ,r =mid<span class="number">-1</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> &#123;</div><div class="line">                l = mid +<span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      记录校赛里面没能完成的题目
    
    </summary>
    
    
      <category term="Algorithm" scheme="http://draymonder.me/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>新的期待，新的向往</title>
    <link href="http://draymonder.me/2018/03/10/the-expectation/"/>
    <id>http://draymonder.me/2018/03/10/the-expectation/</id>
    <published>2018-03-10T09:00:00.000Z</published>
    <updated>2018-03-28T09:08:50.227Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>  寒假就快过完了呢，给自己一个心情的整理，以及对未来的向往。</p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="现在"><a href="#现在" class="headerlink" title="现在"></a>现在</h3><h4 id="所做"><a href="#所做" class="headerlink" title="所做"></a>所做</h4><ol>
<li>做完了PAT乙级真题30道。</li>
<li>在学校吃了两星期的外卖!!! </li>
<li>php, mysql的初步入门，并做了一个 雇员管理系统 的项目，蛮low的。 </li>
<li>看完了一本书《你就是想得太多》,一部视频老罗的《时间的朋友》。 </li>
<li>认识了一些人，稍稍开放了自己。 </li>
<li>看了很多MV，喜欢一个人安安静静的。</li>
<li>和初中同学聚会，一起放风筝。</li>
<li>变得自信多了啊~(这是我这个假期收获最大的事情吧)</li>
</ol>
<h4 id="所思"><a href="#所思" class="headerlink" title="所思"></a>所思</h4><p>《你就是想的太多》 -小摘抄<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">  还有人，因为喜欢的人不理自己而不高兴。可是回头想，如果是你</div><div class="line">自己在忙的话，也会不怎么理别人。当然如果别人不喜欢你，不理你，</div><div class="line">那你就更没有必要不高兴了，因为你的喜欢本就是要让你能够有好的</div><div class="line">情绪的。</div><div class="line">  这看似有点儿无奈的边界，也的确是人生的一种境遇，人生的境遇</div><div class="line">本来就是常常发生变化，无论如何你都得保有乐观的心境。</div><div class="line">  有句“诸行无常”的佛语，其意思是说，时间的一切事物时刻都处于</div><div class="line">变化之中。</div><div class="line">  对于不喜欢你的人，要么你自己改变，变得让人家喜欢，要么你不</div><div class="line">如承认这是客观的存在，因为你也有不喜欢的人，何必太过勉强的去</div><div class="line">强人所难呢？“己所不欲勿施于人”这句流传几千年的话至今使用。</div><div class="line">  也就是说，对人生中所有的无常，变化，我们欣然接受就好了。</div><div class="line">即使是不利的，糟糕的，我们也应该避免让自己的情绪变坏。</div></pre></td></tr></table></figure></p>
<p>感谢每一个给与我帮助的人 -小感悟<br><figure class="highlight lsl"><table><tr><td class="code"><pre><div class="line">在<span class="number">2017</span> 年初定下的目标,完成了不少。其实毫无意义,因为</div><div class="line">错过了更重要的。</div><div class="line"></div><div class="line">其实本可以过一种更健康的方式,用更好的状态来过好每一天。</div><div class="line"></div><div class="line">我们谁也不知道自己能活多长时间，我也不知道，但是我感觉必须趁着</div><div class="line">自己年轻，多取得一些成就。</div></pre></td></tr></table></figure></p>
<h3 id="未来"><a href="#未来" class="headerlink" title="未来"></a>未来</h3><h4 id="所想"><a href="#所想" class="headerlink" title="所想"></a>所想</h4><ol>
<li>原谅我的人生格局太小，容不下那么多的人，那么多惊天动地的事。<br>我只想安安稳稳的过一辈子，有一个喜欢的女孩，买一套不大的房子，<br>过着普通但没有太大压力的生活。</li>
<li><del>真希望我能快点儿遇到能让我心动的女孩啊，好看不好看无所谓的吧，<br>只要善良就够了。</del> 我已经遇到我想要保护的人了啊。</li>
</ol>
<h4 id="期待"><a href="#期待" class="headerlink" title="期待"></a>期待</h4><figure class="highlight lsl"><table><tr><td class="code"><pre><div class="line"><span class="number">1.</span> 语言再尝试一下Java, Python </div><div class="line">最后看爱好, 择一而用, 并且熟悉相应的框架</div><div class="line"><span class="number">2.</span> 数据库主选就mysql,然后稍稍看看 db, oracle 然后针对NoSQL了解一下</div><div class="line"><span class="number">3.</span> 操作系统选择Linux入门吧，搭建好Unbuntu了，入门了解一下指令以及操作。</div><div class="line"><span class="number">4.</span> 数据结构/编程方面还要深入。</div><div class="line"><span class="number">5.</span> 保养好身体，新的学期瘦个<span class="number">15</span>斤，对我来说So easy.</div><div class="line"><span class="number">6.</span> 今年想要看一场演唱会，体验那种feel</div><div class="line">待添加的了，说不定会有新的想法</div></pre></td></tr></table></figure>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>  珍惜时间，珍惜身边的人。<br>  一步步变得成熟，一步步靠近喜欢的人，一步步走向自己喜欢的样子，是多么幸福的一件事。<br>  END</p>
]]></content>
    
    <summary type="html">
    
      一心向北，寻找自己的所属
    
    </summary>
    
    
      <category term="Diary" scheme="http://draymonder.me/tags/Diary/"/>
    
  </entry>
  
  <entry>
    <title>php xml操作</title>
    <link href="http://draymonder.me/2018/03/06/the-xml/"/>
    <id>http://draymonder.me/2018/03/06/the-xml/</id>
    <published>2018-03-06T07:20:20.000Z</published>
    <updated>2018-03-28T09:20:09.004Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>xml大多用来存储数据  </p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="入门案例"><a href="#入门案例" class="headerlink" title="入门案例"></a>入门案例</h3><figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span> <span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">stu</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>draymonder<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">stu</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="处理特殊字符"><a href="#处理特殊字符" class="headerlink" title="处理特殊字符"></a>处理特殊字符</h3><figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">imgs</span>&gt;</span>&lt;![CDATA[$&lt;$$#@&gt;]]&gt;<span class="tag">&lt;/<span class="name">imgs</span>&gt;</span></div><div class="line"></div><div class="line">CDATA的基本语法</div><div class="line">&lt;![CDATA[内容]]&gt;</div><div class="line"></div><div class="line">面试题: 如何使用xml文件来传递，保存一个图片</div><div class="line">答: 使用程序先读入到内存</div><div class="line">然后保存到xml的&lt;![CDATA[文件内容]]&gt;中</div></pre></td></tr></table></figure>
<h3 id="xml的PI处理指令"><a href="#xml的PI处理指令" class="headerlink" title="xml的PI处理指令"></a>xml的PI处理指令</h3><figure class="highlight processing"><table><tr><td class="code"><pre><div class="line">通过<span class="literal">PI</span>指令来引入CSS样式文件：</div><div class="line"></div><div class="line"><span class="literal">PI</span>指令的弊端：</div><div class="line">    只对英文的标签起作用，对中文的标签不起作用。 </div><div class="line"></div><div class="line"><span class="comment">//和html引用css大同小异</span></div><div class="line">&lt;?xml-stylesheet  type=<span class="string">"text/css"</span> href=<span class="string">"txt.css"</span>?&gt;  </div><div class="line"></div><div class="line"><span class="comment">//txt.css内容</span></div><div class="line">name&#123;</div><div class="line">    <span class="built_in">background</span>-<span class="built_in">color</span>:<span class="built_in">red</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">age&#123;</div><div class="line">    <span class="built_in">background</span>-<span class="built_in">color</span>:<span class="built_in">green</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="dtd-Document-Type-Definition"><a href="#dtd-Document-Type-Definition" class="headerlink" title="dtd (Document Type Definition"></a>dtd (Document Type Definition</h3><p>为了约束xml文件，使xml语义合法<br><a href="http://blog.csdn.net/gavin_john/article/details/51532756" target="_blank" rel="external">dtd详解</a><br><figure class="highlight dts"><table><tr><td class="code"><pre><div class="line">基本语法</div><div class="line"><span class="params">&lt;!ELEMENT 元素名 类型&gt;</span> <span class="comment">//元素约束</span></div><div class="line"><span class="params">&lt;!ATTLIST 元素名&gt;</span> <span class="comment">//属性约束</span></div><div class="line"><span class="params">&lt;!ENTITY 元素名 "引用内容"&gt;</span> <span class="comment">//用元素名来表示引用的内容</span></div></pre></td></tr></table></figure></p>
<h3 id="phpDom快速入门"><a href="#phpDom快速入门" class="headerlink" title="phpDom快速入门"></a>phpDom快速入门</h3><figure class="highlight php"><table><tr><td class="code"><pre><div class="line">$xmldoc = <span class="keyword">new</span> DomDocument();</div><div class="line">$xmldoc-&gt;load(<span class="string">"test.xml"</span>);</div><div class="line"><span class="comment">//读文件的时候用load方法</span></div><div class="line"><span class="comment">//读字符串的时候用 loadXML方法 </span></div><div class="line"><span class="comment">//eg: $xmldoc-&gt;loadXML('&lt;root&gt;&lt;node/&gt;&lt;/root&gt;');</span></div><div class="line"></div><div class="line"><span class="comment">//找到root节点</span></div><div class="line">$nodeLists=$xmldoc-&gt;getElementsByTagName(<span class="string">"stu"</span>); <span class="comment">//返回的是结果集合 </span></div><div class="line">$nodeList = $nodeLists-&gt;item(<span class="number">0</span>); </div><div class="line"><span class="comment">//上面直接就已经找到root节点了</span></div><div class="line"></div><div class="line"><span class="comment">//新增name节点</span></div><div class="line">$node_name = $xmldoc-&gt;createElement(<span class="string">"name"</span>);</div><div class="line">$node_name-&gt;nodeValue = <span class="string">"我喜欢你"</span>;</div><div class="line"></div><div class="line"><span class="comment">//新增age节点</span></div><div class="line">$node_age = $xmldoc-&gt;createElement(<span class="string">"age"</span>);</div><div class="line">$node_age-&gt;nodeValue = <span class="string">"20"</span>;</div><div class="line"></div><div class="line"><span class="comment">//root节点下挂载 name节点和age节点</span></div><div class="line">$root-&gt;appendChild($node_name); </div><div class="line">$root-&gt;appendChild($node_age);</div><div class="line"></div><div class="line"><span class="comment">//内存中修改完毕以后 还要保存文件内容</span></div><div class="line">$xmldoc-&gt;save(<span class="string">"test.xml"</span>);</div><div class="line"></div><div class="line"><span class="comment">//删除操作</span></div><div class="line">$test-&gt;parentNode-&gt;removeChild($test);</div><div class="line"></div><div class="line"><span class="comment">//更新操作</span></div><div class="line">找到那个需要修改的节点 直接改 nodeValue属性就可以</div><div class="line"></div><div class="line"><span class="comment">//设置属性</span></div><div class="line">setAttribute (string $name ,string $value) </div><div class="line">添加属性为$name 属性值$value的属性</div></pre></td></tr></table></figure>
<h3 id="xpath"><a href="#xpath" class="headerlink" title="xpath"></a>xpath</h3><p>php dom技术可以跨层取出，但是不能保持层次关系，使用xpath可以解决<br><figure class="highlight php"><table><tr><td class="code"><pre><div class="line">这种技术相当于是知道节点所在的层级，然后通过层级关系来找相应的节点</div><div class="line">$xmldoc = <span class="keyword">new</span> DOMDocument();</div><div class="line">$xmldoc-&gt;load(<span class="string">"test.xml"</span>);</div><div class="line">$xpath = <span class="keyword">new</span> DOMXPath($xmldoc);</div><div class="line">$node_list = $xpath-&gt;query(<span class="string">"/stu"</span>);</div><div class="line"><span class="keyword">echo</span> $node_list-&gt;length;</div></pre></td></tr></table></figure></p>
<h3 id="SimpleXML"><a href="#SimpleXML" class="headerlink" title="SimpleXML"></a>SimpleXML</h3><p>以面向对象方式来操作xml文件<br><figure class="highlight php"><table><tr><td class="code"><pre><div class="line"><span class="comment">//装载文件</span></div><div class="line">$stu = simplexml_load_file(<span class="string">"test.xml"</span>);</div><div class="line">$name  = $stu-&gt;name;</div><div class="line"></div><div class="line">var_dump($name);</div><div class="line"><span class="keyword">foreach</span> ($name <span class="keyword">as</span> $value) &#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">"$value &lt;br&gt;"</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//还有装载方式从DOM对象</span></div><div class="line">simplexml_import_dom</div><div class="line"></div><div class="line"><span class="comment">//装载字符串</span></div><div class="line">simplexml_load_string</div></pre></td></tr></table></figure></p>
<h3 id="超链接统一打开问题"><a href="#超链接统一打开问题" class="headerlink" title="超链接统一打开问题"></a>超链接统一打开问题</h3><figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">base</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>比预想的进度晚了好多，寒假也没有接触爬虫和Java,Linux也是空手而归..<br>新的学期还有好多好多的比赛，希望自己能坚持下去，Just do what you want to do.<br>没有那么多的约束，尽情去展现自己的水平吧。<br>To learn,to try.</p>
]]></content>
    
    <summary type="html">
    
      php 中xml编程操作
    
    </summary>
    
    
      <category term="PHP学习" scheme="http://draymonder.me/tags/PHP%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
</feed>
