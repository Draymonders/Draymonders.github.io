<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Draymonder&#39;s Blog</title>
  <subtitle>梦在远方</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://draymonder.me/"/>
  <updated>2018-06-14T11:49:49.605Z</updated>
  <id>http://draymonder.me/</id>
  
  <author>
    <name>Draymonder</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>文档参考</title>
    <link href="http://draymonder.me/2018/07/01/documents/"/>
    <id>http://draymonder.me/2018/07/01/documents/</id>
    <published>2018-07-01T15:00:00.000Z</published>
    <updated>2018-06-14T11:49:49.605Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>&nbsp;&nbsp;&nbsp;&nbsp; 贴一下经常使用的文档及网站，省的一直要收藏夹</p>
<h2 id="学院课件下载"><a href="#学院课件下载" class="headerlink" title="学院课件下载"></a>学院课件下载</h2><p><a href="https://ppt.atcumt.com/" target="_blank" rel="external">学院的课程ppt以及复习资料汇总</a> </p>
<h2 id="Java学习"><a href="#Java学习" class="headerlink" title="Java学习"></a>Java学习</h2><p><a href="https://www.cnblogs.com/fqfanqi/p/6187085.html" target="_blank" rel="external">Java遍历Map对象的四种方式</a><br><a href="https://www.cnblogs.com/xdp-gacl/p/3855702.html" target="_blank" rel="external">Session学习</a></p>
<h2 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h2><p><a href="https://blog.csdn.net/enchanted_zhouh/article/details/76094308" target="_blank" rel="external">浅析C/S、B/S与P2P架构</a></p>
<h2 id="微机原理"><a href="#微机原理" class="headerlink" title="微机原理"></a>微机原理</h2><p><a href="https://blog.csdn.net/dh0144298/article/details/51511386" target="_blank" rel="external">使8253输出1S的方波，使通道外接的发光二极管亮1S，暗1S</a><br><a href="https://blog.csdn.net/u013007900/article/details/50408903" target="_blank" rel="external">可编程定时/计数器 8253/8254</a></p>
<h2 id="markDown语法"><a href="#markDown语法" class="headerlink" title="markDown语法"></a>markDown语法</h2><p><a href="https://www.appinn.com/markdown/index.html" target="_blank" rel="external">Markdown 语法说明</a></p>
<h2 id="ppt模板"><a href="#ppt模板" class="headerlink" title="ppt模板"></a>ppt模板</h2><p><a href="http://www.ypppt.com/" target="_blank" rel="external">ppt模板下载</a></p>
<h2 id="Linux学习"><a href="#Linux学习" class="headerlink" title="Linux学习"></a>Linux学习</h2><p><a href="https://www.bilibili.com/video/av12996446/?from=search&amp;seid=16236444443709215734" target="_blank" rel="external">韩顺平.linux视频教程</a></p>
<h2 id="hexo的Next主题配置"><a href="#hexo的Next主题配置" class="headerlink" title="hexo的Next主题配置"></a>hexo的Next主题配置</h2><p>[Next主题 文章置顶]<a href="https://blog.csdn.net/qwerty200696/article/details/79010629" target="_blank" rel="external">https://blog.csdn.net/qwerty200696/article/details/79010629</a></p>
]]></content>
    
    <summary type="html">
    
      有用的文档汇总
    
    </summary>
    
    
      <category term="Document" scheme="http://draymonder.me/tags/Document/"/>
    
  </entry>
  
  <entry>
    <title>wireshark抓包分析报文</title>
    <link href="http://draymonder.me/2018/06/28/wireshark/"/>
    <id>http://draymonder.me/2018/06/28/wireshark/</id>
    <published>2018-06-28T15:00:00.000Z</published>
    <updated>2018-06-28T14:08:14.763Z</updated>
    
    <content type="html"><![CDATA[<h1 id="现行计算机网络体系结构"><a href="#现行计算机网络体系结构" class="headerlink" title="现行计算机网络体系结构"></a>现行计算机网络体系结构</h1><p>整个报文以太网协议(物理链路) -&gt; ip协议(网络) -&gt; tcp/udp(传输层) -&gt; 应用软件封装协议 (应用层) </p>
<h2 id="报文封装过程"><a href="#报文封装过程" class="headerlink" title="报文封装过程"></a>报文封装过程</h2><p><img src="https://s1.ax1x.com/2018/06/28/PigdXQ.jpg" alt="PigdXQ.jpg"></p>
<h2 id="物理链路层-以太网帧"><a href="#物理链路层-以太网帧" class="headerlink" title="物理链路层 以太网帧"></a>物理链路层 以太网帧</h2><p><img src="https://s1.ax1x.com/2018/06/28/PigD7n.jpg" alt="PigD7n.jpg"></p>
<h2 id="网络层-ip报头"><a href="#网络层-ip报头" class="headerlink" title="网络层 ip报头"></a>网络层 ip报头</h2><p><img src="https://s1.ax1x.com/2018/06/28/Pigskq.jpg" alt="Pigskq.jpg"></p>
<h2 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h2><h3 id="UDP报头"><a href="#UDP报头" class="headerlink" title="UDP报头"></a>UDP报头</h3><p><img src="https://s1.ax1x.com/2018/06/28/Piga6g.jpg" alt="Piga6g.jpg"></p>
<h3 id="TCP报头"><a href="#TCP报头" class="headerlink" title="TCP报头"></a>TCP报头</h3><p><img src="https://s1.ax1x.com/2018/06/28/Pig0mj.jpg" alt="Pig0mj.jpg"></p>
<h2 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h2><h3 id="Http"><a href="#Http" class="headerlink" title="Http"></a>Http</h3><h4 id="Request"><a href="#Request" class="headerlink" title="Request"></a>Request</h4><p><img src="https://s1.ax1x.com/2018/06/28/PiggpT.jpg" alt="PiggpT.jpg"></p>
<h4 id="Response"><a href="#Response" class="headerlink" title="Response"></a>Response</h4><p><img src="https://s1.ax1x.com/2018/06/28/Pig21U.png" alt="Pig21U.png"></p>
<h1 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h1><h2 id="http-Request"><a href="#http-Request" class="headerlink" title="http Request"></a>http Request</h2><p>请求消息<br><img src="https://s1.ax1x.com/2018/06/28/PigRcF.jpg" alt="PigRcF.jpg"><br>详细请求报文<br><br><img src="https://s1.ax1x.com/2018/06/28/Pigyt0.jpg" alt="Pigyt0.jpg"><br>因此分析如下</p>
<h3 id="以太网帧"><a href="#以太网帧" class="headerlink" title="以太网帧"></a>以太网帧</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">以太网 目的地<span class="selector-tag">Destination</span>: <span class="selector-tag">Shenzhen_12</span><span class="selector-pseudo">:af</span><span class="selector-pseudo">:04</span> (74<span class="selector-pseudo">:c3</span><span class="selector-pseudo">:30</span><span class="selector-pseudo">:12</span><span class="selector-pseudo">:af</span><span class="selector-pseudo">:04)</span></div><div class="line">以太网 源地址<span class="selector-tag">Source</span>: 46<span class="selector-pseudo">:34</span><span class="selector-pseudo">:57</span><span class="selector-pseudo">:62</span><span class="selector-pseudo">:57</span><span class="selector-pseudo">:96</span> (46<span class="selector-pseudo">:34</span><span class="selector-pseudo">:57</span><span class="selector-pseudo">:62</span><span class="selector-pseudo">:57</span><span class="selector-pseudo">:96)</span></div><div class="line">以太网 类型 <span class="selector-tag">Type</span>: <span class="selector-tag">IPv4</span> (0<span class="selector-tag">x0800</span>)</div></pre></td></tr></table></figure>
<h3 id="IP报文"><a href="#IP报文" class="headerlink" title="IP报文"></a>IP报文</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">ip报文Header Length: 20 bytes (5)</div><div class="line">ip 报文 总长度 Total Length: 495</div><div class="line">ip标识Identification: 0x5cbd (23741)</div><div class="line">ip 生存时间 Time <span class="keyword">to</span> live: 128</div><div class="line">ip 协议 Protocol: TCP (6)</div><div class="line">ip 源地址Source: 192.168.0.100</div><div class="line">ip 目的地址 Destination: 101.69.121.105</div></pre></td></tr></table></figure>
<h3 id="TCP报文"><a href="#TCP报文" class="headerlink" title="TCP报文"></a>TCP报文</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">tcp 源端口 Source <span class="string">Port:</span> <span class="number">21649</span></div><div class="line">tcp 目的端口Destination <span class="string">Port:</span> <span class="number">80</span></div><div class="line">tcp 确认号 Acknowledgment <span class="string">number:</span> <span class="number">1</span></div></pre></td></tr></table></figure>
<h3 id="http-请求"><a href="#http-请求" class="headerlink" title="http 请求"></a>http 请求</h3><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">http 请求方式Request <span class="function"><span class="keyword">Method</span>:</span> GET</div><div class="line">http 请求资源URL Request </div><div class="line">URI: /c_zoom,h_103/c_cut,x_0,y_0,w_155,h_103/os/news/c0a796c969d136b82e57427155</div><div class="line">f4a1d6.jpg </div><div class="line">http 版本 Request Version: HTTP/<span class="number">1.1</span></div><div class="line">http 请求主机 Host: <span class="number">29</span>e5534ea20a8.cdn.sohucs.com</div><div class="line">http 请求客户端信息 </div><div class="line">User-Agent: Mozilla/<span class="number">5.0</span> (Windows NT <span class="number">10.0</span>; Win64; x64) AppleWebKit/<span class="number">537.36</span> (KHTML, like Gecko) Chrome/<span class="number">67.0</span>.<span class="number">3396.99</span> Safari/<span class="number">537.36</span></div></pre></td></tr></table></figure>
<h2 id="http-Response"><a href="#http-Response" class="headerlink" title="http Response"></a>http Response</h2><p>响应消息<br><img src="https://s1.ax1x.com/2018/06/28/Pig6hV.jpg" alt="Pig6hV.jpg"><br>详细响应报文<br><br><img src="https://s1.ax1x.com/2018/06/28/PigWX4.png" alt="PigWX4.png"></p>
<h3 id="以太网帧-1"><a href="#以太网帧-1" class="headerlink" title="以太网帧"></a>以太网帧</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">以太网 目的地<span class="selector-tag">Destination</span>: 46<span class="selector-pseudo">:34</span><span class="selector-pseudo">:57</span><span class="selector-pseudo">:62</span><span class="selector-pseudo">:57</span><span class="selector-pseudo">:96</span> (46<span class="selector-pseudo">:34</span><span class="selector-pseudo">:57</span><span class="selector-pseudo">:62</span><span class="selector-pseudo">:57</span><span class="selector-pseudo">:96)</span></div><div class="line">以太网 源地址<span class="selector-tag">Source</span>: <span class="selector-tag">Shenzhen_12</span><span class="selector-pseudo">:af</span><span class="selector-pseudo">:04</span> (74<span class="selector-pseudo">:c3</span><span class="selector-pseudo">:30</span><span class="selector-pseudo">:12</span><span class="selector-pseudo">:af</span><span class="selector-pseudo">:04)</span></div><div class="line">以太网 类型 <span class="selector-tag">Type</span>: <span class="selector-tag">IPv4</span> (0<span class="selector-tag">x0800</span>)</div></pre></td></tr></table></figure>
<h3 id="IP报文-1"><a href="#IP报文-1" class="headerlink" title="IP报文"></a>IP报文</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">ip报文Header Length: 20 bytes (5)</div><div class="line">ip 报文 总长度 Total Length: 457</div><div class="line">ip标识Identification: 0xfe19 (65049)</div><div class="line">ip 生存时间 Time <span class="keyword">to</span> live: 56</div><div class="line">ip 协议 Protocol: TCP (6)</div><div class="line">ip 源地址Source: 101.69.121.105</div><div class="line">ip 目的地址 Destination: 192.168.0.100</div></pre></td></tr></table></figure>
<h3 id="TCP报文-1"><a href="#TCP报文-1" class="headerlink" title="TCP报文"></a>TCP报文</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">tcp 源端口 Source <span class="string">Port:</span> <span class="number">80</span></div><div class="line">tcp 目的端口Destination <span class="string">Port:</span> <span class="number">21649</span></div><div class="line">tcp 确认号 Sequence <span class="string">number:</span> <span class="number">27361</span></div></pre></td></tr></table></figure>
<h3 id="http-响应"><a href="#http-响应" class="headerlink" title="http 响应"></a>http 响应</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">http 版本 Request <span class="string">Version:</span> HTTP/<span class="number">1.1</span></div><div class="line">http 响应码 Status <span class="string">Code:</span> <span class="number">200</span>  </div><div class="line">http 响应码描述 [Status Code <span class="string">Description:</span> OK] (表示请求已成功，请求所希望的响应头或数据体将随此响应返回) </div><div class="line">http 文件类型 Content-<span class="string">Type:</span> image/jpeg (jpeg格式的图片字节流文件)</div><div class="line">http 文件长度 Content-<span class="string">Length:</span> <span class="number">27284</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      wireshark抓包分析http报文
    
    </summary>
    
    
      <category term="网络" scheme="http://draymonder.me/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>Jsp中导入类出错</title>
    <link href="http://draymonder.me/2018/06/25/java-importClassError/"/>
    <id>http://draymonder.me/2018/06/25/java-importClassError/</id>
    <published>2018-06-25T13:00:00.000Z</published>
    <updated>2018-06-25T13:23:27.328Z</updated>
    
    <content type="html"><![CDATA[<h1 id="出错方式"><a href="#出错方式" class="headerlink" title="出错方式"></a>出错方式</h1><p>显示cannot be resolved to a type<br><img src="https://s1.ax1x.com/2018/06/25/PCwcYd.png" alt="PCwcYd.png"> </p>
<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>接着把tomcat,jdk重装了一下，还是不行；然后发现没有编译成相应的<code>.class</code>文件，发现这个问题后，继续搜索，发现<code>Eclipse</code>没能自动编译，接着困扰了5个小时的问题就找到了解决方法<br><img src="https://s1.ax1x.com/2018/06/25/PCwf6P.jpg" alt="PCwf6P.jpg"><br>是的，就是没有开 build automatically</p>
]]></content>
    
    <summary type="html">
    
      Jsp中导入类出错
    
    </summary>
    
    
      <category term="JavaEE" scheme="http://draymonder.me/tags/JavaEE/"/>
    
  </entry>
  
  <entry>
    <title>Java Web中实现Servlet的方式</title>
    <link href="http://draymonder.me/2018/06/25/javaee-servlet/"/>
    <id>http://draymonder.me/2018/06/25/javaee-servlet/</id>
    <published>2018-06-25T09:00:00.000Z</published>
    <updated>2018-06-25T07:40:18.518Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Servlet是什么"><a href="#Servlet是什么" class="headerlink" title="Servlet是什么?"></a>Servlet是什么?</h1><p>Servlet是Java Web三大组件之一，它属于动态资源。Servlet的作用是处理请求，服务器会把接收到的请求交给Servlet来处理，在Servlet中通常需要:</p>
<ul>
<li>接受数据请求</li>
<li>处理请求</li>
<li>完成响应</li>
</ul>
<h1 id="实现Servlet的方式"><a href="#实现Servlet的方式" class="headerlink" title="实现Servlet的方式"></a>实现Servlet的方式</h1><ul>
<li>实现javax.servlet.Servlet接口</li>
<li>继承javax.servlet.GenericServlet类</li>
<li>继承javax.servlet.http.HttpServlet类</li>
</ul>
<h1 id="什么是域对象"><a href="#什么是域对象" class="headerlink" title="什么是域对象?"></a>什么是域对象?</h1><p>域对象所具有的特点是:</p>
<ul>
<li>能够存数据 setAttribute()</li>
<li>能够取数据 getAttribute()</li>
</ul>
<h2 id="JavaWeb-四大域对象"><a href="#JavaWeb-四大域对象" class="headerlink" title="JavaWeb 四大域对象"></a>JavaWeb 四大域对象</h2><ul>
<li>PageContext</li>
<li>ServletRequest</li>
<li>HttpSession</li>
<li>ServletContext<h2 id="Servlet类-三大域对象"><a href="#Servlet类-三大域对象" class="headerlink" title="Servlet类 三大域对象"></a>Servlet类 三大域对象</h2></li>
<li>request</li>
<li>session</li>
<li>application</li>
</ul>
<h1 id="参考博文"><a href="#参考博文" class="headerlink" title="参考博文"></a>参考博文</h1><p><a href="http://codingxiaxw.cn/2016/09/24/6-java-web%E5%AE%9E%E7%8E%B0Servlet%E7%9A%84%E6%96%B9%E5%BC%8F/" target="_blank" rel="external">Java Web中实现Servlet的方式</a></p>
<p><a href="https://blog.csdn.net/BeauXie/article/details/52280165" target="_blank" rel="external">JavaWeb的四大域对象总结</a></p>
]]></content>
    
    <summary type="html">
    
      Java Web中实现Servlet的方式
    
    </summary>
    
    
      <category term="JavaEE" scheme="http://draymonder.me/tags/JavaEE/"/>
    
  </entry>
  
  <entry>
    <title>JavaSE 重拾基础</title>
    <link href="http://draymonder.me/2018/06/23/javase-practice/"/>
    <id>http://draymonder.me/2018/06/23/javase-practice/</id>
    <published>2018-06-23T15:00:00.000Z</published>
    <updated>2018-06-25T13:23:54.585Z</updated>
    
    <content type="html"><![CDATA[<h1 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h1><p><a href="https://www.cnblogs.com/happyzm/p/6482886.html" target="_blank" rel="external">JUnit</a></p>
<h1 id="String-方法"><a href="#String-方法" class="headerlink" title="String 方法"></a>String 方法</h1><h2 id="split"><a href="#split" class="headerlink" title="split"></a>split</h2><figure class="highlight excel"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">public String[] split(String regex,</div><div class="line">                      <span class="built_in">int</span> limit)</div><div class="line">根据匹配给定的正则表达式来拆分此字符串</div><div class="line">limit 参数控制模式应用的次数，因此影响所得数组的长度。</div><div class="line">如果该限制 <span class="built_in">n</span> 大于 <span class="number">0</span>，则模式将被最多应用 <span class="built_in">n</span> - <span class="number">1</span> 次，数组的长度将不会大于 <span class="built_in">n</span>，</div><div class="line">    而且数组的最后一项将包含所有超出最后匹配的定界符的输入。</div><div class="line">如果 <span class="built_in">n</span> 为非正，那么模式将被应用尽可能多的次数，而且数组可以是任何长度。</div><div class="line">如果 <span class="built_in">n</span> 为 <span class="number">0</span>，那么模式将被应用尽可能多的次数，数组可以是任何长度，并且结尾空字符串将被丢弃。</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      自己动手写一些JavaSE的代码，熟练API，巩固基础，待更新~
    
    </summary>
    
    
      <category term="JavaSE" scheme="http://draymonder.me/tags/JavaSE/"/>
    
  </entry>
  
  <entry>
    <title>剑指offer 用两个栈实现队列</title>
    <link href="http://draymonder.me/2018/06/23/twoStackToQueue/"/>
    <id>http://draymonder.me/2018/06/23/twoStackToQueue/</id>
    <published>2018-06-23T07:00:00.000Z</published>
    <updated>2018-06-23T06:33:04.416Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.nowcoder.com/practice/54275ddae22f475981afa2244dd448c6?tpId=13&amp;tqId=11158&amp;tPage=1&amp;rp=1&amp;ru=/ta/coding-interviews&amp;qru=/ta/coding-interviews/question-ranking" target="_blank" rel="external">题目链接</a></p>
<p>每次push的时候 就从stack2取回数据到stack1 然后push(val)<br>每次pop的时候  就从stack1取回数据到stack2 然后pop<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution</div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="keyword">void</span> <span class="keyword">push</span>(<span class="keyword">int</span> node) &#123;</div><div class="line">       <span class="keyword">while</span>(stack2.<span class="keyword">size</span>()) &#123;</div><div class="line">           <span class="keyword">int</span> ans = stack2.top();</div><div class="line">            stack1.<span class="keyword">push</span>(ans);</div><div class="line">            stack2.<span class="keyword">pop</span>();</div><div class="line">       &#125;</div><div class="line">       stack1.<span class="keyword">push</span>(node); </div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> <span class="keyword">pop</span>() &#123;</div><div class="line">        <span class="keyword">while</span> (stack1.<span class="keyword">size</span>()) &#123;</div><div class="line">            <span class="keyword">int</span> ans = stack1.top();</div><div class="line">            stack2.<span class="keyword">push</span>(ans);</div><div class="line">            stack1.<span class="keyword">pop</span>();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(stack2.<span class="keyword">size</span>() ==<span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">NULL</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> ans = stack2.top();</div><div class="line">        stack2.<span class="keyword">pop</span>();</div><div class="line">        <span class="keyword">return</span> ans;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="keyword">private</span>:</div><div class="line">    stack&lt;<span class="keyword">int</span>&gt; stack1;</div><div class="line">    stack&lt;<span class="keyword">int</span>&gt; stack2;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      剑指offer 用两个栈实现队列
    
    </summary>
    
    
      <category term="Algorithm" scheme="http://draymonder.me/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>剑指offer 重建二叉树</title>
    <link href="http://draymonder.me/2018/06/23/reBuildBinaryTree/"/>
    <id>http://draymonder.me/2018/06/23/reBuildBinaryTree/</id>
    <published>2018-06-23T07:00:00.000Z</published>
    <updated>2018-06-23T06:06:32.953Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.nowcoder.com/practice/8a19cbe657394eeaac2f6ea9b0f6fcf6?tpId=13&amp;tqId=11157&amp;tPage=1&amp;rp=1&amp;ru=/ta/coding-interviews&amp;qru=/ta/coding-interviews/question-ranking" target="_blank" rel="external">题目链接</a></p>
<p>利用递归 不断重构出左儿子和右儿子<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Definition for binary tree</span></div><div class="line"><span class="comment"> * struct TreeNode &#123;</span></div><div class="line"><span class="comment"> *     int val;</span></div><div class="line"><span class="comment"> *     TreeNode *left;</span></div><div class="line"><span class="comment"> *     TreeNode *right;</span></div><div class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></div><div class="line"><span class="comment"> * &#125;;</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="comment">//@param 先序遍历，start，end，中序遍历，start，end</span></div><div class="line">    <span class="function">TreeNode* <span class="title">buildBinaryTree</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; pre, <span class="keyword">int</span> st1, <span class="keyword">int</span> ed1,</span></span></div><div class="line"><span class="function"><span class="params">                                   <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vin, <span class="keyword">int</span> st2, <span class="keyword">int</span> ed2)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(st1 &gt; ed1 || st2 &gt; ed2) <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">        TreeNode *root = <span class="keyword">new</span> TreeNode(pre[st1]);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=st2; i&lt;=ed2; i++) &#123;</div><div class="line">            <span class="keyword">if</span>(vin[i] == pre[st1]) &#123;</div><div class="line">                root-&gt;left = buildBinaryTree(pre, st1+<span class="number">1</span>, st1+i-st2, vin, st2, i<span class="number">-1</span>);</div><div class="line">                root-&gt;right = buildBinaryTree(pre, st1+i-st2+<span class="number">1</span>, ed1, vin, i+<span class="number">1</span>,ed2);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> root;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function">TreeNode* <span class="title">reConstructBinaryTree</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; pre,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vin)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(pre.size() == <span class="number">0</span> &amp;&amp; vin.size() ==<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">        <span class="keyword">if</span>(pre.size() != vin.size()) <span class="keyword">return</span> <span class="literal">NULL</span>;    </div><div class="line">        <span class="keyword">return</span> buildBinaryTree(pre, <span class="number">0</span>, pre.size()<span class="number">-1</span>, vin, <span class="number">0</span>, vin.size()<span class="number">-1</span>);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      给出先序和中序遍历，还原原来的二叉树
    
    </summary>
    
    
      <category term="Algorithm" scheme="http://draymonder.me/tags/Algorithm/"/>
    
      <category term="BinaryTree" scheme="http://draymonder.me/tags/BinaryTree/"/>
    
  </entry>
  
  <entry>
    <title>Jdbc入门学习</title>
    <link href="http://draymonder.me/2018/06/14/jdbc-init/"/>
    <id>http://draymonder.me/2018/06/14/jdbc-init/</id>
    <published>2018-06-14T15:00:00.000Z</published>
    <updated>2018-06-24T08:13:20.390Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MySQL的Driver下载及导入"><a href="#MySQL的Driver下载及导入" class="headerlink" title="MySQL的Driver下载及导入"></a>MySQL的Driver下载及导入</h1><h2 id="Driver下载"><a href="#Driver下载" class="headerlink" title="Driver下载"></a>Driver下载</h2><p>点击<a href="https://dev.mysql.com/downloads/connector/j/" target="_blank" rel="external">下载链接</a>，进行下载<br><br><img src="https://s1.ax1x.com/2018/06/24/P9WZEq.jpg" alt="P9WZEq.jpg"></p>
<h2 id="创建Floder"><a href="#创建Floder" class="headerlink" title="创建Floder"></a>创建Floder</h2><p>创建Floder并命名<br><br><img src="https://s1.ax1x.com/2018/06/24/P9WeU0.jpg" alt="P9WeU0.jpg"><br><img src="https://s1.ax1x.com/2018/06/24/P9WADs.jpg" alt="P9WADs.jpg"></p>
<h2 id="build-Path"><a href="#build-Path" class="headerlink" title="build Path"></a>build Path</h2><p>将jar拖入lib中,并右键build path<br><br><img src="https://s1.ax1x.com/2018/06/24/P9WEbn.jpg" alt="P9WEbn.jpg"></p>
<h1 id="定义学生类"><a href="#定义学生类" class="headerlink" title="定义学生类"></a>定义学生类</h1><p>为了方便操作，定义了学生类<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">package jdbc;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> Student &#123;</div><div class="line">	<span class="keyword">private</span> <span class="built_in">String</span> Id;</div><div class="line">	<span class="keyword">private</span> <span class="built_in">String</span> Name;</div><div class="line">	<span class="keyword">private</span> <span class="built_in">String</span> Sex;</div><div class="line">	<span class="keyword">private</span> <span class="built_in">String</span> Age;</div><div class="line">	Student(<span class="built_in">String</span> Name, <span class="built_in">String</span> Sex, <span class="built_in">String</span> Age) &#123;</div><div class="line">		<span class="keyword">this</span>.Age = Age;</div><div class="line">		<span class="keyword">this</span>.Sex = Sex;</div><div class="line">		<span class="keyword">this</span>.Name = Name;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">public</span> <span class="built_in">String</span> getId() &#123;</div><div class="line">		<span class="keyword">return</span> Id;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">public</span> <span class="built_in">void</span> setId(<span class="built_in">String</span> id) &#123;</div><div class="line">		Id = id;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">public</span> <span class="built_in">String</span> getName() &#123;</div><div class="line">		<span class="keyword">return</span> Name;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">public</span> <span class="built_in">void</span> setName(<span class="built_in">String</span> name) &#123;</div><div class="line">		Name = name;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">public</span> <span class="built_in">String</span> getSex() &#123;</div><div class="line">		<span class="keyword">return</span> Sex;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">public</span> <span class="built_in">void</span> setSex(<span class="built_in">String</span> sex) &#123;</div><div class="line">		Sex = sex;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">public</span> <span class="built_in">String</span> getAge() &#123;</div><div class="line">		<span class="keyword">return</span> Age;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">public</span> <span class="built_in">void</span> setAge(<span class="built_in">String</span> age) &#123;</div><div class="line">		Age = age;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="keyword">public</span> <span class="built_in">String</span> toString() &#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"Name:"</span> + Name + <span class="string">" Sex:"</span> + Sex + <span class="string">" Age:"</span> + Age +<span class="string">"\n"</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="Jdbc工具类"><a href="#Jdbc工具类" class="headerlink" title="Jdbc工具类"></a>Jdbc工具类</h1><figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">String</span> user = <span class="string">"root"</span>;</div><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">String</span> pwd = <span class="string">"root"</span>;</div><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">String</span> url = <span class="string">"jdbc:mysql://localhost:3306/draymonder?useUnicode=true&amp;&amp;characterEncoding=utf-8&amp;serverTimezone=UTC"</span>;</div><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">String</span> className = <span class="string">"com.mysql.cj.jdbc.Driver"</span>;</div><div class="line">Connection conn = <span class="keyword">null</span>;</div><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> accessMySQL()&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        Class.forName(className);</div><div class="line">        System.out.<span class="built_in">println</span>(<span class="string">"---加载驱动类成功---"</span>);</div><div class="line">        conn = DriverManager.getConnection(url,user,pwd);</div><div class="line">        System.out.<span class="built_in">println</span>(<span class="string">"---链接数据库成功---"</span>);</div><div class="line">        Statement stmt = conn.createStatement();</div><div class="line">        <span class="keyword">String</span> sql = <span class="string">"select name,sex,age from stu"</span>;</div><div class="line">        ResultSet res = stmt.executeQuery(sql);</div><div class="line">        <span class="keyword">while</span> (res.next()) &#123;</div><div class="line">            <span class="keyword">String</span> name = res.getString(<span class="string">"name"</span>);</div><div class="line">            <span class="keyword">String</span> sex = res.getString(<span class="string">"sex"</span>);</div><div class="line">            <span class="keyword">String</span> age = res.getString(<span class="string">"age"</span>);</div><div class="line">            Student stu = <span class="keyword">new</span> Student(name, sex, age);</div><div class="line">            System.out.<span class="built_in">println</span>(stu);</div><div class="line">        &#125;</div><div class="line">        res.close();</div><div class="line">        stmt.close();</div><div class="line">        conn.close();</div><div class="line">    &#125;<span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Jdbc入门学习记录
    
    </summary>
    
    
      <category term="JavaEE" scheme="http://draymonder.me/tags/JavaEE/"/>
    
  </entry>
  
  <entry>
    <title>20岁的感想</title>
    <link href="http://draymonder.me/2018/06/14/the-20years/"/>
    <id>http://draymonder.me/2018/06/14/the-20years/</id>
    <published>2018-06-13T16:00:00.000Z</published>
    <updated>2018-06-21T14:15:18.621Z</updated>
    
    <content type="html"><![CDATA[<h1 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h1><p>  20岁说来就来了，时间真的是个无情的东西呢，悄无声息，又无处可拦。<br><br>  终于没能实现自己的目标，没能变成自己想要的样子。<br><br>  终日沉浸在鸡汤中，始终没有大的改变。<br></p>
<p>  或许，我一开始的动机，已经成为此刻阻碍我前进的拦路虎。<br><br>  或许，我可以尝试着慢下来自己前进的脚步。<br><br>  此处，风景独好，为何偏要欣赏他处美景。<br></p>
<p>  让自己慢下来，让自己学有所获，让自己踏实，而不是流于形式。<br><br>  请从此刻开始去追寻自己内心中真正的挚热，而绝非要人云亦云，在追寻梦想的道路上，人云亦云将会是你最大的敌人<br><br>  O ever youthful, O ever weeping<br><br>  <img src="https://s1.ax1x.com/2018/06/13/CXMuQS.jpg" alt="永远年轻，永远热泪盈眶"><br>  <img src="https://s1.ax1x.com/2018/06/13/CXMKsg.jpg" alt="聊天记录"><br>  端午回家以后一些新的感想<br><br>  我是家里的宝贝，我是独一无二的我，因为没有达到自己的目标就放弃自己的人，那是真正的懦弱<br><br>  人生漫漫路，不在意彼时的得失，朝着自己的方向，静心修养。<br><br>  愿你不负来路，不畏前程<br></p>
]]></content>
    
    <summary type="html">
    
      20岁~ 迷茫与理想相交织
    
    </summary>
    
    
      <category term="Diary" scheme="http://draymonder.me/tags/Diary/"/>
    
  </entry>
  
  <entry>
    <title>二叉树打印</title>
    <link href="http://draymonder.me/2018/06/05/BinaryTreeBFS/"/>
    <id>http://draymonder.me/2018/06/05/BinaryTreeBFS/</id>
    <published>2018-06-05T14:00:00.000Z</published>
    <updated>2018-06-05T12:46:00.656Z</updated>
    
    <content type="html"><![CDATA[<h1 id="二叉树打印"><a href="#二叉树打印" class="headerlink" title="二叉树打印"></a>二叉树打印</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目:"></a>题目:</h2><p>有一棵二叉树，请设计一个算法，按照层次打印这棵二叉树。</p>
<p>给定二叉树的根结点root，请返回打印结果，结果按照每一层一个数组进行储存，所有数组的顺序按照层数从上往下，且每一层的数组内元素按照从左往右排列。保证结点数小于等于500。</p>
<hr>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><pre><code>用nlast记录当前访问的节点
用last记录每层的最后一个点(初始化为root)
然后用队列BFS,每访问一个节点就用新的节点更新nlast
每当遇到 last以后 就更新 last=nlast
</code></pre><hr>
<h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">  * 二叉树层序打印</span></div><div class="line"><span class="comment">  * source : https://www.nowcoder.com/courses/1/1/2</span></div><div class="line"><span class="comment">  */</span></div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">struct TreeNode &#123;</span></div><div class="line"><span class="comment">    int val;</span></div><div class="line"><span class="comment">    struct TreeNode *left;</span></div><div class="line"><span class="comment">    struct TreeNode *right;</span></div><div class="line"><span class="comment">    TreeNode(int x) :</span></div><div class="line"><span class="comment">            val(x), left(NULL), right(NULL) &#123;</span></div><div class="line"><span class="comment">    &#125;</span></div><div class="line"><span class="comment">&#125;;*/</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreePrinter</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; printTree(TreeNode* root) &#123;</div><div class="line">        <span class="comment">// write code here</span></div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; res;</div><div class="line">        <span class="keyword">if</span>(root == <span class="literal">NULL</span>) <span class="keyword">return</span> res;</div><div class="line">        <span class="built_in">queue</span>&lt;TreeNode*&gt; q;</div><div class="line">        q.push(root);</div><div class="line">        TreeNode* nlast = root, *last = root;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; row;</div><div class="line">        <span class="keyword">while</span> (q.size()) &#123;</div><div class="line">            TreeNode * ans = q.front();</div><div class="line">            q.pop();</div><div class="line">            <span class="keyword">if</span>(ans-&gt;left != <span class="literal">NULL</span>) &#123;</div><div class="line">                q.push(ans-&gt;left);</div><div class="line">                nlast = ans-&gt;left;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(ans-&gt;right != <span class="literal">NULL</span>) &#123;</div><div class="line">                q.push(ans-&gt;right);</div><div class="line">                nlast = ans-&gt;right;</div><div class="line">            &#125;</div><div class="line">            row.push_back(ans-&gt;val);</div><div class="line">            <span class="keyword">if</span>(ans == last) &#123;</div><div class="line">                res.push_back(row);</div><div class="line">                row.clear();</div><div class="line">                last = nlast;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<hr>
]]></content>
    
    <summary type="html">
    
      二叉树打印
    
    </summary>
    
    
      <category term="Algorithm" scheme="http://draymonder.me/tags/Algorithm/"/>
    
      <category term="BinaryTree" scheme="http://draymonder.me/tags/BinaryTree/"/>
    
  </entry>
  
  <entry>
    <title>刷题小计</title>
    <link href="http://draymonder.me/2018/06/01/51nod-fourth-Level/"/>
    <id>http://draymonder.me/2018/06/01/51nod-fourth-Level/</id>
    <published>2018-06-01T09:00:00.000Z</published>
    <updated>2018-06-28T14:08:56.121Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>  感觉自己确实还不够踏实，一直在做水题，没有什么突破。 所以以后尽量每天一道四级题。<br>  重在记录自己做题时候的思路。</p>
<h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="基础算法"><a href="#基础算法" class="headerlink" title="基础算法"></a>基础算法</h2><h2 id="51nod"><a href="#51nod" class="headerlink" title="51nod"></a>51nod</h2><h3 id="1051-最大子矩阵和"><a href="#1051-最大子矩阵和" class="headerlink" title="1051 最大子矩阵和"></a>1051 最大子矩阵和</h3><p>题意：<br>给一个矩阵，求子矩阵的和最大的数<br>思路：<br>类似<code>最大字段和</code>，给定第i行和第j行 然后用sum数组记录每列的前缀和。<br>接着第i行到第j行的每列求和，从第1列到第m列作最大字段和处理</p>
<h3 id="1086-背包问题-V2"><a href="#1086-背包问题-V2" class="headerlink" title="1086 背包问题 V2"></a>1086 背包问题 V2</h3><p>题意：<br>给n个物品，背包最大为W 给出n个物品的体积，数量，价值<br>思路：<br>如果第i个物品 体积x数量 &gt; W 那说明这个物品足够，可以用完全背包处理，不需要考虑数量问题<br>否则 就按照 01背包处理(二进制优化一下更好的吧)</p>
<h3 id="1151-回文串划分"><a href="#1151-回文串划分" class="headerlink" title="1151 回文串划分"></a>1151 回文串划分</h3><p>题意：<br>给一个字符串，求字符串最少可以被划分为多少个回文串<br>思路：<br>dp[i]表示以i为结尾的最小字符串划分<br><code>dp[i] = min(dp[i],dp[j-1]+1) (j &lt; i 且字符串从j到i是个回文串)</code></p>
<h3 id="1021-石子归并"><a href="#1021-石子归并" class="headerlink" title="1021 石子归并"></a>1021 石子归并</h3><p>题意：<br>N堆石子每次只能选相邻的2堆石子合并成新的一堆，并将新的一堆石子数记为该次合并的代价。计算将N堆石子合并成一堆的最小代价<br>思路：<br>dp[i][i]表示一个石子堆，不需要代价。<br>然后枚举长度，枚举起点i，终点j由起点+长度计算，<br>接着枚举[i,j)中的每一个k 使得<br><code>dp[i][j] = min(dp[i][j], dp[i][k]+dp[k+1][j]+sum[j]-sum[i-1]);</code></p>
<h2 id="codeforces"><a href="#codeforces" class="headerlink" title="codeforces"></a>codeforces</h2><h3 id="Mike-and-Feet-305-div2-D"><a href="#Mike-and-Feet-305-div2-D" class="headerlink" title="Mike and Feet (#305 div2 D)"></a>Mike and Feet (#305 div2 D)</h3><p>题意：<br>给你n个数，一个长为x的连续序列的强度是其中最小的数，然后分别求出长度为1-n的最大的强度<br>思路：<br><code>单调栈</code>,维护一个单调递增栈（从栈底到栈顶单调递增），存每个点的他的值和贡献的长度</p>
<h2 id="挑战"><a href="#挑战" class="headerlink" title="挑战"></a>挑战</h2><h3 id="POJ-3061-尺取法"><a href="#POJ-3061-尺取法" class="headerlink" title="POJ 3061(尺取法)"></a>POJ 3061(尺取法)</h3><p>题意：<br>长度n的数列(元素均大于0) 以及 S 求总和不小于S的连续子序列的长度的最小值。<br>思路：<br>对于As开始总和最初大于S时的连续子序列<code>As+...+At</code><br>必定 <code>As+1+...+At-1 &lt; As+...+At-1 &lt; S</code>,<br>所以只要找到As开始,At结尾的连续子序列和&gt;S,As+1开始的连续子序列和&gt;S的结尾必定是At及At的以后，不能是之前</p>
<h3 id="反转-开关问题"><a href="#反转-开关问题" class="headerlink" title="反转(开关问题)"></a>反转(开关问题)</h3><p>题意：<br>N头牛排成一列，每头牛或者向前或者向后。 求为了让所有的牛都能面向前方需要的最少操作的次数M和对应的区间操作长度K<br>思路：<br>枚举每个K，然后对每个相应的区间进行反转，复杂度O(n3)，会T，然后针对区间反转，可以利用dp[N]表示 [i,i+k-1]这个区间是否被反转，反转为1  所以对于相应的i，只需要判断<code>dp[i-k+1]+...dp[i-1]+dir[i]</code>是否为0，如果为0，需要反转。<br>最后判断[n-k+1,n)的区间里面是否所有的数都不需要反转就可以了</p>
<h2 id="上海金马五校赛"><a href="#上海金马五校赛" class="headerlink" title="上海金马五校赛"></a>上海金马五校赛</h2><h3 id="Wasserstein-Distance"><a href="#Wasserstein-Distance" class="headerlink" title="Wasserstein Distance"></a>Wasserstein Distance</h3><p>题意：<br>有两堆泥土，每一堆有n个位置，第一堆泥土的第i个位置有ai克泥土，第二堆泥土的第i个位置有bi克泥土。小埃可以在第一堆泥土中任意移挪动泥土，具体地从第i个位置移动k克泥土到第j个位置，但是会消耗 <code>k*|i-j|</code> 的体力。小埃的最终目的是通过在第一堆中挪动泥土，使得第一堆泥土最终的形态和第二堆相同，也就是ai=bi (1&lt;=i&lt;=n), 但是要求所花费的体力最小<br>思路：<br>贪心的处理，使得每临近的位置互相交换泥土(这样是局部最优解，但不知道怎么也是全局最优解)然后遍历一遍数组用ans加和|Ai-Bi|，并更新Ai+1加和Ai-Bi(表示从Ai+1移动土堆到Ai了</p>
<h3 id="K序列"><a href="#K序列" class="headerlink" title="K序列"></a>K序列</h3><p>题意：<br>给一个数组 a，长度为 n，若某个子序列中的和为 K 的倍数，那么这个序列被称为“K 序列”。现在要你 对数组 a 求出最长的子序列的长度，满足这个序列是 K 序列。<br>思路：<br>这个题，貌似出的不大好，因为序列没说是不是连续的。<br>如果是<code>连续</code>的，用前缀和记录，对于每个sum[i]%k的结果p,总会有最大的位置，<br>和最小的位置，那么直接遍历从0-k，p最后的位置 - p开始的位置就可以了<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">for(int i=<span class="number">1</span><span class="comment">;i&lt;=n;i++) &#123;</span></div><div class="line">    <span class="built_in">s1</span>[sum[i]] = i<span class="comment">;</span></div><div class="line">    if(<span class="built_in">s2</span>[sum[i]] == <span class="number">0</span> &amp;&amp; sum[i] != <span class="number">0</span>)</div><div class="line">        <span class="built_in">s2</span>[sum[i]] = i<span class="comment">;</span></div><div class="line">&#125;</div><div class="line">int mx = <span class="number">0</span><span class="comment">;</span></div><div class="line">for(int i=<span class="number">0</span><span class="comment">;i&lt;N*100;i++) &#123;</span></div><div class="line">    if(<span class="built_in">s2</span>[i] != -<span class="number">1</span>)</div><div class="line">        mx = max(mx,<span class="built_in">s1</span>[i]-<span class="built_in">s2</span>[i])<span class="comment">;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如果是<code>不连续</code>的，用dp,复杂度为n*k<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">int last = 0;</div><div class="line">dp[<span class="string">last</span>][<span class="symbol">s[1</span>]] = 1;//dp[<span class="string">0</span>][<span class="symbol">i</span>] 表示加和对k取余为i的最长序列长度</div><div class="line">for(int i=2; i<span class="xml"><span class="tag">&lt;<span class="name">=n;</span> <span class="attr">i</span>++)</span></span></div><div class="line"><span class="xml">&#123;</span></div><div class="line"><span class="xml">    last = 1 - last;</span></div><div class="line"><span class="xml">    for(int j=0; j<span class="tag">&lt;<span class="name">k;</span> <span class="attr">j</span>++)</span></span></div><div class="line"><span class="xml">    &#123;</span></div><div class="line"><span class="xml">        if(dp[1-last][j] !=0)</span></div><div class="line"><span class="xml">            dp[last][ (j+s[i])%k] = max(dp[1-last][ (j+s[i])%k],dp[1-last][j]+1);</span></div><div class="line"><span class="xml">        else</span></div><div class="line"><span class="xml">            dp[last][(j+s[i])%k ] =dp[1-last][ (j+s[i])%k];</span></div><div class="line"><span class="xml">    &#125;</span></div><div class="line"><span class="xml">&#125;</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      截止到2018.06.01的刷题记录
    
    </summary>
    
    
      <category term="Algorithm" scheme="http://draymonder.me/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript BOM对象模型</title>
    <link href="http://draymonder.me/2018/05/29/the-use-of-js2/"/>
    <id>http://draymonder.me/2018/05/29/the-use-of-js2/</id>
    <published>2018-05-29T14:00:00.000Z</published>
    <updated>2018-06-02T06:58:23.795Z</updated>
    
    <content type="html"><![CDATA[<h1 id="BOM对象模型-Browser-Object-Model"><a href="#BOM对象模型-Browser-Object-Model" class="headerlink" title="BOM对象模型(Browser Object Model)"></a>BOM对象模型(Browser Object Model)</h1><ul>
<li>navigator</li>
<li>screen</li>
<li>location</li>
<li>history</li>
<li>window<ul>
<li>setInterval() / clearInterval()</li>
<li>setTimeout() / clearTimeout()</li>
</ul>
</li>
</ul>
<p>set()方法传递参数有两个 ， 第一个是code，即方法的代码，第二个是时间，单位是毫秒<br>setInterval() 是周期性的执行代码<br>setTimeout() 是只在给定的时间时 执行代码(一次)<br><br><br>参考文档:&nbsp;&nbsp;<a href="https://itbilu.com/javascript/js/4k9JcnZRl.html" target="_blank" rel="external">JavaScript BOM对象</a></p>
<h1 id="方法重载"><a href="#方法重载" class="headerlink" title="方法重载"></a>方法重载</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;js不存在方法重载，调用的都是最后一个方法名的方法体<br><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span><span class="params">(a, b)</span> <span class="comment">&#123;</span></span></div><div class="line"><span class="function"><span class="comment">    return a + b;</span></span></div><div class="line"><span class="function"><span class="comment">&#125;</span></span></div><div class="line"><span class="function"></span></div><div class="line"><span class="function"><span class="title">function</span> <span class="title">add</span><span class="params">(a, b, c)</span> <span class="comment">&#123;</span></span></div><div class="line"><span class="function"><span class="comment">    return a + b + c;</span></span></div><div class="line"><span class="function"><span class="comment">&#125;</span></span></div><div class="line"><span class="function"></span></div><div class="line"><span class="function"><span class="title">alert</span><span class="params">( <span class="keyword">add</span>(1,2)</span> );</span> <span class="comment">//返回NaN</span></div><div class="line">alert( <span class="keyword">add</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>) ); <span class="comment">//返回NaN</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span><span class="params">(a, b, c, d)</span> <span class="comment">&#123;</span></span></div><div class="line"><span class="function"><span class="comment">    return a + b + c + d;</span></span></div><div class="line"><span class="function"><span class="comment">&#125;</span></span></div><div class="line"><span class="function"></span></div><div class="line"><span class="function"><span class="title">alert</span><span class="params">( <span class="keyword">add</span>(1,2,3,4)</span> );</span> <span class="comment">//返回10</span></div></pre></td></tr></table></figure></p>
<p>但是我们可以模拟出重载<br>js中 用 <code>arguments</code>数组来记录传递的参数</p>
<h1 id="onclick传函数问题"><a href="#onclick传函数问题" class="headerlink" title="onclick传函数问题"></a>onclick传函数问题</h1><p>直接上代码<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.draymonder.me"</span> <span class="attr">onclick</span>=<span class="string">"f()"</span>&gt;</span>draymonder博客<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.draymonder.me"</span> <span class="attr">onclick</span>=<span class="string">"return f()"</span>&gt;</span>draymonder博客<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">f</span><span class="params">()</span> </span>&#123;</span></div><div class="line"><span class="actionscript">        <span class="keyword">return</span> <span class="literal">false</span>;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>根据上面的代码  一个<code>onclick=&quot;f()&quot;</code> 另外一个<code>return f()</code><br><code>onclick=&quot;function()&quot;</code> 表示只会执行 function , 但是不会传回 function 中之回传值<br><code>onclick = &quot;return function()&quot;</code> 则是 执行 function 并传回 function 中之回传值<br>所以第二个a标签  无论怎么点击都不会发生跳转，而第一个标签由于f()仅仅执行，不返回结果，所以能正常跳转的把</p>
]]></content>
    
    <summary type="html">
    
      Js BOM对象模型 以及 其他一些小知识点
    
    </summary>
    
    
      <category term="Js" scheme="http://draymonder.me/tags/Js/"/>
    
  </entry>
  
  <entry>
    <title>nth_element的使用</title>
    <link href="http://draymonder.me/2018/05/28/nth-element/"/>
    <id>http://draymonder.me/2018/05/28/nth-element/</id>
    <published>2018-05-28T15:00:00.000Z</published>
    <updated>2018-05-28T10:50:48.510Z</updated>
    
    <content type="html"><![CDATA[<h1 id="方法使用"><a href="#方法使用" class="headerlink" title="方法使用"></a>方法使用</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;nth_element(first, nth, last, compare) 使得第n大元素处于第n位置（从0开始,其位置是下标为<br>n的元素），并且比这个元素小的元素都排在这个元素之前，比这个元素大的元素都排在这个元素之后，但不能保证他们是有序的</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">int</span> n = <span class="number">50</span>;</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v(n);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) &#123;</div><div class="line">        v[i] = i;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 随机置换</span></div><div class="line">    random_shuffle(v.begin(),v.end());</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>,v[i]);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">    nth_element(v.begin(),v.begin()+<span class="number">5</span>,v.end());</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>,v[i]);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p>看文章 大概都是 二分划分 然后插排 //平均复杂度 O(n)<br>当然 也可以建立一个大小为n的最大堆，然后每次比较其他的数 //平均复杂度 O( N * log(k) )<br><a href="https://www.felix021.com/blog/read.php?1653" target="_blank" rel="external">参考文章</a></p>
]]></content>
    
    <summary type="html">
    
      nth_element的使用
    
    </summary>
    
    
      <category term="Algorithm" scheme="http://draymonder.me/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>TCP/IP、Http、Socket的区别</title>
    <link href="http://draymonder.me/2018/05/21/the-network1/"/>
    <id>http://draymonder.me/2018/05/21/the-network1/</id>
    <published>2018-05-21T15:00:00.000Z</published>
    <updated>2018-05-22T15:00:50.470Z</updated>
    
    <content type="html"><![CDATA[<p><b>&nbsp;&nbsp;&nbsp;&nbsp;以下内容部分或全部Copy自他人博客，为了巩固自己的基础知识和丰富自己对协议的了解，侵权删</b></p>
<h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;网络由下往上分为<code>物理层、数据链路层、网络层、传输层、会话层、表示层和应用层</code>。通过初步的了解，我知道<code>IP协议</code>对应于<code>网络层</code>，<code>TCP协议</code>对应于<code>传输层</code>，而<code>HTTP协议</code>对应于<code>应用层</code>，三者从本质上来说没有可比性，<code>socket</code>则是对TCP/IP协议的封装和应用(个人理解就是TCP/IP的具体实现，提供调用的接口</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;<font color="red">TCP/IP只是一个协议栈，就像操作系统的运行机制一样，必须要具体实现，同时还要提供对外的操作接口。这个就像操作系统会提供标准的编程接口，比如win32编程接口一样，TCP/IP也要提供可供程序员做网络开发所用的接口，这就是Socket编程接口。<br> </font></p>
<h2 id="笔试-面试概念"><a href="#笔试-面试概念" class="headerlink" title="笔试/面试概念"></a>笔试/面试概念</h2><h3 id="什么是TCP连接的三次握手"><a href="#什么是TCP连接的三次握手" class="headerlink" title="什么是TCP连接的三次握手"></a>什么是TCP连接的三次握手</h3><p>第一次握手：客户端发送syn包(syn=j)到服务器，并进入SYN_SEND状态，等待服务器确认；<br>第二次握手：服务器收到syn包，必须确认客户的SYN（ack=j+1），同时自己也发送一个SYN包（syn=k），即SYN+ACK包，此时服务器进入SYN_RECV状态；<br>第三次握手：客户端收到服务器的SYN＋ACK包，向服务器发送确认包ACK(ack=k+1)，此包发送完毕，客户端和服务器进入ESTABLISHED状态，完成三次握手。<br>  握手过程中传送的包里不包含数据，三次握手完毕后，客户端与服务器才正式开始传送数据。理想状态下，TCP连接一旦建立，在通信双方中的任何一方主动关闭连接之前，TCP 连接都将被一直保持下去。断开连接时服务器和客户端均可以主动发起断开TCP连接的请求，断开过程需要经过“四次握手”（过程就不细写了，就是服务器和客户端交互，最终确定断开）</p>
<h3 id="利用Socket建立网络连接的步骤"><a href="#利用Socket建立网络连接的步骤" class="headerlink" title="利用Socket建立网络连接的步骤"></a>利用Socket建立网络连接的步骤</h3><p>建立Socket连接至少需要一对套接字，其中一个运行于客户端，称为ClientSocket ，另一个运行于服务器端，称为ServerSocket 。</p>
<p>套接字之间的连接过程分为三个步骤：<code>服务器监听</code>，<code>客户端请求</code>，<code>连接确认</code>。</p>
<p>1。服务器监听：服务器端套接字并不定位具体的客户端套接字，而是处于等待连接的状态，实时监控网络状态，等待客户端的连接请求。</p>
<p>2。客户端请求：指客户端的套接字提出连接请求，要连接的目标是服务器端的套接字。为此，客户端的套接字必须首先描述它要连接的服务器的套接字，指出服务器端套接字的地址和端口号，然后就向服务器端套接字提出连接请求。</p>
<p>3。连接确认：当服务器端套接字监听到或者说接收到客户端套接字的连接请求时，就响应客户端套接字的请求，建立一个新的线程，把服务器端套接字的描述发给客户端，一旦客户端确认了此描述，双方就正式建立连接。而服务器端套接字继续处于监听状态，继续接收其他客户端套接字的连接请求。</p>
<h3 id="HTTP链接的特点"><a href="#HTTP链接的特点" class="headerlink" title="HTTP链接的特点"></a>HTTP链接的特点</h3><p>HTTP协议即超文本传送协议(Hypertext Transfer Protocol )，是Web联网的基础，也是手机联网常用的协议之一，HTTP协议是建立在TCP协议之上的一种应用。</p>
<p>HTTP连接最显著的特点是客户端发送的每次请求都需要服务器回送响应，在请求结束后，会主动释放连接。从建立连接到关闭连接的过程称为“一次连接”。</p>
<h3 id="TCP和UDP的区别（考点）"><a href="#TCP和UDP的区别（考点）" class="headerlink" title="TCP和UDP的区别（考点）"></a>TCP和UDP的区别（考点）</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;为了便于理解，其实TCP像打电话，必须接通才能说话<br> 而UDP则像发短信，发送即可，至于收到收不到，可以让接受方回复短信</p>
<p>1。TCP是面向链接的，虽然说网络的不安全不稳定特性决定了多少次握手都不能保证连接的可靠性，但TCP的三次握手在最低限度上（实际上也很大程度上保证了）保证了连接的可靠性；而UDP不是面向连接的，UDP传送数据前并不与对方建立连接，对接收到的数据也不发送确认信号，发送端不知道数据是否会正确接收，当然也不用重发，所以说UDP是无连接的、不可靠的一种数据传输协议。</p>
<p>2。也正由于1所说的特点，使得UDP的开销更小数据传输速率更高，因为不必进行收发数据的确认，所以UDP的实时性更好。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;知道了TCP和UDP的区别，就不难理解为何采用TCP传输协议的MSN比采用UDP的QQ传输文件慢了，但并不能说QQ的通信是不安全的，因为程序员可以手动对UDP的数据收发进行验证，比如发送方对每个数据包进行编号然后由接收方进行验证啊什么的，即使是这样，UDP因为在底层协议的封装上没有采用类似TCP的“三次握手”而实现了TCP所无法达到的传输效率。</p>
]]></content>
    
    <summary type="html">
    
      最近开课了计算机网络，也学习了关于Java的网络编程
    
    </summary>
    
    
      <category term="网络" scheme="http://draymonder.me/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>心情小扎</title>
    <link href="http://draymonder.me/2018/05/15/the-diary-05-15/"/>
    <id>http://draymonder.me/2018/05/15/the-diary-05-15/</id>
    <published>2018-05-15T15:30:00.000Z</published>
    <updated>2018-05-22T15:00:58.356Z</updated>
    
    <content type="html"><![CDATA[<h1 id="反思"><a href="#反思" class="headerlink" title="反思"></a>反思</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;已经大二下学期过去半个学期了，想想这个学期颓废的状态，真的好痛心，虽然取得了一些小成绩,但是凭心而论，那都是靠别人的努力所获得的，这样的荣誉或者证书其实真的对自己的成长没有太大的作用，反而会助长自己的骄傲的小情绪呢吧。<br>&nbsp;&nbsp;&nbsp;&nbsp;悟已往之不谏，知来者之可追。<br>&nbsp;&nbsp;&nbsp;&nbsp;上周末去南京打了省赛，真的，整个队，神迷离，题目看不懂，枚举，暴力，排序简单的trick题目都Wa了很多次，痛心棘手啊。<br>&nbsp;&nbsp;&nbsp;&nbsp;昨天考完了操作系统，发现自己真的是好菜的呢，不好好看书，也不好好刷题，考试的时候一脸懵逼的看着不会做的题目，着实心痛。</p>
<h1 id="Flag"><a href="#Flag" class="headerlink" title="Flag"></a>Flag</h1><ul>
<li>减肥的了，控制在130斤左右吧，太胖了有种自卑感</li>
<li>每周写<code>leetcode</code> 5道题</li>
<li>JavaSE学完，以后技术栈就偏向Java了，然后开始JavaEE的学习</li>
<li>每周多陪陪人家嘛</li>
<li>未完待续…</li>
</ul>
]]></content>
    
    <summary type="html">
    
      咸鱼的我，想要调整一下状态
    
    </summary>
    
    
      <category term="Diary" scheme="http://draymonder.me/tags/Diary/"/>
    
  </entry>
  
  <entry>
    <title>操作系统复习汇总</title>
    <link href="http://draymonder.me/2018/05/11/os/"/>
    <id>http://draymonder.me/2018/05/11/os/</id>
    <published>2018-05-11T15:30:00.000Z</published>
    <updated>2018-05-11T15:20:47.335Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一章-操作系统绪论"><a href="#第一章-操作系统绪论" class="headerlink" title="第一章 操作系统绪论"></a>第一章 操作系统绪论</h1><ol>
<li>在操作系统中，处理机负责对进程进行管理和调度，对系统中的信息进行管理的部分通常称为<br><code>文件系统</code></li>
</ol>
<h1 id="第二章-进程控制和同步"><a href="#第二章-进程控制和同步" class="headerlink" title="第二章 进程控制和同步"></a>第二章 进程控制和同步</h1><ol>
<li>临界区是<code>一段程序</code></li>
<li>信箱通信是一种<code>间接</code>通信方式</li>
<li>一个进程被唤醒意味着<code>进程变为就绪状态</code></li>
<li>进程由<code>PCB</code>、<code>程序段</code>和<code>数据段</code>三部分组成，其中<code>PCB</code>是进程存在的唯一标志。而<code>程序段</code>部分也可以为其它进程共享</li>
<li><code>同步</code>指进程间具有的一定逻辑关系；<code>互斥</code>是指进程间在使用共享资源方面的约束关系。</li>
<li>产生死锁的四个必要条件是：<code>互斥、请求与保持、循环等待和不可剥夺</code>。</li>
<li>银行家算法在解决死锁问题中是用于<code>避免死锁</code>的。</li>
</ol>
<h1 id="第三章-存储管理"><a href="#第三章-存储管理" class="headerlink" title="第三章 存储管理"></a>第三章 存储管理</h1><ol>
<li>采用<code>分段式存储管理</code>不会产生内部碎片</li>
</ol>
<h1 id="第四章-设备管理"><a href="#第四章-设备管理" class="headerlink" title="第四章 设备管理"></a>第四章 设备管理</h1><ol>
<li>在采用SPOOLING 技术的系统中，用户的打印结果首先被送到<code>磁盘固定区域</code></li>
<li>进行设备分配时所需的数据表格主要有<code>系统设备表</code>，<code>设备控制表</code>，<code>通道控制表</code>和<br><code>控制器控制表</code></li>
<li>逻辑设备表的主要功能是<code>实现设备独立性</code>和<code>实现设备分配灵活性</code></li>
<li>SPOOLING系统是由磁盘中的<code>输入井</code>、<code>输出井</code>、内存中的<code>输入缓冲区</code>、<code>输出缓冲区</code>，以及<code>输入进程</code>和<code>输出进程</code>组成的。</li>
</ol>
<h1 id="第五章-文件管理"><a href="#第五章-文件管理" class="headerlink" title="第五章 文件管理"></a>第五章 文件管理</h1><ol>
<li>文件的物理组织有<code>顺序</code>、<code>链接</code>和<code>索引</code>。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      考试前复习一些选择题
    
    </summary>
    
    
      <category term="os" scheme="http://draymonder.me/tags/os/"/>
    
  </entry>
  
  <entry>
    <title>快排简单实现</title>
    <link href="http://draymonder.me/2018/05/11/quickSort/"/>
    <id>http://draymonder.me/2018/05/11/quickSort/</id>
    <published>2018-05-11T15:30:00.000Z</published>
    <updated>2018-06-23T10:08:59.955Z</updated>
    
    <content type="html"><![CDATA[<p>平均算法复杂度为O(nlogn)<br>最坏算法复杂度O(n2) {当需要排序的数组 本身已经排好序时，递归由普通二叉树退化成单向的一条链}<br><figure class="highlight stan"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Partition 划分函数</span></div><div class="line"><span class="comment"> * @Param (data[], start, ed)</span></div><div class="line"><span class="comment"> * @return (中间基准)</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="selector-tag">int</span> Partition(<span class="selector-tag">int</span> <span class="title">data</span>[], <span class="selector-tag">int</span> start, <span class="selector-tag">int</span> ed) &#123;</div><div class="line">    <span class="name">if</span>(<span class="title">data</span> == NULL || start &lt; <span class="number">0</span>) &#123;</div><div class="line">        cout &lt;&lt; "Invalid Input" &lt;&lt;endl;</div><div class="line">        return -<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="selector-tag">int</span> key = <span class="title">data</span>[start];</div><div class="line">    <span class="selector-tag">int</span> i = start, j = ed-<span class="number">1</span>;</div><div class="line">    <span class="name">while</span> (i &lt; j) &#123;</div><div class="line">        <span class="name">while</span> (<span class="title">data</span>[j] &gt;= key &amp;&amp; i &lt; j)</div><div class="line">            j--;</div><div class="line">        <span class="name">while</span> (<span class="title">data</span>[i] &lt;= key &amp;&amp; i &lt; j)</div><div class="line">            i++;</div><div class="line">        <span class="name">if</span>(i &lt; j) swap(<span class="title">data</span>[i],<span class="title">data</span>[j]);</div><div class="line">    &#125;</div><div class="line">    <span class="title">data</span>[start] = <span class="title">data</span>[i];</div><div class="line">    <span class="title">data</span>[i] = key;</div><div class="line">    return i;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * quickSort 快排函数</span></div><div class="line"><span class="comment"> * @param(data,0,n)</span></div><div class="line"><span class="comment"> */</span></div><div class="line">void quickSort(<span class="selector-tag">int</span> <span class="title">data</span>[],<span class="selector-tag">int</span> st,<span class="selector-tag">int</span> ed) &#123;</div><div class="line">    <span class="selector-tag">int</span> index = Partition(<span class="title">data</span>,st,ed);</div><div class="line">    <span class="name">if</span>(index &gt; st)</div><div class="line">        quickSort(<span class="title">data</span>,st,index);</div><div class="line">    <span class="name">if</span>(index &lt; ed)</div><div class="line">        quickSort(<span class="title">data</span>,index+<span class="number">1</span>,ed);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><a href="http://developer.51cto.com/art/201403/430986.htm" target="_blank" rel="external">参考链接</a></p>
]]></content>
    
    <summary type="html">
    
      快速排序的简单实现
    
    </summary>
    
    
      <category term="Algorithm" scheme="http://draymonder.me/tags/Algorithm/"/>
    
      <category term="sort" scheme="http://draymonder.me/tags/sort/"/>
    
  </entry>
  
  <entry>
    <title>JavaSE的IO流</title>
    <link href="http://draymonder.me/2018/05/06/javase-io/"/>
    <id>http://draymonder.me/2018/05/06/javase-io/</id>
    <published>2018-05-06T15:00:00.000Z</published>
    <updated>2018-05-05T05:47:23.444Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;五一玩了三天LOL，嘿嘿，可能假期就是用来放松的？<br>&nbsp;&nbsp;&nbsp;&nbsp;java从学习到现在已经有快一个月了，其实基础语法和基础的面向对象了不怎么难得，就是自己一直没有把控好学习时间和学习的效率，导致学习java比较慢，当然了，也不能急于求成，因为学的东西越快越多，忘的也越快越多吧。 以后给自己的一个小提醒就是尽量不要在宿舍敲代码，出来，宿舍的效率还是有点儿低的。</p>
<h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="File"><a href="#File" class="headerlink" title="File"></a>File</h2><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//构造</span></div><div class="line"><span class="keyword">public</span> <span class="built_in">File</span>(<span class="keyword">String</span> pathname)</div><div class="line"><span class="keyword">public</span> <span class="built_in">File</span>(<span class="keyword">String</span> parent,<span class="keyword">String</span> child)</div><div class="line"><span class="keyword">public</span> <span class="built_in">File</span>(<span class="built_in">File</span> parent,<span class="keyword">String</span> child)</div><div class="line"></div><div class="line"><span class="comment">//创建</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> createNewFile()</div><div class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="built_in">mkdir</span>()</div><div class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> mkdirs()</div><div class="line"></div><div class="line"><span class="comment">//删除</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="keyword">delete</span>()</div><div class="line"></div><div class="line"><span class="comment">//重命名 也有 剪切的效果</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> renameTo(<span class="built_in">File</span> dest)</div><div class="line"></div><div class="line"><span class="comment">//判断</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="built_in">isDirectory</span>()</div><div class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> isFile()</div><div class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="built_in">exists</span>()</div><div class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> canRead()</div><div class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> canWrite()</div><div class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> isHidden()</div><div class="line"></div><div class="line"><span class="comment">//基本获取</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">String</span> getAbsolutePath()</div><div class="line"><span class="keyword">public</span> <span class="keyword">String</span> getPath()</div><div class="line"><span class="keyword">public</span> <span class="keyword">String</span> getName()</div><div class="line"><span class="keyword">public</span> <span class="keyword">long</span> length()</div><div class="line"><span class="keyword">public</span> <span class="keyword">long</span> lastModified()</div></pre></td></tr></table></figure>
<h4 id="高级获取-演示"><a href="#高级获取-演示" class="headerlink" title="高级获取 演示"></a>高级获取 演示</h4><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">String</span>[] filter)</div><div class="line"><span class="keyword">public</span> <span class="built_in">File</span>[] listFiles(FilenameFillist(FilenameFilterter filter)</div><div class="line"></div><div class="line"><span class="comment">//判断 是否符合过滤规则</span></div><div class="line"><span class="keyword">String</span> []str = file.list(<span class="keyword">new</span> FilenameFilter() &#123;</div><div class="line">    @Override</div><div class="line">    <span class="keyword">public</span> <span class="keyword">boolean</span> accept(<span class="built_in">File</span> arg0, <span class="keyword">String</span> arg1) &#123;</div><div class="line">        <span class="built_in">return</span> <span class="keyword">new</span> <span class="built_in">File</span>(arg0,arg1).isFile() &amp;&amp; arg1.endsWith(<span class="string">".iso"</span>); </div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a>IO流</h2><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><p>按照数据流向<br>&nbsp;&nbsp;&nbsp;&nbsp;输入流 读入数据<br>&nbsp;&nbsp;&nbsp;&nbsp;输出流 写出数据<br>按照数据类型<br>&nbsp;&nbsp;&nbsp;&nbsp;字节流 Reader和Writer<br>&nbsp;&nbsp;&nbsp;&nbsp;字符流 InputStream和OutputStream</p>
<h3 id="字节流"><a href="#字节流" class="headerlink" title="字节流"></a>字节流</h3><h4 id="FileOutputStream"><a href="#FileOutputStream" class="headerlink" title="FileOutputStream"></a>FileOutputStream</h4><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//构造</span></div><div class="line">FileOutputStream(<span class="built_in">File</span> file)</div><div class="line">FileOutputStream(<span class="keyword">String</span> name)</div><div class="line"></div><div class="line"><span class="comment">//写</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="built_in">write</span>(<span class="keyword">int</span> b)</div><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="built_in">write</span>(<span class="keyword">byte</span>[] b)</div><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="built_in">write</span>(<span class="keyword">byte</span>[] b,<span class="keyword">int</span> off,<span class="keyword">int</span> len)</div></pre></td></tr></table></figure>
<h4 id="FileInputStream"><a href="#FileInputStream" class="headerlink" title="FileInputStream"></a>FileInputStream</h4><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//构造</span></div><div class="line">FileInputStream(<span class="built_in">File</span> file)</div><div class="line">FileInputStream(<span class="keyword">String</span> name)</div><div class="line"></div><div class="line"><span class="comment">//读</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">int</span> <span class="built_in">read</span>()</div><div class="line"><span class="keyword">public</span> <span class="keyword">int</span> <span class="built_in">read</span>(<span class="keyword">byte</span>[] b) <span class="comment">//byte数组用来做缓冲区</span></div></pre></td></tr></table></figure>
<h3 id="字符流"><a href="#字符流" class="headerlink" title="字符流"></a>字符流</h3><h4 id="Stream"><a href="#Stream" class="headerlink" title="Stream"></a>Stream</h4><h5 id="InputStreamReader-OutputStreamWriter"><a href="#InputStreamReader-OutputStreamWriter" class="headerlink" title="InputStreamReader/OutputStreamWriter"></a>InputStreamReader/OutputStreamWriter</h5><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">InputStreamReader</span><span class="params">(InputStream is)</span></span>:用默认的编码读取数据</div><div class="line"><span class="function"><span class="title">InputStreamReader</span><span class="params">(InputStream is,String charsetName)</span></span>:用指定的编码读取数据</div><div class="line"></div><div class="line"><span class="function"><span class="title">OutputStreamWriter</span><span class="params">(OutputStream out)</span></span>:根据默认编码把字节流的数据转换为字符流</div><div class="line"><span class="function"><span class="title">OutputStreamWriter</span><span class="params">(OutputStream out,String charsetName)</span></span>:根据指定编码把字节流数据转换为字符流</div></pre></td></tr></table></figure>
<h6 id="转换流的简单形式"><a href="#转换流的简单形式" class="headerlink" title="转换流的简单形式"></a>转换流的简单形式</h6><p>&nbsp;&nbsp;&nbsp;&nbsp;由于我们常见的操作都是使用本地默认编码,所以,不用指定编码<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="attr">OutputStreamWriter</span> = FileOutputStream + 编码表(GBK)</div><div class="line"><span class="attr">FileWriter</span> = FileOutputStream + 编码表(GBK)</div><div class="line"></div><div class="line"><span class="attr">InputStreamReader</span> = FileInputStream + 编码表(GBK)</div><div class="line"><span class="attr">FileReader</span> = FileInputStream + 编码表(GBK)</div></pre></td></tr></table></figure></p>
<h4 id="Buffered"><a href="#Buffered" class="headerlink" title="Buffered"></a>Buffered</h4><h5 id="BufferedReader-BufferedWriter"><a href="#BufferedReader-BufferedWriter" class="headerlink" title="BufferedReader/BufferedWriter"></a>BufferedReader/BufferedWriter</h5><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">BufferedReader(Reader <span class="keyword">in</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getLineNumber</span>(<span class="params"></span>)获得当前行号。 </span></div><div class="line"><span class="function">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLineNumber</span>(<span class="params"><span class="keyword">int</span> lineNumber</span>) 更改行号</span></div><div class="line"><span class="function"><span class="title">BufferedWriter</span>(<span class="params">Writer <span class="keyword">out</span></span>)</span></div></pre></td></tr></table></figure>
<h4 id="close和flush的区别"><a href="#close和flush的区别" class="headerlink" title="close和flush的区别"></a>close和flush的区别</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;close()关闭流对象，但是先刷新一次缓冲区(就是把缓冲区的数据立即写出。关闭之后，流对象不可以继续再使用了。<br>&nbsp;&nbsp;&nbsp;&nbsp;flush()仅仅刷新缓冲区,刷新之后，流对象还可以继续使用。</p>
<h3 id="数据流"><a href="#数据流" class="headerlink" title="数据流"></a>数据流</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">DataInputStream</span> </div><div class="line"><span class="attribute">DataOutputStream</span></div></pre></td></tr></table></figure>
<h3 id="RandomAccessFile"><a href="#RandomAccessFile" class="headerlink" title="RandomAccessFile"></a>RandomAccessFile</h3><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span>：访问模式</div><div class="line">    <span class="string">"r"</span> 以只读方式打开。调用结果对象的任何 <span class="built_in">write</span> 方法都将导致抛出 IOException。  </div><div class="line">    <span class="string">"rw"</span> 打开以便读取和写入。如果该文件尚不存在，则尝试创建该文件。  </div><div class="line">    <span class="string">"rws"</span> 打开以便读取和写入，对于<span class="string">"rw"</span>，还要求对文件的内容或元数据的每个更新都同步写入到底层存储设备。  </div><div class="line">    <span class="string">"rwd"</span>打开以便读取和写入，对于<span class="string">"rw"</span>，还要求对文件内容的每个更新都同步写入到底层存储设备。 </div><div class="line">一般使用rw模式。</div></pre></td></tr></table></figure>
<h3 id="SequenceInputStream"><a href="#SequenceInputStream" class="headerlink" title="SequenceInputStream"></a>SequenceInputStream</h3><p>SequenceInputStream类可以将多个输入流串流在一起，合并为一个输入流，因此，该流也被称为合并流<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">SequenceInputStream</span><span class="params">(InputStream s1, InputStream s2)</span></span>  </div><div class="line"><span class="function"><span class="title">SequenceInputStream</span><span class="params">(Enumeration&lt;? extends InputStream&gt; e)</span></span></div></pre></td></tr></table></figure></p>
<h3 id="序列化流"><a href="#序列化流" class="headerlink" title="序列化流"></a>序列化流</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;序列化流：把对象按照流一样的方式存入文本文件或者在网络中传输。对象 – 流数据(ObjectOutputStream)<br>&nbsp;&nbsp;&nbsp;&nbsp;反序列化流:把文本文件中的流对象数据或者网络中的流对象数据还原成对象。流数据 – 对象(ObjectInputStream)</p>
<h2 id="编码问题"><a href="#编码问题" class="headerlink" title="编码问题"></a>编码问题</h2><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//字符集一样才能得到正确的解码结果</span></div><div class="line"><span class="keyword">String</span>(<span class="keyword">byte</span>[] bytes, <span class="keyword">String</span> charsetName):通过指定的字符集解码字节数组</div><div class="line"><span class="keyword">byte</span>[] getBytes(<span class="keyword">String</span> charsetName):使用指定的字符集合把字符串编码为字节数组</div></pre></td></tr></table></figure>
<h2 id="io实战"><a href="#io实战" class="headerlink" title="io实战"></a>io实战</h2><h3 id="文本复制"><a href="#文本复制" class="headerlink" title="文本复制"></a>文本复制</h3><figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span>. FileReader FileWriter 单个字符或者缓冲数组读</div><div class="line"><span class="number">2</span>. <span class="keyword">BufferedReader </span><span class="keyword">BufferedWriter </span>单个字符或者缓冲数组读</div><div class="line"><span class="number">3</span>. <span class="keyword">BufferedReader </span><span class="keyword">BufferedWriter </span>一行一行读，注意换行</div></pre></td></tr></table></figure>
<h3 id="图片复制"><a href="#图片复制" class="headerlink" title="图片复制"></a>图片复制</h3><figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span>. FileInputStream FileOutputStream 单个字符或者缓冲数组读</div><div class="line"><span class="number">2</span>. <span class="keyword">BufferedInputStream </span><span class="keyword">BufferedOutputStream </span>单个字符或者缓冲数组读</div></pre></td></tr></table></figure>
<h3 id="递归删除一个文件夹"><a href="#递归删除一个文件夹" class="headerlink" title="递归删除一个文件夹"></a>递归删除一个文件夹</h3><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> deleteFile(<span class="keyword">File</span> <span class="keyword">file</span>) &#123;</div><div class="line">    <span class="keyword">File</span> [] files = <span class="keyword">file</span>.listFiles();</div><div class="line">    <span class="keyword">if</span>(files != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">File</span> v : files ) &#123;</div><div class="line">            <span class="keyword">if</span>(v.isDirectory()) &#123;</div><div class="line">                deleteFile(v);</div><div class="line">            &#125;<span class="keyword">else</span> &#123;</div><div class="line">                System.out.<span class="keyword">println</span>(v.getName() + <span class="string">"----删除"</span> + v.<span class="keyword">delete</span>());</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        System.out.<span class="keyword">println</span>(<span class="keyword">file</span>.getName() + <span class="string">"----删除"</span> + <span class="keyword">file</span>.<span class="keyword">delete</span>());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="批量复制文件"><a href="#批量复制文件" class="headerlink" title="批量复制文件"></a>批量复制文件</h3><p><a href="https://www.jianshu.com/p/56843fdc2986" target="_blank" rel="external">Java文件拷贝的几种实现方案</a><br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> Copyppt(<span class="keyword">File</span> <span class="keyword">file</span>, <span class="keyword">File</span> destfolder) <span class="keyword">throws</span> IOException &#123;</div><div class="line">    <span class="keyword">File</span>[] files = <span class="keyword">file</span>.listFiles(); <span class="comment">//把文件下的目录找出来</span></div><div class="line">    <span class="keyword">if</span> (files != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">File</span> s : files) &#123;</div><div class="line">            <span class="keyword">if</span> (s.isDirectory()) &#123;</div><div class="line">                Copyppt(s, destfolder); <span class="comment">//如果是目录就接着递归查找</span></div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                String ppt = s.getName(); <span class="comment">//如果是文件</span></div><div class="line">                <span class="keyword">if</span> (ppt.endsWith(<span class="string">"ppt"</span>)) &#123; <span class="comment">//并且文件的命名后缀是ppt</span></div><div class="line">                    <span class="comment">//得到文件的复制目录</span></div><div class="line">                    String str = destfolder.getAbsolutePath() + <span class="string">"\\"</span> + ppt; </div><div class="line">                    <span class="keyword">File</span> destfile = <span class="keyword">new</span> <span class="keyword">File</span>(str);</div><div class="line">                    <span class="comment">//如果文件存在就不复制了</span></div><div class="line">                    <span class="keyword">if</span>(!destfile.exists()) &#123;</div><div class="line">                        System.out.<span class="keyword">println</span>(<span class="string">"拷贝"</span>+s.getName()+<span class="string">"到"</span>+destfile.toPath()+</div><div class="line">                                Files.<span class="keyword">copy</span>(s.toPath(), destfile.toPath()));</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//如果不处理重名情况，那么程序就会抛出FileAlreadyExistsException异常</span></div></pre></td></tr></table></figure></p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>  希望自己能够抓紧时间。 做自己能做的事，也做能让自己开心的事情。</p>
]]></content>
    
    <summary type="html">
    
      JavaSE的IO流学习
    
    </summary>
    
    
      <category term="JavaSE" scheme="http://draymonder.me/tags/JavaSE/"/>
    
  </entry>
  
  <entry>
    <title>Eclipse 导入工程</title>
    <link href="http://draymonder.me/2018/04/26/javase-import/"/>
    <id>http://draymonder.me/2018/04/26/javase-import/</id>
    <published>2018-04-26T10:00:00.000Z</published>
    <updated>2018-05-09T09:14:11.416Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;因为觉得看视频，进度挺慢，而且看完以后，并没有很好的掌握，但是单纯找每个类文件也很麻烦，所以就学习一下导入工程的方法，这样就可以看着代码学习了。</p>
<h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>1.在项目区域右键找到import</p>
<p>2.找到General，展开，并找到 Existing Projects into Workspace</p>
<p>3.点击next,然后选择你要导入的项目（注意：这里选择的是项目名称</p>
<p>因为还没有找到合适的图床，暂时没法分享图文<br><a href="https://blog.csdn.net/bing1926/article/details/80097334" target="_blank" rel="external">Eclipse 导入工程 有图版</a></p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;经过上面三步 就可以轻松的看项目里面的代码了，也可以自己动手去看着敲代码了</p>
]]></content>
    
    <summary type="html">
    
      JavaSE的project导入
    
    </summary>
    
    
      <category term="JavaSE" scheme="http://draymonder.me/tags/JavaSE/"/>
    
  </entry>
  
  <entry>
    <title>Git学习</title>
    <link href="http://draymonder.me/2018/04/16/git-learing/"/>
    <id>http://draymonder.me/2018/04/16/git-learing/</id>
    <published>2018-04-16T15:30:00.000Z</published>
    <updated>2018-04-17T12:48:32.805Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>听到大佬说我太菜了.没办法啊，确实蛮菜的，需要学习很多东西吧,就很难受。</p>
<h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git<span class="built_in"> config </span>--global user.name <span class="string">"Your Name"</span></div><div class="line">$ git<span class="built_in"> config </span>--global user.email <span class="string">"email@example.com"</span></div></pre></td></tr></table></figure>
<p><code>--global</code>是指这台机器上所有的Git仓库都会使用这个配置</p>
<h2 id="创建版本库"><a href="#创建版本库" class="headerlink" title="创建版本库"></a>创建版本库</h2><p>先<code>mkdir</code>建立一个空目录<br>然后，用<code>git init</code>初始化当前目录Git可以管理的仓库</p>
<h2 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h2><h3 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h3><p>用命令<code>git add ***</code>把文件添加到仓库<br>接着用<code>git commit -m &quot;***&quot;</code>把文件提交到仓库</p>
<h3 id="文件改动"><a href="#文件改动" class="headerlink" title="文件改动"></a>文件改动</h3><p><code>git status</code>命令可以让我们时刻掌握仓库当前的状态，上面的命令告诉我们，readme.txt被修改过了，但还没有准备提交的修改。<br><code>git diff</code>顾名思义就是查看difference，显示的格式正是Unix通用的diff格式<br><code>git log</code>命令显示从最近到最远的提交日志</p>
<p>Git必须知道当前版本是哪个版本，在Git中，用<code>HEAD</code>表示当前版本，也就是最新的提交，上一个版本就是<code>HEAD^</code>，上上一个版本就是<code>HEAD^^</code>，往上100个版本写成<code>HEAD~100</code>。</p>
<p>把当前版本回退到上一个版本，就可以使用<code>git reset --hard HEAD^</code>,经尝试,命令在<code>Bash</code><br>下运行无错，在<code>cmder</code>下会有出现More的提示，只需要再写一下HEAD后面的<code>^</code>就可以了</p>
<p>如果真的返回上一个版本了，还想撤回本次操作，那么可以使用<code>git reflog</code>命令，来记录你的每一次命令。接着用<code>git reset --hard commit_id</code>命令回到操作前的状态</p>
<h3 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h3><p>当发现文件改动后，准备提交前，发现文件有问题，可以用<code>git checkout -- file</code>可以丢弃工作区的修改<br>命令<code>git checkout -- git学习</code> 意思就是，把git学习文件在工作区的修改全部撤销，这里有两种情况：<br>一种是 git学习 自修改后还没有被放到暂存区，现在，<code>撤销修改就回到和版本库一模一样的状态</code><br>一种是 git学习 已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态</p>
<p>总之，就是让这个文件回到最近一次git commit或git add时的状态。</p>
<p>场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令<code>git checkout -- file</code><br>场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令<code>git reset HEAD file</code>，就回到了场景1，第二步按场景1操作。</p>
<h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p>当你在工作区删除文件后，你有两个选择<br>一是确实要从版本库中删除该文件，那就用命令<code>git rm file</code>删掉，并且<code>git commit</code><br>另一种情况是删错了，<code>git checkout -- file</code></p>
<h2 id="仓库"><a href="#仓库" class="headerlink" title="仓库"></a>仓库</h2><h3 id="分布式优点"><a href="#分布式优点" class="headerlink" title="分布式优点"></a>分布式优点</h3><p>可以利用ssh 添加多个Key，假定你有若干电脑，你一会儿在公司提交，一会儿在家里提交，只要把每台电脑的Key都添加到GitHub，就可以在每台电脑上往GitHub推送了</p>
<h3 id="推送到远程库"><a href="#推送到远程库" class="headerlink" title="推送到远程库"></a>推送到远程库</h3><p>关联远程库<br><code>git remote add origin https://github.com/Draymonders/git-learning.git</code><br>第一次推送master分支的所有内容<br><code>git push -u origin master</code><br>以后就可以用<br><code>git push origin master</code></p>
<p>使用<code>https</code>除了速度慢以外，还有个最大的麻烦是每次推送都必须输入口令，但是在某些只开放<br><code>http</code>端口的公司内部就无法使用<code>ssh</code>协议而只能用<code>https</code>。</p>
<h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><h3 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h3><p><code>git checkout -b dev</code> 表示创建并切换<br>相当于<br><figure class="highlight q"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git branch <span class="built_in">dev</span> <span class="comment">//创建dev分支</span></div><div class="line">git checkout <span class="built_in">dev</span> <span class="comment">//使用dev分支</span></div></pre></td></tr></table></figure></p>
<p><code>git branch</code> 命令会列出所有分支，当前分支前面会标一个*号</p>
<p>然后修改文件 接着<code>git add</code> and <code>git commit</code><br>接着回到master分支下 <code>git checkout master</code><br>把<code>dev</code>分支合并到<code>master</code>下,用<code>git merge dev</code><br>合并完成就可以删除<code>dev</code>分支了，用<code>git branch -d dev</code></p>
<p>分支语句汇总<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">查看分支：git branch</div><div class="line"></div><div class="line">创建分支：git branch &lt;<span class="built_in">name</span>&gt;</div><div class="line"></div><div class="line">切换分支：git checkout &lt;<span class="built_in">name</span>&gt;</div><div class="line"></div><div class="line">创建+切换分支：git checkout -b &lt;<span class="built_in">name</span>&gt;</div><div class="line"></div><div class="line">合并某分支到当前分支：git merge &lt;<span class="built_in">name</span>&gt;</div><div class="line"></div><div class="line">删除分支：git branch -d &lt;<span class="built_in">name</span>&gt;</div><div class="line"></div><div class="line">分支合并图：git <span class="built_in">log</span> <span class="comment">--graph</span></div></pre></td></tr></table></figure></p>
<h3 id="分支管理策略"><a href="#分支管理策略" class="headerlink" title="分支管理策略"></a>分支管理策略</h3><p>合并分支时，加上<code>--no-ff</code>参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。<br><code>git merge --no-ff -m &quot;merge with no-ff&quot; beta</code></p>
<p>master是稳定版本，最好不要轻易动<br>然后下面建立一个beta测试版本，用来汇总代码和测试<br>最后建立每个人的分支，汇总到beta分支下。</p>
<h3 id="团队协作"><a href="#团队协作" class="headerlink" title="团队协作"></a>团队协作</h3><p>在项目中，先添加<code>beta</code>分支<br><code>git clone</code>后接着用<code>git branch</code> 显示只有<code>master</code>分支<br>如果想要在<code>beta</code>分支上开发,就需要在本地创建beta分支和远程库的beta分支关联<br><code>git checkout -b beta origin/beta</code><br>最后上传的时候用<code>git push origin beta</code></p>
<h2 id="标签管理"><a href="#标签管理" class="headerlink" title="标签管理"></a>标签管理</h2><p>如果找之前的版本用commit_id比较麻烦，那么可以用标签来绑定对应的commit_id，标签一旦生成就不能改变</p>
<p>命令<code>git tag &lt;name&gt;</code>用于新建一个标签，默认为HEAD，也可以指定一个commit id；</p>
<p><code>git tag -a &lt;tagname&gt; -m &quot;***&quot;</code>可以指定标签信息；</p>
<p><code>git tag</code>可以查看所有标签。</p>
<p><code>git push origin &lt;tagname&gt;</code>可以推送一个本地标签；</p>
<p><code>git push origin --tags</code>可以推送全部未推送过的本地标签；</p>
<p><code>git tag -d &lt;tagname&gt;</code>可以删除一个本地标签；</p>
<p><code>git push origin :refs/tags/&lt;tagname&gt;</code>可以删除一个远程标签。</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p><a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="external">廖雪峰的Git教程</a><br><a href="https://www.cnblogs.com/schaepher/p/4933873.html" target="_blank" rel="external">GitHub团队项目合作流程</a></p>
<p>感觉发现了一个学长<a href="http://www.cnblogs.com/schaepher" target="_blank" rel="external">schaepher</a>解决了一下我的迷茫呢,嘿嘿，看了他的很多博文,蛮有营养，想做什么就做什么好了，顾虑那么多干嘛。</p>
]]></content>
    
    <summary type="html">
    
      Git学习，了解 以及使用
    
    </summary>
    
    
      <category term="Git" scheme="http://draymonder.me/tags/Git/"/>
    
  </entry>
  
</feed>
